Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CCOMMENT
    NUMBER
    QUESTION
    UCCCOMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> declaration
Rule 5     global_declaration -> function_definition
Rule 6     declaration -> decl_body SEMI
Rule 7     declaration_list -> declaration
Rule 8     declaration_list -> declaration_list declaration
Rule 9     declaration_list_opt -> declaration_list
Rule 10    declaration_list_opt -> empty
Rule 11    decl_body -> type_specifier init_declarator_list_opt
Rule 12    pointer -> TIMES
Rule 13    pointer -> TIMES pointer
Rule 14    declarator -> direct_declarator
Rule 15    declarator -> pointer direct_declarator
Rule 16    init_declarator -> declarator
Rule 17    init_declarator -> declarator ASSIGN initializer
Rule 18    init_declarator_list -> init_declarator
Rule 19    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 20    init_declarator_list_opt -> init_declarator_list
Rule 21    init_declarator_list_opt -> empty
Rule 22    parameter_declaration -> type_specifier declarator
Rule 23    parameter_list -> parameter_declaration
Rule 24    parameter_list -> parameter_list COMMA parameter_declaration
Rule 25    direct_declarator -> identifier
Rule 26    direct_declarator -> LPAREN declarator RPAREN
Rule 27    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 28    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 29    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 30    initializer -> assignment_expression
Rule 31    initializer -> LBRACES initializer_list RBRACES
Rule 32    initializer -> LBRACES initializer_list COMMA RBRACES
Rule 33    initializer_list -> initializer
Rule 34    initializer_list -> initializer_list COMMA initializer
Rule 35    postfix_expression -> primary_expression
Rule 36    postfix_expression -> postfix_expression PLUS_PLUS
Rule 37    postfix_expression -> postfix_expression MINUS_MINUS
Rule 38    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 39    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 40    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 41    argument_expression -> assignment_expression
Rule 42    argument_expression -> argument_expression COMMA assignment_expression
Rule 43    expression -> assignment_expression
Rule 44    expression -> expression COMMA assignment_expression
Rule 45    primary_expression -> identifier
Rule 46    primary_expression -> constant
Rule 47    primary_expression -> LPAREN expression RPAREN
Rule 48    cast_expression -> unary_expression
Rule 49    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 50    assignment_expression -> binary_expression
Rule 51    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 52    assignment_operator -> ASSIGN
Rule 53    assignment_operator -> ASSIGN_TIMES
Rule 54    assignment_operator -> ASSIGN_DIVIDE
Rule 55    assignment_operator -> ASSIGN_MOD
Rule 56    assignment_operator -> ASSIGN_PLUS
Rule 57    assignment_operator -> ASSIGN_MINUS
Rule 58    unary_expression -> postfix_expression
Rule 59    unary_expression -> PLUS_PLUS unary_expression
Rule 60    unary_expression -> MINUS_MINUS unary_expression
Rule 61    unary_expression -> unary_operator cast_expression
Rule 62    binary_expression -> cast_expression
Rule 63    binary_expression -> binary_expression TIMES binary_expression
Rule 64    binary_expression -> binary_expression DIVIDE binary_expression
Rule 65    binary_expression -> binary_expression MOD binary_expression
Rule 66    binary_expression -> binary_expression PLUS binary_expression
Rule 67    binary_expression -> binary_expression MINUS binary_expression
Rule 68    binary_expression -> binary_expression SMALLER binary_expression
Rule 69    binary_expression -> binary_expression SMALLER_EQUAL binary_expression
Rule 70    binary_expression -> binary_expression BIGGER binary_expression
Rule 71    binary_expression -> binary_expression BIGGER_EQUAL binary_expression
Rule 72    binary_expression -> binary_expression EQUAL binary_expression
Rule 73    binary_expression -> binary_expression DIFFERENT binary_expression
Rule 74    binary_expression -> binary_expression AND binary_expression
Rule 75    binary_expression -> binary_expression OR binary_expression
Rule 76    constant_expression -> binary_expression
Rule 77    constant_expression_opt -> constant_expression
Rule 78    constant_expression_opt -> empty
Rule 79    identifier -> ID
Rule 80    identifier_list_opt -> identifier_list
Rule 81    identifier_list_opt -> empty
Rule 82    identifier_list -> identifier
Rule 83    identifier_list -> identifier_list COMMA identifier
Rule 84    unary_operator -> UPPERSAND
Rule 85    unary_operator -> TIMES
Rule 86    unary_operator -> PLUS
Rule 87    unary_operator -> MINUS
Rule 88    unary_operator -> NOT
Rule 89    type_specifier -> VOID
Rule 90    type_specifier -> CHAR
Rule 91    type_specifier -> INT
Rule 92    type_specifier -> FLOAT
Rule 93    constant -> INT_CONST
Rule 94    constant -> FLOAT_CONST
Rule 95    constant -> STRING_CONST
Rule 96    jump_statement -> BREAK SEMI
Rule 97    jump_statement -> RETURN expression_opt SEMI
Rule 98    block_item -> declaration
Rule 99    block_item -> statement
Rule 100   block_item_list -> block_item
Rule 101   block_item_list -> block_item_list block_item
Rule 102   compound_statement -> LBRACES block_item_list RBRACES
Rule 103   selection_statement -> IF LPAREN expression RPAREN statement
Rule 104   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 105   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 106   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 107   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 108   expression_statement -> expression_opt SEMI
Rule 109   assert_statement -> ASSERT expression SEMI
Rule 110   print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 111   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 112   statement -> expression_statement
Rule 113   statement -> selection_statement
Rule 114   statement -> compound_statement
Rule 115   statement -> iteration_statement
Rule 116   statement -> jump_statement
Rule 117   statement -> assert_statement
Rule 118   statement -> print_statement
Rule 119   statement -> read_statement
Rule 120   expression_opt -> expression
Rule 121   expression_opt -> empty
Rule 122   function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 123   function_definition -> declarator declaration_list_opt compound_statement
Rule 124   empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
ASSERT               : 109
ASSIGN               : 17 52
ASSIGN_DIVIDE        : 54
ASSIGN_MINUS         : 57
ASSIGN_MOD           : 55
ASSIGN_PLUS          : 56
ASSIGN_TIMES         : 53
BIGGER               : 70
BIGGER_EQUAL         : 71
BREAK                : 96
CCOMMENT             : 
CHAR                 : 90
COMMA                : 19 24 32 34 42 44 83
DIFFERENT            : 73
DIVIDE               : 64
ELSE                 : 104
EQUAL                : 72
FLOAT                : 92
FLOAT_CONST          : 94
FOR                  : 106 107
ID                   : 79
IF                   : 103 104
INT                  : 91
INT_CONST            : 93
LBRACES              : 31 32 102
LBRACKET             : 27 40
LPAREN               : 26 28 29 38 39 47 49 103 104 105 106 107 110 111
MINUS                : 67 87
MINUS_MINUS          : 37 60
MOD                  : 65
NOT                  : 88
NUMBER               : 
OR                   : 75
PLUS                 : 66 86
PLUS_PLUS            : 36 59
PRINT                : 110
QUESTION             : 
RBRACES              : 31 32 102
RBRACKET             : 27 40
READ                 : 111
RETURN               : 97
RPAREN               : 26 28 29 38 39 47 49 103 104 105 106 107 110 111
SEMI                 : 6 96 97 106 106 107 108 109 110 111
SMALLER              : 68
SMALLER_EQUAL        : 69
STRING_CONST         : 95
TIMES                : 12 13 63 85
UCCCOMMENT           : 
UPPERSAND            : 84
VOID                 : 89
WHILE                : 105
error                : 

Nonterminals, with rules where they appear

argument_expression  : 39 42 111
assert_statement     : 117
assignment_expression : 30 41 42 43 44 51
assignment_operator  : 51
binary_expression    : 50 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76
block_item           : 100 101
block_item_list      : 101 102
cast_expression      : 49 61 62
compound_statement   : 114 122 123
constant             : 46
constant_expression  : 77
constant_expression_opt : 27
decl_body            : 6
declaration          : 4 7 8 98 107
declaration_list     : 8 9
declaration_list_opt : 122 123
declarator           : 16 17 22 26 122 123
direct_declarator    : 14 15 27 28 29
empty                : 10 21 78 81 121
expression           : 40 44 47 103 104 105 109 120
expression_opt       : 97 106 106 106 107 107 108 110
expression_statement : 112
function_definition  : 5
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 25 45 82 83
identifier_list      : 80 83
identifier_list_opt  : 28
init_declarator      : 18 19
init_declarator_list : 19 20
init_declarator_list_opt : 11
initializer          : 17 33 34
initializer_list     : 31 32 34
iteration_statement  : 115
jump_statement       : 116
parameter_declaration : 23 24
parameter_list       : 24 29
pointer              : 13 15
postfix_expression   : 36 37 38 39 40 58
primary_expression   : 35
print_statement      : 118
program              : 0
read_statement       : 119
selection_statement  : 113
statement            : 99 103 104 104 105 106 107
type_specifier       : 11 22 49 122
unary_expression     : 48 51 59 60
unary_operator       : 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (6) declaration -> . decl_body SEMI
    (122) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (123) function_definition -> . declarator declaration_list_opt compound_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (6) declaration -> . decl_body SEMI
    (122) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (123) function_definition -> . declarator declaration_list_opt compound_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    global_declaration             shift and go to state 19
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> declaration .

    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    LPAREN          reduce using rule 4 (global_declaration -> declaration .)
    TIMES           reduce using rule 4 (global_declaration -> declaration .)
    ID              reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 5 (global_declaration -> function_definition .)
    TIMES           reduce using rule 5 (global_declaration -> function_definition .)
    ID              reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 6

    (6) declaration -> decl_body . SEMI

    SEMI            shift and go to state 20


state 7

    (122) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (11) decl_body -> type_specifier . init_declarator_list_opt
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (20) init_declarator_list_opt -> . init_declarator_list
    (21) init_declarator_list_opt -> . empty
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (124) empty -> .
    (79) identifier -> . ID
    (16) init_declarator -> . declarator
    (17) init_declarator -> . declarator ASSIGN initializer

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    SEMI            reduce using rule 124 (empty -> .)
    ID              shift and go to state 18

    declarator                     shift and go to state 21
    init_declarator_list_opt       shift and go to state 22
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    init_declarator_list           shift and go to state 23
    empty                          shift and go to state 24
    identifier                     shift and go to state 15
    init_declarator                shift and go to state 25

state 8

    (123) function_definition -> declarator . declaration_list_opt compound_statement
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (124) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT

    LBRACES         reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 26
    declaration_list               shift and go to state 27
    empty                          shift and go to state 28
    declaration                    shift and go to state 29
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 30

state 9

    (89) type_specifier -> VOID .

    LPAREN          reduce using rule 89 (type_specifier -> VOID .)
    TIMES           reduce using rule 89 (type_specifier -> VOID .)
    ID              reduce using rule 89 (type_specifier -> VOID .)
    SEMI            reduce using rule 89 (type_specifier -> VOID .)
    RPAREN          reduce using rule 89 (type_specifier -> VOID .)


state 10

    (90) type_specifier -> CHAR .

    LPAREN          reduce using rule 90 (type_specifier -> CHAR .)
    TIMES           reduce using rule 90 (type_specifier -> CHAR .)
    ID              reduce using rule 90 (type_specifier -> CHAR .)
    SEMI            reduce using rule 90 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 90 (type_specifier -> CHAR .)


state 11

    (91) type_specifier -> INT .

    LPAREN          reduce using rule 91 (type_specifier -> INT .)
    TIMES           reduce using rule 91 (type_specifier -> INT .)
    ID              reduce using rule 91 (type_specifier -> INT .)
    SEMI            reduce using rule 91 (type_specifier -> INT .)
    RPAREN          reduce using rule 91 (type_specifier -> INT .)


state 12

    (92) type_specifier -> FLOAT .

    LPAREN          reduce using rule 92 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 92 (type_specifier -> FLOAT .)
    ID              reduce using rule 92 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 92 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 92 (type_specifier -> FLOAT .)


state 13

    (14) declarator -> direct_declarator .
    (27) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN

    VOID            reduce using rule 14 (declarator -> direct_declarator .)
    CHAR            reduce using rule 14 (declarator -> direct_declarator .)
    INT             reduce using rule 14 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 14 (declarator -> direct_declarator .)
    LBRACES         reduce using rule 14 (declarator -> direct_declarator .)
    ASSIGN          reduce using rule 14 (declarator -> direct_declarator .)
    COMMA           reduce using rule 14 (declarator -> direct_declarator .)
    SEMI            reduce using rule 14 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 14 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 14

    (15) declarator -> pointer . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (79) identifier -> . ID

    LPAREN          shift and go to state 16
    ID              shift and go to state 18

    direct_declarator              shift and go to state 33
    identifier                     shift and go to state 15

state 15

    (25) direct_declarator -> identifier .

    LBRACKET        reduce using rule 25 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 25 (direct_declarator -> identifier .)
    VOID            reduce using rule 25 (direct_declarator -> identifier .)
    CHAR            reduce using rule 25 (direct_declarator -> identifier .)
    INT             reduce using rule 25 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 25 (direct_declarator -> identifier .)
    LBRACES         reduce using rule 25 (direct_declarator -> identifier .)
    ASSIGN          reduce using rule 25 (direct_declarator -> identifier .)
    COMMA           reduce using rule 25 (direct_declarator -> identifier .)
    SEMI            reduce using rule 25 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 25 (direct_declarator -> identifier .)


state 16

    (26) direct_declarator -> LPAREN . declarator RPAREN
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 34
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 17

    (12) pointer -> TIMES .
    (13) pointer -> TIMES . pointer
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer

    LPAREN          reduce using rule 12 (pointer -> TIMES .)
    ID              reduce using rule 12 (pointer -> TIMES .)
    TIMES           shift and go to state 17

    pointer                        shift and go to state 35

state 18

    (79) identifier -> ID .

    LBRACKET        reduce using rule 79 (identifier -> ID .)
    LPAREN          reduce using rule 79 (identifier -> ID .)
    VOID            reduce using rule 79 (identifier -> ID .)
    CHAR            reduce using rule 79 (identifier -> ID .)
    INT             reduce using rule 79 (identifier -> ID .)
    FLOAT           reduce using rule 79 (identifier -> ID .)
    LBRACES         reduce using rule 79 (identifier -> ID .)
    ASSIGN          reduce using rule 79 (identifier -> ID .)
    COMMA           reduce using rule 79 (identifier -> ID .)
    SEMI            reduce using rule 79 (identifier -> ID .)
    RPAREN          reduce using rule 79 (identifier -> ID .)
    PLUS_PLUS       reduce using rule 79 (identifier -> ID .)
    MINUS_MINUS     reduce using rule 79 (identifier -> ID .)
    TIMES           reduce using rule 79 (identifier -> ID .)
    DIVIDE          reduce using rule 79 (identifier -> ID .)
    MOD             reduce using rule 79 (identifier -> ID .)
    PLUS            reduce using rule 79 (identifier -> ID .)
    MINUS           reduce using rule 79 (identifier -> ID .)
    SMALLER         reduce using rule 79 (identifier -> ID .)
    SMALLER_EQUAL   reduce using rule 79 (identifier -> ID .)
    BIGGER          reduce using rule 79 (identifier -> ID .)
    BIGGER_EQUAL    reduce using rule 79 (identifier -> ID .)
    EQUAL           reduce using rule 79 (identifier -> ID .)
    DIFFERENT       reduce using rule 79 (identifier -> ID .)
    AND             reduce using rule 79 (identifier -> ID .)
    OR              reduce using rule 79 (identifier -> ID .)
    RBRACKET        reduce using rule 79 (identifier -> ID .)
    ASSIGN_TIMES    reduce using rule 79 (identifier -> ID .)
    ASSIGN_DIVIDE   reduce using rule 79 (identifier -> ID .)
    ASSIGN_MOD      reduce using rule 79 (identifier -> ID .)
    ASSIGN_PLUS     reduce using rule 79 (identifier -> ID .)
    ASSIGN_MINUS    reduce using rule 79 (identifier -> ID .)
    RBRACES         reduce using rule 79 (identifier -> ID .)


state 19

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 20

    (6) declaration -> decl_body SEMI .

    VOID            reduce using rule 6 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 6 (declaration -> decl_body SEMI .)
    INT             reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 6 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 6 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 6 (declaration -> decl_body SEMI .)
    ID              reduce using rule 6 (declaration -> decl_body SEMI .)
    $end            reduce using rule 6 (declaration -> decl_body SEMI .)
    LBRACES         reduce using rule 6 (declaration -> decl_body SEMI .)
    RBRACES         reduce using rule 6 (declaration -> decl_body SEMI .)
    IF              reduce using rule 6 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 6 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 6 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 6 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 6 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 6 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 6 (declaration -> decl_body SEMI .)
    READ            reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUS_PLUS       reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUS_MINUS     reduce using rule 6 (declaration -> decl_body SEMI .)
    UPPERSAND       reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 6 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 6 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 6 (declaration -> decl_body SEMI .)
    STRING_CONST    reduce using rule 6 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 6 (declaration -> decl_body SEMI .)


state 21

    (122) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (16) init_declarator -> declarator .
    (17) init_declarator -> declarator . ASSIGN initializer
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (124) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT

    COMMA           reduce using rule 16 (init_declarator -> declarator .)
    SEMI            reduce using rule 16 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 37
    LBRACES         reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    type_specifier                 shift and go to state 30
    declaration_list_opt           shift and go to state 36
    declaration_list               shift and go to state 27
    empty                          shift and go to state 28
    declaration                    shift and go to state 29
    decl_body                      shift and go to state 6

state 22

    (11) decl_body -> type_specifier init_declarator_list_opt .

    SEMI            reduce using rule 11 (decl_body -> type_specifier init_declarator_list_opt .)


state 23

    (20) init_declarator_list_opt -> init_declarator_list .
    (19) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 20 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 38


state 24

    (21) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 21 (init_declarator_list_opt -> empty .)


state 25

    (18) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 18 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 18 (init_declarator_list -> init_declarator .)


state 26

    (123) function_definition -> declarator declaration_list_opt . compound_statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES

    LBRACES         shift and go to state 40

    compound_statement             shift and go to state 39

state 27

    (9) declaration_list_opt -> declaration_list .
    (8) declaration_list -> declaration_list . declaration
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT

    LBRACES         reduce using rule 9 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 41
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 30

state 28

    (10) declaration_list_opt -> empty .

    LBRACES         reduce using rule 10 (declaration_list_opt -> empty .)


state 29

    (7) declaration_list -> declaration .

    VOID            reduce using rule 7 (declaration_list -> declaration .)
    CHAR            reduce using rule 7 (declaration_list -> declaration .)
    INT             reduce using rule 7 (declaration_list -> declaration .)
    FLOAT           reduce using rule 7 (declaration_list -> declaration .)
    LBRACES         reduce using rule 7 (declaration_list -> declaration .)


state 30

    (11) decl_body -> type_specifier . init_declarator_list_opt
    (20) init_declarator_list_opt -> . init_declarator_list
    (21) init_declarator_list_opt -> . empty
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (124) empty -> .
    (16) init_declarator -> . declarator
    (17) init_declarator -> . declarator ASSIGN initializer
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    SEMI            reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator_list_opt       shift and go to state 22
    init_declarator_list           shift and go to state 23
    empty                          shift and go to state 24
    init_declarator                shift and go to state 25
    declarator                     shift and go to state 42
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 31

    (27) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (77) constant_expression_opt -> . constant_expression
    (78) constant_expression_opt -> . empty
    (76) constant_expression -> . binary_expression
    (124) empty -> .
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RBRACKET        reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    constant_expression_opt        shift and go to state 43
    constant_expression            shift and go to state 44
    empty                          shift and go to state 45
    binary_expression              shift and go to state 46
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 32

    (28) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (29) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (80) identifier_list_opt -> . identifier_list
    (81) identifier_list_opt -> . empty
    (23) parameter_list -> . parameter_declaration
    (24) parameter_list -> . parameter_list COMMA parameter_declaration
    (82) identifier_list -> . identifier
    (83) identifier_list -> . identifier_list COMMA identifier
    (124) empty -> .
    (22) parameter_declaration -> . type_specifier declarator
    (79) identifier -> . ID
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT

    RPAREN          reduce using rule 124 (empty -> .)
    ID              shift and go to state 18
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    identifier_list_opt            shift and go to state 65
    parameter_list                 shift and go to state 66
    identifier_list                shift and go to state 67
    empty                          shift and go to state 68
    parameter_declaration          shift and go to state 69
    identifier                     shift and go to state 70
    type_specifier                 shift and go to state 71

state 33

    (15) declarator -> pointer direct_declarator .
    (27) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN

    VOID            reduce using rule 15 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 15 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 15 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACES         reduce using rule 15 (declarator -> pointer direct_declarator .)
    ASSIGN          reduce using rule 15 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 15 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 34

    (26) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 72


state 35

    (13) pointer -> TIMES pointer .

    LPAREN          reduce using rule 13 (pointer -> TIMES pointer .)
    ID              reduce using rule 13 (pointer -> TIMES pointer .)


state 36

    (122) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES

    LBRACES         shift and go to state 40

    compound_statement             shift and go to state 73

state 37

    (17) init_declarator -> declarator ASSIGN . initializer
    (30) initializer -> . assignment_expression
    (31) initializer -> . LBRACES initializer_list RBRACES
    (32) initializer -> . LBRACES initializer_list COMMA RBRACES
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LBRACES         shift and go to state 76
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    initializer                    shift and go to state 74
    assignment_expression          shift and go to state 75
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 38

    (19) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (16) init_declarator -> . declarator
    (17) init_declarator -> . declarator ASSIGN initializer
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator                shift and go to state 79
    declarator                     shift and go to state 42
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 39

    (123) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 123 (function_definition -> declarator declaration_list_opt compound_statement .)


state 40

    (102) compound_statement -> LBRACES . block_item_list RBRACES
    (100) block_item_list -> . block_item
    (101) block_item_list -> . block_item_list block_item
    (98) block_item -> . declaration
    (99) block_item -> . statement
    (6) declaration -> . decl_body SEMI
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    block_item_list                shift and go to state 80
    block_item                     shift and go to state 81
    declaration                    shift and go to state 82
    statement                      shift and go to state 83
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    type_specifier                 shift and go to state 30
    expression_opt                 shift and go to state 92
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 41

    (8) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 8 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 8 (declaration_list -> declaration_list declaration .)
    LBRACES         reduce using rule 8 (declaration_list -> declaration_list declaration .)


state 42

    (16) init_declarator -> declarator .
    (17) init_declarator -> declarator . ASSIGN initializer

    COMMA           reduce using rule 16 (init_declarator -> declarator .)
    SEMI            reduce using rule 16 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 37


state 43

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 104


state 44

    (77) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 77 (constant_expression_opt -> constant_expression .)


state 45

    (78) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 78 (constant_expression_opt -> empty .)


state 46

    (76) constant_expression -> binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 76 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113
    EQUAL           shift and go to state 114
    DIFFERENT       shift and go to state 115
    AND             shift and go to state 116
    OR              shift and go to state 117


state 47

    (62) binary_expression -> cast_expression .

    TIMES           reduce using rule 62 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 62 (binary_expression -> cast_expression .)
    MOD             reduce using rule 62 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 62 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 62 (binary_expression -> cast_expression .)
    SMALLER         reduce using rule 62 (binary_expression -> cast_expression .)
    SMALLER_EQUAL   reduce using rule 62 (binary_expression -> cast_expression .)
    BIGGER          reduce using rule 62 (binary_expression -> cast_expression .)
    BIGGER_EQUAL    reduce using rule 62 (binary_expression -> cast_expression .)
    EQUAL           reduce using rule 62 (binary_expression -> cast_expression .)
    DIFFERENT       reduce using rule 62 (binary_expression -> cast_expression .)
    AND             reduce using rule 62 (binary_expression -> cast_expression .)
    OR              reduce using rule 62 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 62 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 62 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 62 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 62 (binary_expression -> cast_expression .)
    RBRACES         reduce using rule 62 (binary_expression -> cast_expression .)


state 48

    (85) unary_operator -> TIMES .

    LPAREN          reduce using rule 85 (unary_operator -> TIMES .)
    PLUS_PLUS       reduce using rule 85 (unary_operator -> TIMES .)
    MINUS_MINUS     reduce using rule 85 (unary_operator -> TIMES .)
    UPPERSAND       reduce using rule 85 (unary_operator -> TIMES .)
    TIMES           reduce using rule 85 (unary_operator -> TIMES .)
    PLUS            reduce using rule 85 (unary_operator -> TIMES .)
    MINUS           reduce using rule 85 (unary_operator -> TIMES .)
    NOT             reduce using rule 85 (unary_operator -> TIMES .)
    ID              reduce using rule 85 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 85 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 85 (unary_operator -> TIMES .)
    STRING_CONST    reduce using rule 85 (unary_operator -> TIMES .)


state 49

    (86) unary_operator -> PLUS .

    LPAREN          reduce using rule 86 (unary_operator -> PLUS .)
    PLUS_PLUS       reduce using rule 86 (unary_operator -> PLUS .)
    MINUS_MINUS     reduce using rule 86 (unary_operator -> PLUS .)
    UPPERSAND       reduce using rule 86 (unary_operator -> PLUS .)
    TIMES           reduce using rule 86 (unary_operator -> PLUS .)
    PLUS            reduce using rule 86 (unary_operator -> PLUS .)
    MINUS           reduce using rule 86 (unary_operator -> PLUS .)
    NOT             reduce using rule 86 (unary_operator -> PLUS .)
    ID              reduce using rule 86 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 86 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 86 (unary_operator -> PLUS .)
    STRING_CONST    reduce using rule 86 (unary_operator -> PLUS .)


state 50

    (87) unary_operator -> MINUS .

    LPAREN          reduce using rule 87 (unary_operator -> MINUS .)
    PLUS_PLUS       reduce using rule 87 (unary_operator -> MINUS .)
    MINUS_MINUS     reduce using rule 87 (unary_operator -> MINUS .)
    UPPERSAND       reduce using rule 87 (unary_operator -> MINUS .)
    TIMES           reduce using rule 87 (unary_operator -> MINUS .)
    PLUS            reduce using rule 87 (unary_operator -> MINUS .)
    MINUS           reduce using rule 87 (unary_operator -> MINUS .)
    NOT             reduce using rule 87 (unary_operator -> MINUS .)
    ID              reduce using rule 87 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 87 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 87 (unary_operator -> MINUS .)
    STRING_CONST    reduce using rule 87 (unary_operator -> MINUS .)


state 51

    (48) cast_expression -> unary_expression .

    TIMES           reduce using rule 48 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 48 (cast_expression -> unary_expression .)
    MOD             reduce using rule 48 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 48 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 48 (cast_expression -> unary_expression .)
    SMALLER         reduce using rule 48 (cast_expression -> unary_expression .)
    SMALLER_EQUAL   reduce using rule 48 (cast_expression -> unary_expression .)
    BIGGER          reduce using rule 48 (cast_expression -> unary_expression .)
    BIGGER_EQUAL    reduce using rule 48 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 48 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 48 (cast_expression -> unary_expression .)
    AND             reduce using rule 48 (cast_expression -> unary_expression .)
    OR              reduce using rule 48 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN_TIMES    reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN_MOD      reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN_PLUS     reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN_MINUS    reduce using rule 48 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 48 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 48 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 48 (cast_expression -> unary_expression .)
    RBRACES         reduce using rule 48 (cast_expression -> unary_expression .)


state 52

    (49) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (47) primary_expression -> LPAREN . expression RPAREN
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    type_specifier                 shift and go to state 118
    cast_expression                shift and go to state 47
    expression                     shift and go to state 119
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 53

    (58) unary_expression -> postfix_expression .
    (36) postfix_expression -> postfix_expression . PLUS_PLUS
    (37) postfix_expression -> postfix_expression . MINUS_MINUS
    (38) postfix_expression -> postfix_expression . LPAREN RPAREN
    (39) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (40) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET

    TIMES           reduce using rule 58 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 58 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 58 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 58 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 58 (unary_expression -> postfix_expression .)
    SMALLER         reduce using rule 58 (unary_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 58 (unary_expression -> postfix_expression .)
    BIGGER          reduce using rule 58 (unary_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 58 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 58 (unary_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 58 (unary_expression -> postfix_expression .)
    AND             reduce using rule 58 (unary_expression -> postfix_expression .)
    OR              reduce using rule 58 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 58 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 58 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 58 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 58 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 58 (unary_expression -> postfix_expression .)
    RBRACES         reduce using rule 58 (unary_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 120
    MINUS_MINUS     shift and go to state 121
    LPAREN          shift and go to state 122
    LBRACKET        shift and go to state 123


state 54

    (59) unary_expression -> PLUS_PLUS . unary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    LPAREN          shift and go to state 125
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    unary_expression               shift and go to state 124
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 55

    (60) unary_expression -> MINUS_MINUS . unary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    LPAREN          shift and go to state 125
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 56

    (61) unary_expression -> unary_operator . cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    unary_operator                 shift and go to state 56
    cast_expression                shift and go to state 127
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 57

    (35) postfix_expression -> primary_expression .

    PLUS_PLUS       reduce using rule 35 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 35 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 35 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 35 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 35 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 35 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 35 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 35 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 35 (postfix_expression -> primary_expression .)
    SMALLER         reduce using rule 35 (postfix_expression -> primary_expression .)
    SMALLER_EQUAL   reduce using rule 35 (postfix_expression -> primary_expression .)
    BIGGER          reduce using rule 35 (postfix_expression -> primary_expression .)
    BIGGER_EQUAL    reduce using rule 35 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 35 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 35 (postfix_expression -> primary_expression .)
    AND             reduce using rule 35 (postfix_expression -> primary_expression .)
    OR              reduce using rule 35 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN_TIMES    reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN_DIVIDE   reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN_MOD      reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN_PLUS     reduce using rule 35 (postfix_expression -> primary_expression .)
    ASSIGN_MINUS    reduce using rule 35 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 35 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 35 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 35 (postfix_expression -> primary_expression .)
    RBRACES         reduce using rule 35 (postfix_expression -> primary_expression .)


state 58

    (84) unary_operator -> UPPERSAND .

    LPAREN          reduce using rule 84 (unary_operator -> UPPERSAND .)
    PLUS_PLUS       reduce using rule 84 (unary_operator -> UPPERSAND .)
    MINUS_MINUS     reduce using rule 84 (unary_operator -> UPPERSAND .)
    UPPERSAND       reduce using rule 84 (unary_operator -> UPPERSAND .)
    TIMES           reduce using rule 84 (unary_operator -> UPPERSAND .)
    PLUS            reduce using rule 84 (unary_operator -> UPPERSAND .)
    MINUS           reduce using rule 84 (unary_operator -> UPPERSAND .)
    NOT             reduce using rule 84 (unary_operator -> UPPERSAND .)
    ID              reduce using rule 84 (unary_operator -> UPPERSAND .)
    INT_CONST       reduce using rule 84 (unary_operator -> UPPERSAND .)
    FLOAT_CONST     reduce using rule 84 (unary_operator -> UPPERSAND .)
    STRING_CONST    reduce using rule 84 (unary_operator -> UPPERSAND .)


state 59

    (88) unary_operator -> NOT .

    LPAREN          reduce using rule 88 (unary_operator -> NOT .)
    PLUS_PLUS       reduce using rule 88 (unary_operator -> NOT .)
    MINUS_MINUS     reduce using rule 88 (unary_operator -> NOT .)
    UPPERSAND       reduce using rule 88 (unary_operator -> NOT .)
    TIMES           reduce using rule 88 (unary_operator -> NOT .)
    PLUS            reduce using rule 88 (unary_operator -> NOT .)
    MINUS           reduce using rule 88 (unary_operator -> NOT .)
    NOT             reduce using rule 88 (unary_operator -> NOT .)
    ID              reduce using rule 88 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 88 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 88 (unary_operator -> NOT .)
    STRING_CONST    reduce using rule 88 (unary_operator -> NOT .)


state 60

    (45) primary_expression -> identifier .

    PLUS_PLUS       reduce using rule 45 (primary_expression -> identifier .)
    MINUS_MINUS     reduce using rule 45 (primary_expression -> identifier .)
    LPAREN          reduce using rule 45 (primary_expression -> identifier .)
    LBRACKET        reduce using rule 45 (primary_expression -> identifier .)
    TIMES           reduce using rule 45 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 45 (primary_expression -> identifier .)
    MOD             reduce using rule 45 (primary_expression -> identifier .)
    PLUS            reduce using rule 45 (primary_expression -> identifier .)
    MINUS           reduce using rule 45 (primary_expression -> identifier .)
    SMALLER         reduce using rule 45 (primary_expression -> identifier .)
    SMALLER_EQUAL   reduce using rule 45 (primary_expression -> identifier .)
    BIGGER          reduce using rule 45 (primary_expression -> identifier .)
    BIGGER_EQUAL    reduce using rule 45 (primary_expression -> identifier .)
    EQUAL           reduce using rule 45 (primary_expression -> identifier .)
    DIFFERENT       reduce using rule 45 (primary_expression -> identifier .)
    AND             reduce using rule 45 (primary_expression -> identifier .)
    OR              reduce using rule 45 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN          reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN_TIMES    reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN_DIVIDE   reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN_MOD      reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN_PLUS     reduce using rule 45 (primary_expression -> identifier .)
    ASSIGN_MINUS    reduce using rule 45 (primary_expression -> identifier .)
    COMMA           reduce using rule 45 (primary_expression -> identifier .)
    SEMI            reduce using rule 45 (primary_expression -> identifier .)
    RPAREN          reduce using rule 45 (primary_expression -> identifier .)
    RBRACES         reduce using rule 45 (primary_expression -> identifier .)


state 61

    (46) primary_expression -> constant .

    PLUS_PLUS       reduce using rule 46 (primary_expression -> constant .)
    MINUS_MINUS     reduce using rule 46 (primary_expression -> constant .)
    LPAREN          reduce using rule 46 (primary_expression -> constant .)
    LBRACKET        reduce using rule 46 (primary_expression -> constant .)
    TIMES           reduce using rule 46 (primary_expression -> constant .)
    DIVIDE          reduce using rule 46 (primary_expression -> constant .)
    MOD             reduce using rule 46 (primary_expression -> constant .)
    PLUS            reduce using rule 46 (primary_expression -> constant .)
    MINUS           reduce using rule 46 (primary_expression -> constant .)
    SMALLER         reduce using rule 46 (primary_expression -> constant .)
    SMALLER_EQUAL   reduce using rule 46 (primary_expression -> constant .)
    BIGGER          reduce using rule 46 (primary_expression -> constant .)
    BIGGER_EQUAL    reduce using rule 46 (primary_expression -> constant .)
    EQUAL           reduce using rule 46 (primary_expression -> constant .)
    DIFFERENT       reduce using rule 46 (primary_expression -> constant .)
    AND             reduce using rule 46 (primary_expression -> constant .)
    OR              reduce using rule 46 (primary_expression -> constant .)
    RBRACKET        reduce using rule 46 (primary_expression -> constant .)
    ASSIGN          reduce using rule 46 (primary_expression -> constant .)
    ASSIGN_TIMES    reduce using rule 46 (primary_expression -> constant .)
    ASSIGN_DIVIDE   reduce using rule 46 (primary_expression -> constant .)
    ASSIGN_MOD      reduce using rule 46 (primary_expression -> constant .)
    ASSIGN_PLUS     reduce using rule 46 (primary_expression -> constant .)
    ASSIGN_MINUS    reduce using rule 46 (primary_expression -> constant .)
    COMMA           reduce using rule 46 (primary_expression -> constant .)
    SEMI            reduce using rule 46 (primary_expression -> constant .)
    RPAREN          reduce using rule 46 (primary_expression -> constant .)
    RBRACES         reduce using rule 46 (primary_expression -> constant .)


state 62

    (93) constant -> INT_CONST .

    PLUS_PLUS       reduce using rule 93 (constant -> INT_CONST .)
    MINUS_MINUS     reduce using rule 93 (constant -> INT_CONST .)
    LPAREN          reduce using rule 93 (constant -> INT_CONST .)
    LBRACKET        reduce using rule 93 (constant -> INT_CONST .)
    TIMES           reduce using rule 93 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 93 (constant -> INT_CONST .)
    MOD             reduce using rule 93 (constant -> INT_CONST .)
    PLUS            reduce using rule 93 (constant -> INT_CONST .)
    MINUS           reduce using rule 93 (constant -> INT_CONST .)
    SMALLER         reduce using rule 93 (constant -> INT_CONST .)
    SMALLER_EQUAL   reduce using rule 93 (constant -> INT_CONST .)
    BIGGER          reduce using rule 93 (constant -> INT_CONST .)
    BIGGER_EQUAL    reduce using rule 93 (constant -> INT_CONST .)
    EQUAL           reduce using rule 93 (constant -> INT_CONST .)
    DIFFERENT       reduce using rule 93 (constant -> INT_CONST .)
    AND             reduce using rule 93 (constant -> INT_CONST .)
    OR              reduce using rule 93 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN          reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN_TIMES    reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN_MOD      reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN_PLUS     reduce using rule 93 (constant -> INT_CONST .)
    ASSIGN_MINUS    reduce using rule 93 (constant -> INT_CONST .)
    COMMA           reduce using rule 93 (constant -> INT_CONST .)
    SEMI            reduce using rule 93 (constant -> INT_CONST .)
    RPAREN          reduce using rule 93 (constant -> INT_CONST .)
    RBRACES         reduce using rule 93 (constant -> INT_CONST .)


state 63

    (94) constant -> FLOAT_CONST .

    PLUS_PLUS       reduce using rule 94 (constant -> FLOAT_CONST .)
    MINUS_MINUS     reduce using rule 94 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 94 (constant -> FLOAT_CONST .)
    LBRACKET        reduce using rule 94 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 94 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 94 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 94 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 94 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 94 (constant -> FLOAT_CONST .)
    SMALLER         reduce using rule 94 (constant -> FLOAT_CONST .)
    SMALLER_EQUAL   reduce using rule 94 (constant -> FLOAT_CONST .)
    BIGGER          reduce using rule 94 (constant -> FLOAT_CONST .)
    BIGGER_EQUAL    reduce using rule 94 (constant -> FLOAT_CONST .)
    EQUAL           reduce using rule 94 (constant -> FLOAT_CONST .)
    DIFFERENT       reduce using rule 94 (constant -> FLOAT_CONST .)
    AND             reduce using rule 94 (constant -> FLOAT_CONST .)
    OR              reduce using rule 94 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN          reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN_TIMES    reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN_MOD      reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN_PLUS     reduce using rule 94 (constant -> FLOAT_CONST .)
    ASSIGN_MINUS    reduce using rule 94 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 94 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 94 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 94 (constant -> FLOAT_CONST .)
    RBRACES         reduce using rule 94 (constant -> FLOAT_CONST .)


state 64

    (95) constant -> STRING_CONST .

    PLUS_PLUS       reduce using rule 95 (constant -> STRING_CONST .)
    MINUS_MINUS     reduce using rule 95 (constant -> STRING_CONST .)
    LPAREN          reduce using rule 95 (constant -> STRING_CONST .)
    LBRACKET        reduce using rule 95 (constant -> STRING_CONST .)
    TIMES           reduce using rule 95 (constant -> STRING_CONST .)
    DIVIDE          reduce using rule 95 (constant -> STRING_CONST .)
    MOD             reduce using rule 95 (constant -> STRING_CONST .)
    PLUS            reduce using rule 95 (constant -> STRING_CONST .)
    MINUS           reduce using rule 95 (constant -> STRING_CONST .)
    SMALLER         reduce using rule 95 (constant -> STRING_CONST .)
    SMALLER_EQUAL   reduce using rule 95 (constant -> STRING_CONST .)
    BIGGER          reduce using rule 95 (constant -> STRING_CONST .)
    BIGGER_EQUAL    reduce using rule 95 (constant -> STRING_CONST .)
    EQUAL           reduce using rule 95 (constant -> STRING_CONST .)
    DIFFERENT       reduce using rule 95 (constant -> STRING_CONST .)
    AND             reduce using rule 95 (constant -> STRING_CONST .)
    OR              reduce using rule 95 (constant -> STRING_CONST .)
    RBRACKET        reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN          reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN_TIMES    reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN_DIVIDE   reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN_MOD      reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN_PLUS     reduce using rule 95 (constant -> STRING_CONST .)
    ASSIGN_MINUS    reduce using rule 95 (constant -> STRING_CONST .)
    COMMA           reduce using rule 95 (constant -> STRING_CONST .)
    SEMI            reduce using rule 95 (constant -> STRING_CONST .)
    RPAREN          reduce using rule 95 (constant -> STRING_CONST .)
    RBRACES         reduce using rule 95 (constant -> STRING_CONST .)


state 65

    (28) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 128


state 66

    (29) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (24) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 129
    COMMA           shift and go to state 130


state 67

    (80) identifier_list_opt -> identifier_list .
    (83) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 80 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 131


state 68

    (81) identifier_list_opt -> empty .

    RPAREN          reduce using rule 81 (identifier_list_opt -> empty .)


state 69

    (23) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 23 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 23 (parameter_list -> parameter_declaration .)


state 70

    (82) identifier_list -> identifier .

    COMMA           reduce using rule 82 (identifier_list -> identifier .)
    RPAREN          reduce using rule 82 (identifier_list -> identifier .)


state 71

    (22) parameter_declaration -> type_specifier . declarator
    (14) declarator -> . direct_declarator
    (15) declarator -> . pointer direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (28) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (12) pointer -> . TIMES
    (13) pointer -> . TIMES pointer
    (79) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 132
    direct_declarator              shift and go to state 13
    pointer                        shift and go to state 14
    identifier                     shift and go to state 15

state 72

    (26) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACES         reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)


state 73

    (122) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 122 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 74

    (17) init_declarator -> declarator ASSIGN initializer .

    COMMA           reduce using rule 17 (init_declarator -> declarator ASSIGN initializer .)
    SEMI            reduce using rule 17 (init_declarator -> declarator ASSIGN initializer .)


state 75

    (30) initializer -> assignment_expression .

    COMMA           reduce using rule 30 (initializer -> assignment_expression .)
    SEMI            reduce using rule 30 (initializer -> assignment_expression .)
    RBRACES         reduce using rule 30 (initializer -> assignment_expression .)


state 76

    (31) initializer -> LBRACES . initializer_list RBRACES
    (32) initializer -> LBRACES . initializer_list COMMA RBRACES
    (33) initializer_list -> . initializer
    (34) initializer_list -> . initializer_list COMMA initializer
    (30) initializer -> . assignment_expression
    (31) initializer -> . LBRACES initializer_list RBRACES
    (32) initializer -> . LBRACES initializer_list COMMA RBRACES
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LBRACES         shift and go to state 76
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    initializer_list               shift and go to state 133
    initializer                    shift and go to state 134
    assignment_expression          shift and go to state 75
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 77

    (50) assignment_expression -> binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 50 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 50 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 50 (assignment_expression -> binary_expression .)
    RBRACES         reduce using rule 50 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 50 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113
    EQUAL           shift and go to state 114
    DIFFERENT       shift and go to state 115
    AND             shift and go to state 116
    OR              shift and go to state 117


state 78

    (51) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (48) cast_expression -> unary_expression .
    (52) assignment_operator -> . ASSIGN
    (53) assignment_operator -> . ASSIGN_TIMES
    (54) assignment_operator -> . ASSIGN_DIVIDE
    (55) assignment_operator -> . ASSIGN_MOD
    (56) assignment_operator -> . ASSIGN_PLUS
    (57) assignment_operator -> . ASSIGN_MINUS

    TIMES           reduce using rule 48 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 48 (cast_expression -> unary_expression .)
    MOD             reduce using rule 48 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 48 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 48 (cast_expression -> unary_expression .)
    SMALLER         reduce using rule 48 (cast_expression -> unary_expression .)
    SMALLER_EQUAL   reduce using rule 48 (cast_expression -> unary_expression .)
    BIGGER          reduce using rule 48 (cast_expression -> unary_expression .)
    BIGGER_EQUAL    reduce using rule 48 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 48 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 48 (cast_expression -> unary_expression .)
    AND             reduce using rule 48 (cast_expression -> unary_expression .)
    OR              reduce using rule 48 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 48 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 48 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 48 (cast_expression -> unary_expression .)
    RBRACES         reduce using rule 48 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 48 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 136
    ASSIGN_TIMES    shift and go to state 137
    ASSIGN_DIVIDE   shift and go to state 138
    ASSIGN_MOD      shift and go to state 139
    ASSIGN_PLUS     shift and go to state 140
    ASSIGN_MINUS    shift and go to state 141

    assignment_operator            shift and go to state 135

state 79

    (19) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 80

    (102) compound_statement -> LBRACES block_item_list . RBRACES
    (101) block_item_list -> block_item_list . block_item
    (98) block_item -> . declaration
    (99) block_item -> . statement
    (6) declaration -> . decl_body SEMI
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RBRACES         shift and go to state 142
    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    block_item                     shift and go to state 143
    declaration                    shift and go to state 82
    statement                      shift and go to state 83
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    type_specifier                 shift and go to state 30
    expression_opt                 shift and go to state 92
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 81

    (100) block_item_list -> block_item .

    RBRACES         reduce using rule 100 (block_item_list -> block_item .)
    IF              reduce using rule 100 (block_item_list -> block_item .)
    LBRACES         reduce using rule 100 (block_item_list -> block_item .)
    WHILE           reduce using rule 100 (block_item_list -> block_item .)
    FOR             reduce using rule 100 (block_item_list -> block_item .)
    BREAK           reduce using rule 100 (block_item_list -> block_item .)
    RETURN          reduce using rule 100 (block_item_list -> block_item .)
    ASSERT          reduce using rule 100 (block_item_list -> block_item .)
    PRINT           reduce using rule 100 (block_item_list -> block_item .)
    READ            reduce using rule 100 (block_item_list -> block_item .)
    VOID            reduce using rule 100 (block_item_list -> block_item .)
    CHAR            reduce using rule 100 (block_item_list -> block_item .)
    INT             reduce using rule 100 (block_item_list -> block_item .)
    FLOAT           reduce using rule 100 (block_item_list -> block_item .)
    PLUS_PLUS       reduce using rule 100 (block_item_list -> block_item .)
    MINUS_MINUS     reduce using rule 100 (block_item_list -> block_item .)
    LPAREN          reduce using rule 100 (block_item_list -> block_item .)
    UPPERSAND       reduce using rule 100 (block_item_list -> block_item .)
    TIMES           reduce using rule 100 (block_item_list -> block_item .)
    PLUS            reduce using rule 100 (block_item_list -> block_item .)
    MINUS           reduce using rule 100 (block_item_list -> block_item .)
    NOT             reduce using rule 100 (block_item_list -> block_item .)
    ID              reduce using rule 100 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 100 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 100 (block_item_list -> block_item .)
    STRING_CONST    reduce using rule 100 (block_item_list -> block_item .)
    SEMI            reduce using rule 100 (block_item_list -> block_item .)


state 82

    (98) block_item -> declaration .

    RBRACES         reduce using rule 98 (block_item -> declaration .)
    IF              reduce using rule 98 (block_item -> declaration .)
    LBRACES         reduce using rule 98 (block_item -> declaration .)
    WHILE           reduce using rule 98 (block_item -> declaration .)
    FOR             reduce using rule 98 (block_item -> declaration .)
    BREAK           reduce using rule 98 (block_item -> declaration .)
    RETURN          reduce using rule 98 (block_item -> declaration .)
    ASSERT          reduce using rule 98 (block_item -> declaration .)
    PRINT           reduce using rule 98 (block_item -> declaration .)
    READ            reduce using rule 98 (block_item -> declaration .)
    VOID            reduce using rule 98 (block_item -> declaration .)
    CHAR            reduce using rule 98 (block_item -> declaration .)
    INT             reduce using rule 98 (block_item -> declaration .)
    FLOAT           reduce using rule 98 (block_item -> declaration .)
    PLUS_PLUS       reduce using rule 98 (block_item -> declaration .)
    MINUS_MINUS     reduce using rule 98 (block_item -> declaration .)
    LPAREN          reduce using rule 98 (block_item -> declaration .)
    UPPERSAND       reduce using rule 98 (block_item -> declaration .)
    TIMES           reduce using rule 98 (block_item -> declaration .)
    PLUS            reduce using rule 98 (block_item -> declaration .)
    MINUS           reduce using rule 98 (block_item -> declaration .)
    NOT             reduce using rule 98 (block_item -> declaration .)
    ID              reduce using rule 98 (block_item -> declaration .)
    INT_CONST       reduce using rule 98 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 98 (block_item -> declaration .)
    STRING_CONST    reduce using rule 98 (block_item -> declaration .)
    SEMI            reduce using rule 98 (block_item -> declaration .)


state 83

    (99) block_item -> statement .

    RBRACES         reduce using rule 99 (block_item -> statement .)
    IF              reduce using rule 99 (block_item -> statement .)
    LBRACES         reduce using rule 99 (block_item -> statement .)
    WHILE           reduce using rule 99 (block_item -> statement .)
    FOR             reduce using rule 99 (block_item -> statement .)
    BREAK           reduce using rule 99 (block_item -> statement .)
    RETURN          reduce using rule 99 (block_item -> statement .)
    ASSERT          reduce using rule 99 (block_item -> statement .)
    PRINT           reduce using rule 99 (block_item -> statement .)
    READ            reduce using rule 99 (block_item -> statement .)
    VOID            reduce using rule 99 (block_item -> statement .)
    CHAR            reduce using rule 99 (block_item -> statement .)
    INT             reduce using rule 99 (block_item -> statement .)
    FLOAT           reduce using rule 99 (block_item -> statement .)
    PLUS_PLUS       reduce using rule 99 (block_item -> statement .)
    MINUS_MINUS     reduce using rule 99 (block_item -> statement .)
    LPAREN          reduce using rule 99 (block_item -> statement .)
    UPPERSAND       reduce using rule 99 (block_item -> statement .)
    TIMES           reduce using rule 99 (block_item -> statement .)
    PLUS            reduce using rule 99 (block_item -> statement .)
    MINUS           reduce using rule 99 (block_item -> statement .)
    NOT             reduce using rule 99 (block_item -> statement .)
    ID              reduce using rule 99 (block_item -> statement .)
    INT_CONST       reduce using rule 99 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 99 (block_item -> statement .)
    STRING_CONST    reduce using rule 99 (block_item -> statement .)
    SEMI            reduce using rule 99 (block_item -> statement .)


state 84

    (112) statement -> expression_statement .

    RBRACES         reduce using rule 112 (statement -> expression_statement .)
    IF              reduce using rule 112 (statement -> expression_statement .)
    LBRACES         reduce using rule 112 (statement -> expression_statement .)
    WHILE           reduce using rule 112 (statement -> expression_statement .)
    FOR             reduce using rule 112 (statement -> expression_statement .)
    BREAK           reduce using rule 112 (statement -> expression_statement .)
    RETURN          reduce using rule 112 (statement -> expression_statement .)
    ASSERT          reduce using rule 112 (statement -> expression_statement .)
    PRINT           reduce using rule 112 (statement -> expression_statement .)
    READ            reduce using rule 112 (statement -> expression_statement .)
    VOID            reduce using rule 112 (statement -> expression_statement .)
    CHAR            reduce using rule 112 (statement -> expression_statement .)
    INT             reduce using rule 112 (statement -> expression_statement .)
    FLOAT           reduce using rule 112 (statement -> expression_statement .)
    PLUS_PLUS       reduce using rule 112 (statement -> expression_statement .)
    MINUS_MINUS     reduce using rule 112 (statement -> expression_statement .)
    LPAREN          reduce using rule 112 (statement -> expression_statement .)
    UPPERSAND       reduce using rule 112 (statement -> expression_statement .)
    TIMES           reduce using rule 112 (statement -> expression_statement .)
    PLUS            reduce using rule 112 (statement -> expression_statement .)
    MINUS           reduce using rule 112 (statement -> expression_statement .)
    NOT             reduce using rule 112 (statement -> expression_statement .)
    ID              reduce using rule 112 (statement -> expression_statement .)
    INT_CONST       reduce using rule 112 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> expression_statement .)
    STRING_CONST    reduce using rule 112 (statement -> expression_statement .)
    SEMI            reduce using rule 112 (statement -> expression_statement .)
    ELSE            reduce using rule 112 (statement -> expression_statement .)


state 85

    (113) statement -> selection_statement .

    RBRACES         reduce using rule 113 (statement -> selection_statement .)
    IF              reduce using rule 113 (statement -> selection_statement .)
    LBRACES         reduce using rule 113 (statement -> selection_statement .)
    WHILE           reduce using rule 113 (statement -> selection_statement .)
    FOR             reduce using rule 113 (statement -> selection_statement .)
    BREAK           reduce using rule 113 (statement -> selection_statement .)
    RETURN          reduce using rule 113 (statement -> selection_statement .)
    ASSERT          reduce using rule 113 (statement -> selection_statement .)
    PRINT           reduce using rule 113 (statement -> selection_statement .)
    READ            reduce using rule 113 (statement -> selection_statement .)
    VOID            reduce using rule 113 (statement -> selection_statement .)
    CHAR            reduce using rule 113 (statement -> selection_statement .)
    INT             reduce using rule 113 (statement -> selection_statement .)
    FLOAT           reduce using rule 113 (statement -> selection_statement .)
    PLUS_PLUS       reduce using rule 113 (statement -> selection_statement .)
    MINUS_MINUS     reduce using rule 113 (statement -> selection_statement .)
    LPAREN          reduce using rule 113 (statement -> selection_statement .)
    UPPERSAND       reduce using rule 113 (statement -> selection_statement .)
    TIMES           reduce using rule 113 (statement -> selection_statement .)
    PLUS            reduce using rule 113 (statement -> selection_statement .)
    MINUS           reduce using rule 113 (statement -> selection_statement .)
    NOT             reduce using rule 113 (statement -> selection_statement .)
    ID              reduce using rule 113 (statement -> selection_statement .)
    INT_CONST       reduce using rule 113 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 113 (statement -> selection_statement .)
    STRING_CONST    reduce using rule 113 (statement -> selection_statement .)
    SEMI            reduce using rule 113 (statement -> selection_statement .)
    ELSE            reduce using rule 113 (statement -> selection_statement .)


state 86

    (114) statement -> compound_statement .

    RBRACES         reduce using rule 114 (statement -> compound_statement .)
    IF              reduce using rule 114 (statement -> compound_statement .)
    LBRACES         reduce using rule 114 (statement -> compound_statement .)
    WHILE           reduce using rule 114 (statement -> compound_statement .)
    FOR             reduce using rule 114 (statement -> compound_statement .)
    BREAK           reduce using rule 114 (statement -> compound_statement .)
    RETURN          reduce using rule 114 (statement -> compound_statement .)
    ASSERT          reduce using rule 114 (statement -> compound_statement .)
    PRINT           reduce using rule 114 (statement -> compound_statement .)
    READ            reduce using rule 114 (statement -> compound_statement .)
    VOID            reduce using rule 114 (statement -> compound_statement .)
    CHAR            reduce using rule 114 (statement -> compound_statement .)
    INT             reduce using rule 114 (statement -> compound_statement .)
    FLOAT           reduce using rule 114 (statement -> compound_statement .)
    PLUS_PLUS       reduce using rule 114 (statement -> compound_statement .)
    MINUS_MINUS     reduce using rule 114 (statement -> compound_statement .)
    LPAREN          reduce using rule 114 (statement -> compound_statement .)
    UPPERSAND       reduce using rule 114 (statement -> compound_statement .)
    TIMES           reduce using rule 114 (statement -> compound_statement .)
    PLUS            reduce using rule 114 (statement -> compound_statement .)
    MINUS           reduce using rule 114 (statement -> compound_statement .)
    NOT             reduce using rule 114 (statement -> compound_statement .)
    ID              reduce using rule 114 (statement -> compound_statement .)
    INT_CONST       reduce using rule 114 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> compound_statement .)
    STRING_CONST    reduce using rule 114 (statement -> compound_statement .)
    SEMI            reduce using rule 114 (statement -> compound_statement .)
    ELSE            reduce using rule 114 (statement -> compound_statement .)


state 87

    (115) statement -> iteration_statement .

    RBRACES         reduce using rule 115 (statement -> iteration_statement .)
    IF              reduce using rule 115 (statement -> iteration_statement .)
    LBRACES         reduce using rule 115 (statement -> iteration_statement .)
    WHILE           reduce using rule 115 (statement -> iteration_statement .)
    FOR             reduce using rule 115 (statement -> iteration_statement .)
    BREAK           reduce using rule 115 (statement -> iteration_statement .)
    RETURN          reduce using rule 115 (statement -> iteration_statement .)
    ASSERT          reduce using rule 115 (statement -> iteration_statement .)
    PRINT           reduce using rule 115 (statement -> iteration_statement .)
    READ            reduce using rule 115 (statement -> iteration_statement .)
    VOID            reduce using rule 115 (statement -> iteration_statement .)
    CHAR            reduce using rule 115 (statement -> iteration_statement .)
    INT             reduce using rule 115 (statement -> iteration_statement .)
    FLOAT           reduce using rule 115 (statement -> iteration_statement .)
    PLUS_PLUS       reduce using rule 115 (statement -> iteration_statement .)
    MINUS_MINUS     reduce using rule 115 (statement -> iteration_statement .)
    LPAREN          reduce using rule 115 (statement -> iteration_statement .)
    UPPERSAND       reduce using rule 115 (statement -> iteration_statement .)
    TIMES           reduce using rule 115 (statement -> iteration_statement .)
    PLUS            reduce using rule 115 (statement -> iteration_statement .)
    MINUS           reduce using rule 115 (statement -> iteration_statement .)
    NOT             reduce using rule 115 (statement -> iteration_statement .)
    ID              reduce using rule 115 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 115 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 115 (statement -> iteration_statement .)
    STRING_CONST    reduce using rule 115 (statement -> iteration_statement .)
    SEMI            reduce using rule 115 (statement -> iteration_statement .)
    ELSE            reduce using rule 115 (statement -> iteration_statement .)


state 88

    (116) statement -> jump_statement .

    RBRACES         reduce using rule 116 (statement -> jump_statement .)
    IF              reduce using rule 116 (statement -> jump_statement .)
    LBRACES         reduce using rule 116 (statement -> jump_statement .)
    WHILE           reduce using rule 116 (statement -> jump_statement .)
    FOR             reduce using rule 116 (statement -> jump_statement .)
    BREAK           reduce using rule 116 (statement -> jump_statement .)
    RETURN          reduce using rule 116 (statement -> jump_statement .)
    ASSERT          reduce using rule 116 (statement -> jump_statement .)
    PRINT           reduce using rule 116 (statement -> jump_statement .)
    READ            reduce using rule 116 (statement -> jump_statement .)
    VOID            reduce using rule 116 (statement -> jump_statement .)
    CHAR            reduce using rule 116 (statement -> jump_statement .)
    INT             reduce using rule 116 (statement -> jump_statement .)
    FLOAT           reduce using rule 116 (statement -> jump_statement .)
    PLUS_PLUS       reduce using rule 116 (statement -> jump_statement .)
    MINUS_MINUS     reduce using rule 116 (statement -> jump_statement .)
    LPAREN          reduce using rule 116 (statement -> jump_statement .)
    UPPERSAND       reduce using rule 116 (statement -> jump_statement .)
    TIMES           reduce using rule 116 (statement -> jump_statement .)
    PLUS            reduce using rule 116 (statement -> jump_statement .)
    MINUS           reduce using rule 116 (statement -> jump_statement .)
    NOT             reduce using rule 116 (statement -> jump_statement .)
    ID              reduce using rule 116 (statement -> jump_statement .)
    INT_CONST       reduce using rule 116 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 116 (statement -> jump_statement .)
    STRING_CONST    reduce using rule 116 (statement -> jump_statement .)
    SEMI            reduce using rule 116 (statement -> jump_statement .)
    ELSE            reduce using rule 116 (statement -> jump_statement .)


state 89

    (117) statement -> assert_statement .

    RBRACES         reduce using rule 117 (statement -> assert_statement .)
    IF              reduce using rule 117 (statement -> assert_statement .)
    LBRACES         reduce using rule 117 (statement -> assert_statement .)
    WHILE           reduce using rule 117 (statement -> assert_statement .)
    FOR             reduce using rule 117 (statement -> assert_statement .)
    BREAK           reduce using rule 117 (statement -> assert_statement .)
    RETURN          reduce using rule 117 (statement -> assert_statement .)
    ASSERT          reduce using rule 117 (statement -> assert_statement .)
    PRINT           reduce using rule 117 (statement -> assert_statement .)
    READ            reduce using rule 117 (statement -> assert_statement .)
    VOID            reduce using rule 117 (statement -> assert_statement .)
    CHAR            reduce using rule 117 (statement -> assert_statement .)
    INT             reduce using rule 117 (statement -> assert_statement .)
    FLOAT           reduce using rule 117 (statement -> assert_statement .)
    PLUS_PLUS       reduce using rule 117 (statement -> assert_statement .)
    MINUS_MINUS     reduce using rule 117 (statement -> assert_statement .)
    LPAREN          reduce using rule 117 (statement -> assert_statement .)
    UPPERSAND       reduce using rule 117 (statement -> assert_statement .)
    TIMES           reduce using rule 117 (statement -> assert_statement .)
    PLUS            reduce using rule 117 (statement -> assert_statement .)
    MINUS           reduce using rule 117 (statement -> assert_statement .)
    NOT             reduce using rule 117 (statement -> assert_statement .)
    ID              reduce using rule 117 (statement -> assert_statement .)
    INT_CONST       reduce using rule 117 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 117 (statement -> assert_statement .)
    STRING_CONST    reduce using rule 117 (statement -> assert_statement .)
    SEMI            reduce using rule 117 (statement -> assert_statement .)
    ELSE            reduce using rule 117 (statement -> assert_statement .)


state 90

    (118) statement -> print_statement .

    RBRACES         reduce using rule 118 (statement -> print_statement .)
    IF              reduce using rule 118 (statement -> print_statement .)
    LBRACES         reduce using rule 118 (statement -> print_statement .)
    WHILE           reduce using rule 118 (statement -> print_statement .)
    FOR             reduce using rule 118 (statement -> print_statement .)
    BREAK           reduce using rule 118 (statement -> print_statement .)
    RETURN          reduce using rule 118 (statement -> print_statement .)
    ASSERT          reduce using rule 118 (statement -> print_statement .)
    PRINT           reduce using rule 118 (statement -> print_statement .)
    READ            reduce using rule 118 (statement -> print_statement .)
    VOID            reduce using rule 118 (statement -> print_statement .)
    CHAR            reduce using rule 118 (statement -> print_statement .)
    INT             reduce using rule 118 (statement -> print_statement .)
    FLOAT           reduce using rule 118 (statement -> print_statement .)
    PLUS_PLUS       reduce using rule 118 (statement -> print_statement .)
    MINUS_MINUS     reduce using rule 118 (statement -> print_statement .)
    LPAREN          reduce using rule 118 (statement -> print_statement .)
    UPPERSAND       reduce using rule 118 (statement -> print_statement .)
    TIMES           reduce using rule 118 (statement -> print_statement .)
    PLUS            reduce using rule 118 (statement -> print_statement .)
    MINUS           reduce using rule 118 (statement -> print_statement .)
    NOT             reduce using rule 118 (statement -> print_statement .)
    ID              reduce using rule 118 (statement -> print_statement .)
    INT_CONST       reduce using rule 118 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 118 (statement -> print_statement .)
    STRING_CONST    reduce using rule 118 (statement -> print_statement .)
    SEMI            reduce using rule 118 (statement -> print_statement .)
    ELSE            reduce using rule 118 (statement -> print_statement .)


state 91

    (119) statement -> read_statement .

    RBRACES         reduce using rule 119 (statement -> read_statement .)
    IF              reduce using rule 119 (statement -> read_statement .)
    LBRACES         reduce using rule 119 (statement -> read_statement .)
    WHILE           reduce using rule 119 (statement -> read_statement .)
    FOR             reduce using rule 119 (statement -> read_statement .)
    BREAK           reduce using rule 119 (statement -> read_statement .)
    RETURN          reduce using rule 119 (statement -> read_statement .)
    ASSERT          reduce using rule 119 (statement -> read_statement .)
    PRINT           reduce using rule 119 (statement -> read_statement .)
    READ            reduce using rule 119 (statement -> read_statement .)
    VOID            reduce using rule 119 (statement -> read_statement .)
    CHAR            reduce using rule 119 (statement -> read_statement .)
    INT             reduce using rule 119 (statement -> read_statement .)
    FLOAT           reduce using rule 119 (statement -> read_statement .)
    PLUS_PLUS       reduce using rule 119 (statement -> read_statement .)
    MINUS_MINUS     reduce using rule 119 (statement -> read_statement .)
    LPAREN          reduce using rule 119 (statement -> read_statement .)
    UPPERSAND       reduce using rule 119 (statement -> read_statement .)
    TIMES           reduce using rule 119 (statement -> read_statement .)
    PLUS            reduce using rule 119 (statement -> read_statement .)
    MINUS           reduce using rule 119 (statement -> read_statement .)
    NOT             reduce using rule 119 (statement -> read_statement .)
    ID              reduce using rule 119 (statement -> read_statement .)
    INT_CONST       reduce using rule 119 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 119 (statement -> read_statement .)
    STRING_CONST    reduce using rule 119 (statement -> read_statement .)
    SEMI            reduce using rule 119 (statement -> read_statement .)
    ELSE            reduce using rule 119 (statement -> read_statement .)


state 92

    (108) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 144


state 93

    (103) selection_statement -> IF . LPAREN expression RPAREN statement
    (104) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 145


state 94

    (120) expression_opt -> expression .
    (44) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 120 (expression_opt -> expression .)
    RPAREN          reduce using rule 120 (expression_opt -> expression .)
    COMMA           shift and go to state 146


state 95

    (105) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 147


state 96

    (106) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 148


state 97

    (96) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 149


state 98

    (97) jump_statement -> RETURN . expression_opt SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 150
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 99

    (109) assert_statement -> ASSERT . expression SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 151
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 100

    (110) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 152


state 101

    (111) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 153


state 102

    (121) expression_opt -> empty .

    SEMI            reduce using rule 121 (expression_opt -> empty .)
    RPAREN          reduce using rule 121 (expression_opt -> empty .)


state 103

    (43) expression -> assignment_expression .

    COMMA           reduce using rule 43 (expression -> assignment_expression .)
    SEMI            reduce using rule 43 (expression -> assignment_expression .)
    RPAREN          reduce using rule 43 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 43 (expression -> assignment_expression .)


state 104

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACES         reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    ASSIGN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 105

    (63) binary_expression -> binary_expression TIMES . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 154
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 106

    (64) binary_expression -> binary_expression DIVIDE . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 155
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 107

    (65) binary_expression -> binary_expression MOD . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 156
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 108

    (66) binary_expression -> binary_expression PLUS . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 157
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 109

    (67) binary_expression -> binary_expression MINUS . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 110

    (68) binary_expression -> binary_expression SMALLER . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 111

    (69) binary_expression -> binary_expression SMALLER_EQUAL . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 112

    (70) binary_expression -> binary_expression BIGGER . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 113

    (71) binary_expression -> binary_expression BIGGER_EQUAL . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 114

    (72) binary_expression -> binary_expression EQUAL . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 115

    (73) binary_expression -> binary_expression DIFFERENT . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 116

    (74) binary_expression -> binary_expression AND . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 165
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 117

    (75) binary_expression -> binary_expression OR . binary_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    binary_expression              shift and go to state 166
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 118

    (49) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 167


state 119

    (47) primary_expression -> LPAREN expression . RPAREN
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 168
    COMMA           shift and go to state 146


state 120

    (36) postfix_expression -> postfix_expression PLUS_PLUS .

    PLUS_PLUS       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LPAREN          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    TIMES           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MOD             reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER         reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER_EQUAL   reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER_EQUAL    reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUAL           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIFFERENT       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND             reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RBRACKET        reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_TIMES    reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_DIVIDE   reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_MOD      reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_PLUS     reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_MINUS    reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COMMA           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SEMI            reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RPAREN          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RBRACES         reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 121

    (37) postfix_expression -> postfix_expression MINUS_MINUS .

    PLUS_PLUS       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LPAREN          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    TIMES           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MOD             reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER         reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER_EQUAL   reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER_EQUAL    reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUAL           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIFFERENT       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND             reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RBRACKET        reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_TIMES    reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_DIVIDE   reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_MOD      reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_PLUS     reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_MINUS    reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COMMA           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SEMI            reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RPAREN          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RBRACES         reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 122

    (38) postfix_expression -> postfix_expression LPAREN . RPAREN
    (39) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (41) argument_expression -> . assignment_expression
    (42) argument_expression -> . argument_expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RPAREN          shift and go to state 169
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    postfix_expression             shift and go to state 53
    argument_expression            shift and go to state 170
    assignment_expression          shift and go to state 171
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 123

    (40) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    postfix_expression             shift and go to state 53
    expression                     shift and go to state 172
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 124

    (59) unary_expression -> PLUS_PLUS unary_expression .

    TIMES           reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    DIVIDE          reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    MOD             reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS            reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS           reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    SMALLER         reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    SMALLER_EQUAL   reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    BIGGER          reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    BIGGER_EQUAL    reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    EQUAL           reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    DIFFERENT       reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    AND             reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    OR              reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    RBRACKET        reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN          reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_MOD      reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    COMMA           reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    SEMI            reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    RPAREN          reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)
    RBRACES         reduce using rule 59 (unary_expression -> PLUS_PLUS unary_expression .)


state 125

    (47) primary_expression -> LPAREN . expression RPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 119
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 126

    (60) unary_expression -> MINUS_MINUS unary_expression .

    TIMES           reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    DIVIDE          reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    MOD             reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS            reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS           reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    SMALLER         reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    SMALLER_EQUAL   reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    BIGGER          reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    BIGGER_EQUAL    reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    EQUAL           reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    DIFFERENT       reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    AND             reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    OR              reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    RBRACKET        reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN          reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_MOD      reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    COMMA           reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    SEMI            reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)
    RBRACES         reduce using rule 60 (unary_expression -> MINUS_MINUS unary_expression .)


state 127

    (61) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    SMALLER         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    SMALLER_EQUAL   reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    BIGGER          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    BIGGER_EQUAL    reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    DIFFERENT       reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_TIMES    reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MOD      reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_PLUS     reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MINUS    reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RBRACES         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)


state 128

    (28) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACES         reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ASSIGN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 129

    (29) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACES         reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 130

    (24) parameter_list -> parameter_list COMMA . parameter_declaration
    (22) parameter_declaration -> . type_specifier declarator
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 173
    type_specifier                 shift and go to state 71

state 131

    (83) identifier_list -> identifier_list COMMA . identifier
    (79) identifier -> . ID

    ID              shift and go to state 18

    identifier                     shift and go to state 174

state 132

    (22) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 22 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 22 (parameter_declaration -> type_specifier declarator .)


state 133

    (31) initializer -> LBRACES initializer_list . RBRACES
    (32) initializer -> LBRACES initializer_list . COMMA RBRACES
    (34) initializer_list -> initializer_list . COMMA initializer

    RBRACES         shift and go to state 175
    COMMA           shift and go to state 176


state 134

    (33) initializer_list -> initializer .

    RBRACES         reduce using rule 33 (initializer_list -> initializer .)
    COMMA           reduce using rule 33 (initializer_list -> initializer .)


state 135

    (51) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    unary_expression               shift and go to state 78
    assignment_expression          shift and go to state 177
    binary_expression              shift and go to state 77
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 136

    (52) assignment_operator -> ASSIGN .

    PLUS_PLUS       reduce using rule 52 (assignment_operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 52 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 52 (assignment_operator -> ASSIGN .)
    UPPERSAND       reduce using rule 52 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 52 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 52 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 52 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 52 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 52 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 52 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 52 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 52 (assignment_operator -> ASSIGN .)


state 137

    (53) assignment_operator -> ASSIGN_TIMES .

    PLUS_PLUS       reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    MINUS_MINUS     reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    LPAREN          reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    UPPERSAND       reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    TIMES           reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    PLUS            reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    MINUS           reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    NOT             reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    ID              reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    INT_CONST       reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    FLOAT_CONST     reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)
    STRING_CONST    reduce using rule 53 (assignment_operator -> ASSIGN_TIMES .)


state 138

    (54) assignment_operator -> ASSIGN_DIVIDE .

    PLUS_PLUS       reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS_MINUS     reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    LPAREN          reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    UPPERSAND       reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    TIMES           reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    PLUS            reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS           reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    NOT             reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    ID              reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    INT_CONST       reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    FLOAT_CONST     reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)
    STRING_CONST    reduce using rule 54 (assignment_operator -> ASSIGN_DIVIDE .)


state 139

    (55) assignment_operator -> ASSIGN_MOD .

    PLUS_PLUS       reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    MINUS_MINUS     reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    LPAREN          reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    UPPERSAND       reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    TIMES           reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    PLUS            reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    MINUS           reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    NOT             reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    ID              reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    INT_CONST       reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    FLOAT_CONST     reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)
    STRING_CONST    reduce using rule 55 (assignment_operator -> ASSIGN_MOD .)


state 140

    (56) assignment_operator -> ASSIGN_PLUS .

    PLUS_PLUS       reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    MINUS_MINUS     reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    LPAREN          reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    UPPERSAND       reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    TIMES           reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    PLUS            reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    MINUS           reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    NOT             reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    ID              reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    INT_CONST       reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    FLOAT_CONST     reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)
    STRING_CONST    reduce using rule 56 (assignment_operator -> ASSIGN_PLUS .)


state 141

    (57) assignment_operator -> ASSIGN_MINUS .

    PLUS_PLUS       reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    MINUS_MINUS     reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    LPAREN          reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    UPPERSAND       reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    TIMES           reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    PLUS            reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    MINUS           reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    NOT             reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    ID              reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    INT_CONST       reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    FLOAT_CONST     reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)
    STRING_CONST    reduce using rule 57 (assignment_operator -> ASSIGN_MINUS .)


state 142

    (102) compound_statement -> LBRACES block_item_list RBRACES .

    VOID            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    CHAR            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    INT             reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    FLOAT           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    LPAREN          reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    TIMES           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    ID              reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    $end            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    RBRACES         reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    IF              reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    LBRACES         reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    WHILE           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    FOR             reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    BREAK           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    RETURN          reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    ASSERT          reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    PRINT           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    READ            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    PLUS_PLUS       reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    MINUS_MINUS     reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    UPPERSAND       reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    PLUS            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    MINUS           reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    NOT             reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    INT_CONST       reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    FLOAT_CONST     reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    STRING_CONST    reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    SEMI            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)
    ELSE            reduce using rule 102 (compound_statement -> LBRACES block_item_list RBRACES .)


state 143

    (101) block_item_list -> block_item_list block_item .

    RBRACES         reduce using rule 101 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 101 (block_item_list -> block_item_list block_item .)
    LBRACES         reduce using rule 101 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 101 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 101 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 101 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 101 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 101 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 101 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 101 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    PLUS_PLUS       reduce using rule 101 (block_item_list -> block_item_list block_item .)
    MINUS_MINUS     reduce using rule 101 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 101 (block_item_list -> block_item_list block_item .)
    UPPERSAND       reduce using rule 101 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 101 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 101 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 101 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 101 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 101 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 101 (block_item_list -> block_item_list block_item .)
    STRING_CONST    reduce using rule 101 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 101 (block_item_list -> block_item_list block_item .)


state 144

    (108) expression_statement -> expression_opt SEMI .

    RBRACES         reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    LBRACES         reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    PLUS_PLUS       reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    MINUS_MINUS     reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    UPPERSAND       reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    STRING_CONST    reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 108 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 108 (expression_statement -> expression_opt SEMI .)


state 145

    (103) selection_statement -> IF LPAREN . expression RPAREN statement
    (104) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 178
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 146

    (44) expression -> expression COMMA . assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    assignment_expression          shift and go to state 179
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 147

    (105) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 148

    (106) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (6) declaration -> . decl_body SEMI
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (89) type_specifier -> . VOID
    (90) type_specifier -> . CHAR
    (91) type_specifier -> . INT
    (92) type_specifier -> . FLOAT
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    SEMI            reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 181
    declaration                    shift and go to state 182
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    decl_body                      shift and go to state 6
    assignment_expression          shift and go to state 103
    type_specifier                 shift and go to state 30
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 149

    (96) jump_statement -> BREAK SEMI .

    RBRACES         reduce using rule 96 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 96 (jump_statement -> BREAK SEMI .)
    LBRACES         reduce using rule 96 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 96 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 96 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 96 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 96 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 96 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 96 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 96 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    PLUS_PLUS       reduce using rule 96 (jump_statement -> BREAK SEMI .)
    MINUS_MINUS     reduce using rule 96 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 96 (jump_statement -> BREAK SEMI .)
    UPPERSAND       reduce using rule 96 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 96 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 96 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 96 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 96 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 96 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 96 (jump_statement -> BREAK SEMI .)
    STRING_CONST    reduce using rule 96 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 96 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 96 (jump_statement -> BREAK SEMI .)


state 150

    (97) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 183


state 151

    (109) assert_statement -> ASSERT expression . SEMI
    (44) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 184
    COMMA           shift and go to state 146


state 152

    (110) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RPAREN          reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 185
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 153

    (111) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (41) argument_expression -> . assignment_expression
    (42) argument_expression -> . argument_expression COMMA assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    argument_expression            shift and go to state 186
    assignment_expression          shift and go to state 171
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 154

    (63) binary_expression -> binary_expression TIMES binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER         reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER_EQUAL   reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER          reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER_EQUAL    reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUAL           reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFFERENT       reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACES         reduce using rule 63 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MOD             [ shift and go to state 107 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 155

    (64) binary_expression -> binary_expression DIVIDE binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER         reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER_EQUAL   reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER          reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER_EQUAL    reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUAL           reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFFERENT       reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACES         reduce using rule 64 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MOD             [ shift and go to state 107 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 156

    (65) binary_expression -> binary_expression MOD binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER         reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER_EQUAL   reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER          reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER_EQUAL    reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    EQUAL           reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    DIFFERENT       reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACES         reduce using rule 65 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 105 ]
  ! DIVIDE          [ shift and go to state 106 ]
  ! MOD             [ shift and go to state 107 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 157

    (66) binary_expression -> binary_expression PLUS binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER         reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER          reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUAL           reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFFERENT       reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACES         reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107

  ! TIMES           [ reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 66 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 158

    (67) binary_expression -> binary_expression MINUS binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER         reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER          reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUAL           reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFFERENT       reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACES         reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107

  ! TIMES           [ reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 67 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 159

    (68) binary_expression -> binary_expression SMALLER binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    SMALLER_EQUAL   reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER          reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER_EQUAL    reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    EQUAL           reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    DIFFERENT       reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    AND             reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    OR              reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    RBRACKET        reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    COMMA           reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    SEMI            reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    RPAREN          reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    RBRACES         reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109

  ! TIMES           [ reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MOD             [ reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! PLUS            [ reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MINUS           [ reduce using rule 68 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 160

    (69) binary_expression -> binary_expression SMALLER_EQUAL binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER          reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    EQUAL           reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    AND             reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    OR              reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    RBRACKET        reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    COMMA           reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    SEMI            reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    RPAREN          reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    RBRACES         reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109

  ! TIMES           [ reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 69 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 161

    (70) binary_expression -> binary_expression BIGGER binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    SMALLER_EQUAL   reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER          reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER_EQUAL    reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    EQUAL           reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    DIFFERENT       reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    AND             reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    OR              reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    RBRACKET        reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    COMMA           reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    SEMI            reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    RPAREN          reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    RBRACES         reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109

  ! TIMES           [ reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MOD             [ reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! PLUS            [ reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MINUS           [ reduce using rule 70 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 162

    (71) binary_expression -> binary_expression BIGGER_EQUAL binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER          reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    EQUAL           reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    AND             reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    OR              reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    RBRACKET        reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    COMMA           reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    SEMI            reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    RPAREN          reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    RBRACES         reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109

  ! TIMES           [ reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 71 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 110 ]
  ! SMALLER_EQUAL   [ shift and go to state 111 ]
  ! BIGGER          [ shift and go to state 112 ]
  ! BIGGER_EQUAL    [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 163

    (72) binary_expression -> binary_expression EQUAL binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    DIFFERENT       reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    AND             reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    OR              reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    RBRACKET        reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    COMMA           reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    SEMI            reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    RPAREN          reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    RBRACES         reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113

  ! TIMES           [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER         [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER          [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 72 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 164

    (73) binary_expression -> binary_expression DIFFERENT binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    DIFFERENT       reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    AND             reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    OR              reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    RBRACKET        reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    COMMA           reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    SEMI            reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    RPAREN          reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    RBRACES         reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113

  ! TIMES           [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MOD             [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! PLUS            [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MINUS           [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER         [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER          [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 73 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! EQUAL           [ shift and go to state 114 ]
  ! DIFFERENT       [ shift and go to state 115 ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 165

    (74) binary_expression -> binary_expression AND binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    RBRACES         reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113
    EQUAL           shift and go to state 114
    DIFFERENT       shift and go to state 115

  ! TIMES           [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER         [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER          [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUAL           [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 74 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 116 ]
  ! OR              [ shift and go to state 117 ]


state 166

    (75) binary_expression -> binary_expression OR binary_expression .
    (63) binary_expression -> binary_expression . TIMES binary_expression
    (64) binary_expression -> binary_expression . DIVIDE binary_expression
    (65) binary_expression -> binary_expression . MOD binary_expression
    (66) binary_expression -> binary_expression . PLUS binary_expression
    (67) binary_expression -> binary_expression . MINUS binary_expression
    (68) binary_expression -> binary_expression . SMALLER binary_expression
    (69) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (70) binary_expression -> binary_expression . BIGGER binary_expression
    (71) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (72) binary_expression -> binary_expression . EQUAL binary_expression
    (73) binary_expression -> binary_expression . DIFFERENT binary_expression
    (74) binary_expression -> binary_expression . AND binary_expression
    (75) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    RBRACES         reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    SMALLER         shift and go to state 110
    SMALLER_EQUAL   shift and go to state 111
    BIGGER          shift and go to state 112
    BIGGER_EQUAL    shift and go to state 113
    EQUAL           shift and go to state 114
    DIFFERENT       shift and go to state 115
    AND             shift and go to state 116

  ! TIMES           [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER         [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER          [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUAL           [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 75 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 117 ]


state 167

    (49) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    cast_expression                shift and go to state 187
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 168

    (47) primary_expression -> LPAREN expression RPAREN .

    PLUS_PLUS       reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_MINUS     reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    SMALLER         reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    SMALLER_EQUAL   reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    BIGGER          reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    BIGGER_EQUAL    reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_TIMES    reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_DIVIDE   reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_MOD      reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_PLUS     reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_MINUS    reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)
    RBRACES         reduce using rule 47 (primary_expression -> LPAREN expression RPAREN .)


state 169

    (38) postfix_expression -> postfix_expression LPAREN RPAREN .

    PLUS_PLUS       reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS_MINUS     reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SMALLER         reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SMALLER_EQUAL   reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BIGGER          reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BIGGER_EQUAL    reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIFFERENT       reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_TIMES    reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_DIVIDE   reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_MOD      reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_PLUS     reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_MINUS    reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACES         reduce using rule 38 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 170

    (39) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (42) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 188
    COMMA           shift and go to state 189


state 171

    (41) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 41 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 41 (argument_expression -> assignment_expression .)


state 172

    (40) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (44) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 190
    COMMA           shift and go to state 146


state 173

    (24) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 24 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 24 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 174

    (83) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 83 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 83 (identifier_list -> identifier_list COMMA identifier .)


state 175

    (31) initializer -> LBRACES initializer_list RBRACES .

    COMMA           reduce using rule 31 (initializer -> LBRACES initializer_list RBRACES .)
    SEMI            reduce using rule 31 (initializer -> LBRACES initializer_list RBRACES .)
    RBRACES         reduce using rule 31 (initializer -> LBRACES initializer_list RBRACES .)


state 176

    (32) initializer -> LBRACES initializer_list COMMA . RBRACES
    (34) initializer_list -> initializer_list COMMA . initializer
    (30) initializer -> . assignment_expression
    (31) initializer -> . LBRACES initializer_list RBRACES
    (32) initializer -> . LBRACES initializer_list COMMA RBRACES
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RBRACES         shift and go to state 191
    LBRACES         shift and go to state 76
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    initializer                    shift and go to state 192
    assignment_expression          shift and go to state 75
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 177

    (51) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 51 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 51 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 51 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACES         reduce using rule 51 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 51 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 178

    (103) selection_statement -> IF LPAREN expression . RPAREN statement
    (104) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 146


state 179

    (44) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 44 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 44 (expression -> expression COMMA assignment_expression .)


state 180

    (105) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (44) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 146


state 181

    (106) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 195


state 182

    (107) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 196
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 183

    (97) jump_statement -> RETURN expression_opt SEMI .

    RBRACES         reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACES         reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    VOID            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    INT             reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS_PLUS       reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS_MINUS     reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    UPPERSAND       reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    INT_CONST       reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    STRING_CONST    reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 97 (jump_statement -> RETURN expression_opt SEMI .)


state 184

    (109) assert_statement -> ASSERT expression SEMI .

    RBRACES         reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    LBRACES         reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    PLUS_PLUS       reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    MINUS_MINUS     reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    UPPERSAND       reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    STRING_CONST    reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 109 (assert_statement -> ASSERT expression SEMI .)


state 185

    (110) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 197


state 186

    (111) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (42) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 189


state 187

    (49) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER         reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER_EQUAL   reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER          reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER_EQUAL    reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUAL           reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFFERENT       reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_TIMES    reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MOD      reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_PLUS     reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MINUS    reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACES         reduce using rule 49 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 188

    (39) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    PLUS_PLUS       reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS_MINUS     reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACKET        reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SMALLER         reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SMALLER_EQUAL   reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    BIGGER          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    BIGGER_EQUAL    reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUAL           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIFFERENT       reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN_TIMES    reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN_DIVIDE   reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN_MOD      reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN_PLUS     reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN_MINUS    reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACES         reduce using rule 39 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 189

    (42) argument_expression -> argument_expression COMMA . assignment_expression
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    assignment_expression          shift and go to state 199
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 190

    (40) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    PLUS_PLUS       reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_MINUS     reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SMALLER         reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SMALLER_EQUAL   reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BIGGER          reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BIGGER_EQUAL    reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIFFERENT       reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_TIMES    reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_DIVIDE   reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_MOD      reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_PLUS     reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_MINUS    reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACES         reduce using rule 40 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 191

    (32) initializer -> LBRACES initializer_list COMMA RBRACES .

    COMMA           reduce using rule 32 (initializer -> LBRACES initializer_list COMMA RBRACES .)
    SEMI            reduce using rule 32 (initializer -> LBRACES initializer_list COMMA RBRACES .)
    RBRACES         reduce using rule 32 (initializer -> LBRACES initializer_list COMMA RBRACES .)


state 192

    (34) initializer_list -> initializer_list COMMA initializer .

    RBRACES         reduce using rule 34 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 34 (initializer_list -> initializer_list COMMA initializer .)


state 193

    (103) selection_statement -> IF LPAREN expression RPAREN . statement
    (104) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 94
    statement                      shift and go to state 200
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    expression_opt                 shift and go to state 92
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 194

    (105) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 94
    statement                      shift and go to state 201
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    expression_opt                 shift and go to state 92
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 195

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 202
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 196

    (107) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 203


state 197

    (110) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 204


state 198

    (111) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 205


state 199

    (42) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 42 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 42 (argument_expression -> argument_expression COMMA assignment_expression .)


state 200

    (103) selection_statement -> IF LPAREN expression RPAREN statement .
    (104) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACES         reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACES         reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS_PLUS       reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS_MINUS     reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UPPERSAND       reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 206

  ! ELSE            [ reduce using rule 103 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 201

    (105) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACES         reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACES         reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS_PLUS       reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS_MINUS     reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UPPERSAND       reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 105 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 202

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 207


state 203

    (107) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RPAREN          reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 208
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 204

    (110) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    RBRACES         reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LBRACES         reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    VOID            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT             reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS_PLUS       reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS_MINUS     reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    UPPERSAND       reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    NOT             reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING_CONST    reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 110 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 205

    (111) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACES         reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACES         reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS_PLUS       reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS_MINUS     reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    UPPERSAND       reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_CONST    reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 111 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 206

    (104) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 94
    statement                      shift and go to state 209
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    expression_opt                 shift and go to state 92
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 207

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    RPAREN          reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 210
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 208

    (107) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 211


state 209

    (104) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACES         reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACES         reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS_PLUS       reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS_MINUS     reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UPPERSAND       reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_CONST    reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 104 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 210

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 212


state 211

    (107) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 92
    statement                      shift and go to state 213
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 212

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (112) statement -> . expression_statement
    (113) statement -> . selection_statement
    (114) statement -> . compound_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) statement -> . assert_statement
    (118) statement -> . print_statement
    (119) statement -> . read_statement
    (108) expression_statement -> . expression_opt SEMI
    (103) selection_statement -> . IF LPAREN expression RPAREN statement
    (104) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (102) compound_statement -> . LBRACES block_item_list RBRACES
    (105) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (106) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (107) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (96) jump_statement -> . BREAK SEMI
    (97) jump_statement -> . RETURN expression_opt SEMI
    (109) assert_statement -> . ASSERT expression SEMI
    (110) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (111) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (120) expression_opt -> . expression
    (121) expression_opt -> . empty
    (43) expression -> . assignment_expression
    (44) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (50) assignment_expression -> . binary_expression
    (51) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) binary_expression -> . cast_expression
    (63) binary_expression -> . binary_expression TIMES binary_expression
    (64) binary_expression -> . binary_expression DIVIDE binary_expression
    (65) binary_expression -> . binary_expression MOD binary_expression
    (66) binary_expression -> . binary_expression PLUS binary_expression
    (67) binary_expression -> . binary_expression MINUS binary_expression
    (68) binary_expression -> . binary_expression SMALLER binary_expression
    (69) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (70) binary_expression -> . binary_expression BIGGER binary_expression
    (71) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (72) binary_expression -> . binary_expression EQUAL binary_expression
    (73) binary_expression -> . binary_expression DIFFERENT binary_expression
    (74) binary_expression -> . binary_expression AND binary_expression
    (75) binary_expression -> . binary_expression OR binary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . PLUS_PLUS unary_expression
    (60) unary_expression -> . MINUS_MINUS unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (48) cast_expression -> . unary_expression
    (49) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (35) postfix_expression -> . primary_expression
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) postfix_expression -> . postfix_expression LPAREN RPAREN
    (39) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (40) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) unary_operator -> . UPPERSAND
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (45) primary_expression -> . identifier
    (46) primary_expression -> . constant
    (47) primary_expression -> . LPAREN expression RPAREN
    (79) identifier -> . ID
    (93) constant -> . INT_CONST
    (94) constant -> . FLOAT_CONST
    (95) constant -> . STRING_CONST

    IF              shift and go to state 93
    LBRACES         shift and go to state 40
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    BREAK           shift and go to state 97
    RETURN          shift and go to state 98
    ASSERT          shift and go to state 99
    PRINT           shift and go to state 100
    READ            shift and go to state 101
    SEMI            reduce using rule 124 (empty -> .)
    PLUS_PLUS       shift and go to state 54
    MINUS_MINUS     shift and go to state 55
    LPAREN          shift and go to state 52
    UPPERSAND       shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 62
    FLOAT_CONST     shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression_opt                 shift and go to state 92
    statement                      shift and go to state 214
    expression_statement           shift and go to state 84
    selection_statement            shift and go to state 85
    compound_statement             shift and go to state 86
    iteration_statement            shift and go to state 87
    jump_statement                 shift and go to state 88
    assert_statement               shift and go to state 89
    print_statement                shift and go to state 90
    read_statement                 shift and go to state 91
    expression                     shift and go to state 94
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61

state 213

    (107) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    RBRACES         reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACES         reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS_PLUS       reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS_MINUS     reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UPPERSAND       reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_CONST    reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 107 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 214

    (106) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACES         reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACES         reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS_PLUS       reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS_MINUS     reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UPPERSAND       reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_CONST    reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 106 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 200 resolved as shift
