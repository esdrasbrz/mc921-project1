
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALDIFFERENTleftBIGGERBIGGER_EQUALSMALLERSMALLER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODAND ASSERT ASSIGN ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_PLUS ASSIGN_TIMES BIGGER BIGGER_EQUAL BREAK CCOMMENT CHAR COMMA DIFFERENT DIVIDE ELSE EQUAL FLOAT FLOAT_CONST FOR ID IF INT INT_CONST LBRACES LBRACKET LPAREN MINUS MINUS_MINUS MOD NOT NUMBER OR PLUS PLUS_PLUS PRINT QUESTION RBRACES RBRACKET READ RETURN RPAREN SEMI SMALLER SMALLER_EQUAL STRING_CONST TIMES UCCCOMMENT UPPERSAND VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration  : declaration\n         global_declaration  : function_definition\n         declaration : decl_body SEMI\n         declaration_list    : declaration\n                                | declaration_list declaration\n         declaration_list_opt    : declaration_list\n                                    | empty\n         decl_body  : type_specifier init_declarator_list_opt\n         pointer : TIMES\n                    | TIMES pointer\n         declarator  : direct_declarator\n         declarator : pointer direct_declarator\n         init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt    : init_declarator_list\n                                        | empty\n         parameter_declaration  : type_specifier declarator\n         parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         direct_declarator : identifier\n         direct_declarator :  LPAREN declarator RPAREN\n         direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n         direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN\n                              | direct_declarator LPAREN parameter_list RPAREN\n         initializer : assignment_expression\n         initializer : LBRACES initializer_list RBRACES\n                        | LBRACES initializer_list COMMA RBRACES\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         postfix_expression : primary_expression\n         postfix_expression : postfix_expression PLUS_PLUS\n                               | postfix_expression MINUS_MINUS\n         postfix_expression  : postfix_expression LPAREN RPAREN\n                                | postfix_expression LPAREN argument_expression RPAREN\n         postfix_expression  : postfix_expression LBRACKET expression RBRACKET\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         expression  : assignment_expression\n         expression  : expression COMMA assignment_expression\n         primary_expression : identifier\n                               | constant\n         primary_expression : LPAREN expression RPAREN\n         cast_expression : unary_expression\n         cast_expression : LPAREN type_specifier RPAREN cast_expression\n         assignment_expression   : binary_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : ASSIGN\n                                | ASSIGN_TIMES\n                                | ASSIGN_DIVIDE\n                                | ASSIGN_MOD\n                                | ASSIGN_PLUS\n                                | ASSIGN_MINUS\n         unary_expression : postfix_expression\n         unary_expression    : PLUS_PLUS unary_expression\n                                | MINUS_MINUS unary_expression\n                                | unary_operator cast_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression SMALLER binary_expression\n                                | binary_expression SMALLER_EQUAL binary_expression\n                                | binary_expression BIGGER binary_expression\n                                | binary_expression BIGGER_EQUAL binary_expression\n                                | binary_expression EQUAL binary_expression\n                                | binary_expression DIFFERENT binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         constant_expression : binary_expression\n         constant_expression_opt : constant_expression\n                                    | empty\n         identifier : ID\n         identifier_list_opt : identifier_list\n                                | empty\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         unary_operator : UPPERSAND\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         constant : INT_CONST\n         constant : FLOAT_CONST\n         constant : STRING_CONST\n         jump_statement  : BREAK SEMI\n         jump_statement  : RETURN expression_opt SEMI\n         block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         compound_statement   : LBRACES block_item_list RBRACES\n         selection_statement : IF LPAREN expression RPAREN statement\n         selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n         iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n         iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         expression_statement : expression_opt SEMI\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         statement   : expression_statement\n                        | selection_statement\n                        | compound_statement\n                        | iteration_statement\n                        | jump_statement\n                        | assert_statement\n                        | print_statement\n                        | read_statement\n         expression_opt : expression\n                           | empty\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n         function_definition : declarator declaration_list_opt compound_statement\n         empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,148,149,183,184,200,201,204,205,209,213,214,],[9,9,-2,-4,-5,9,-14,-25,-79,-3,-6,9,9,-7,9,-15,-123,9,-8,9,-26,-122,9,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-27,-28,-29,9,-102,-101,-108,9,-96,-97,-109,-103,-105,-110,-111,-104,-107,-106,]),'CHAR':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,148,149,183,184,200,201,204,205,209,213,214,],[10,10,-2,-4,-5,10,-14,-25,-79,-3,-6,10,10,-7,10,-15,-123,10,-8,10,-26,-122,10,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-27,-28,-29,10,-102,-101,-108,10,-96,-97,-109,-103,-105,-110,-111,-104,-107,-106,]),'INT':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,148,149,183,184,200,201,204,205,209,213,214,],[11,11,-2,-4,-5,11,-14,-25,-79,-3,-6,11,11,-7,11,-15,-123,11,-8,11,-26,-122,11,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-27,-28,-29,11,-102,-101,-108,11,-96,-97,-109,-103,-105,-110,-111,-104,-107,-106,]),'FLOAT':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,148,149,183,184,200,201,204,205,209,213,214,],[12,12,-2,-4,-5,12,-14,-25,-79,-3,-6,12,12,-7,12,-15,-123,12,-8,12,-26,-122,12,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-27,-28,-29,12,-102,-101,-108,12,-96,-97,-109,-103,-105,-110,-111,-104,-107,-106,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,30,31,33,35,37,38,39,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,73,76,80,81,82,83,84,85,86,87,88,89,90,91,93,95,96,98,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,128,129,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,168,169,176,182,183,184,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[16,16,-2,-4,-5,16,-89,-90,-91,-92,32,16,-25,16,-12,-79,-3,-6,16,52,32,-13,52,16,-123,52,-85,-86,-87,52,122,125,125,52,-35,-84,-88,-45,-46,-93,-94,-95,16,-26,-122,52,52,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,145,147,148,52,52,152,153,-27,52,52,52,52,52,52,52,52,52,52,52,52,52,-36,-37,52,52,52,-28,-29,52,-52,-53,-54,-55,-56,-57,-102,-101,-108,52,52,52,52,-96,52,52,52,-47,-38,52,52,-97,-109,-39,52,-40,52,52,52,-103,-105,52,-110,-111,52,52,-104,52,52,-107,-106,]),'TIMES':([0,2,3,4,5,7,9,10,11,12,16,17,18,19,20,30,31,37,38,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,73,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,182,183,184,187,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[17,17,-2,-4,-5,17,-89,-90,-91,-92,17,17,-79,-3,-6,17,48,48,17,-123,48,105,-62,-85,-86,-87,-48,48,-58,48,48,48,-35,-84,-88,-45,-46,-93,-94,-95,17,-122,48,105,-48,48,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-36,-37,48,48,-59,48,-60,-61,48,-52,-53,-54,-55,-56,-57,-102,-101,-108,48,48,48,48,-96,48,48,-63,-64,-65,105,105,105,105,105,105,105,105,105,105,48,-47,-38,48,48,-97,-109,-49,-39,48,-40,48,48,48,-103,-105,48,-110,-111,48,48,-104,48,48,-107,-106,]),'ID':([0,2,3,4,5,7,9,10,11,12,14,16,17,19,20,30,31,32,35,37,38,39,40,48,49,50,52,54,55,56,58,59,71,73,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[18,18,-2,-4,-5,18,-89,-90,-91,-92,18,18,-12,-3,-6,18,18,18,-13,18,18,-123,18,-85,-86,-87,18,18,18,18,-84,-88,18,-122,18,18,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-52,-53,-54,-55,-56,-57,-102,-101,-108,18,18,18,18,-96,18,18,18,18,18,-97,-109,18,18,18,18,-103,-105,18,-110,-111,18,18,-104,18,18,-107,-106,]),'$end':([1,2,3,4,5,19,20,39,73,142,],[0,-1,-2,-4,-5,-3,-6,-123,-122,-102,]),'SEMI':([6,7,9,10,11,12,13,15,18,20,21,22,23,24,25,30,33,40,42,47,51,53,57,60,61,62,63,64,72,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,97,98,102,103,104,120,121,124,126,127,128,129,142,143,144,148,149,150,151,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,175,177,179,181,182,183,184,187,188,190,191,193,194,195,196,197,198,200,201,202,204,205,206,209,211,212,213,214,],[20,-124,-89,-90,-91,-92,-14,-25,-79,-6,-16,-11,-20,-21,-18,-124,-15,-124,-16,-62,-48,-58,-35,-45,-46,-93,-94,-95,-26,-17,-30,-50,-48,-19,-124,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,144,-120,149,-124,-121,-43,-27,-36,-37,-59,-60,-61,-28,-29,-102,-101,-108,-124,-96,183,184,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,-31,-51,-44,195,-124,-97,-109,-49,-39,-40,-32,-124,-124,-124,203,204,205,-103,-105,207,-110,-111,-124,-104,-124,-124,-107,-106,]),'LBRACES':([8,13,15,18,20,21,26,27,28,29,33,36,37,40,41,72,76,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,142,143,144,149,176,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-124,-14,-25,-79,-6,-124,40,-9,-10,-7,-15,40,76,40,-8,-26,76,40,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-27,-28,-29,-102,-101,-108,-96,76,-97,-109,40,40,-103,-105,-110,-111,40,-104,40,40,-107,-106,]),'RPAREN':([9,10,11,12,13,15,18,32,33,34,47,51,53,57,60,61,62,63,64,65,66,67,68,69,70,72,77,78,94,102,103,104,118,119,120,121,122,124,126,127,128,129,132,152,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,173,174,177,178,179,180,185,186,187,188,190,199,203,207,208,210,],[-89,-90,-91,-92,-14,-25,-79,-124,-15,72,-62,-48,-58,-35,-45,-46,-93,-94,-95,128,129,-80,-81,-23,-82,-26,-50,-48,-120,-121,-43,-27,167,168,-36,-37,169,-59,-60,-61,-28,-29,-22,-124,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,188,-41,-24,-83,-51,193,-44,194,197,198,-49,-39,-40,-42,-124,-124,211,212,]),'ASSIGN':([13,15,18,21,33,42,51,53,57,60,61,62,63,64,72,78,104,120,121,124,126,127,128,129,168,169,187,188,190,],[-14,-25,-79,37,-15,37,-48,-58,-35,-45,-46,-93,-94,-95,-26,136,-27,-36,-37,-59,-60,-61,-28,-29,-47,-38,-49,-39,-40,]),'COMMA':([13,15,18,21,23,25,33,42,47,51,53,57,60,61,62,63,64,66,67,69,70,72,74,75,77,78,79,94,103,104,119,120,121,124,126,127,128,129,132,133,134,151,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,177,178,179,180,186,187,188,190,191,192,199,],[-14,-25,-79,-16,38,-18,-15,-16,-62,-48,-58,-35,-45,-46,-93,-94,-95,130,131,-23,-82,-26,-17,-30,-50,-48,-19,146,-43,-27,146,-36,-37,-59,-60,-61,-28,-29,-22,176,-33,146,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,189,-41,146,-24,-83,-31,-51,146,-44,146,189,-49,-39,-40,-32,-34,-42,]),'LBRACKET':([13,15,18,33,53,57,60,61,62,63,64,72,104,120,121,128,129,168,169,188,190,],[31,-25,-79,31,123,-35,-45,-46,-93,-94,-95,-26,-27,-36,-37,-28,-29,-47,-38,-39,-40,]),'PLUS_PLUS':([18,20,31,37,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,168,169,176,182,183,184,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-79,-6,54,54,54,-85,-86,-87,54,120,54,54,54,-35,-84,-88,-45,-46,-93,-94,-95,54,54,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-36,-37,54,54,54,54,-52,-53,-54,-55,-56,-57,-102,-101,-108,54,54,54,54,-96,54,54,54,-47,-38,54,54,-97,-109,-39,54,-40,54,54,54,-103,-105,54,-110,-111,54,54,-104,54,54,-107,-106,]),'MINUS_MINUS':([18,20,31,37,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,168,169,176,182,183,184,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-79,-6,55,55,55,-85,-86,-87,55,121,55,55,55,-35,-84,-88,-45,-46,-93,-94,-95,55,55,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-36,-37,55,55,55,55,-52,-53,-54,-55,-56,-57,-102,-101,-108,55,55,55,55,-96,55,55,55,-47,-38,55,55,-97,-109,-39,55,-40,55,55,55,-103,-105,55,-110,-111,55,55,-104,55,55,-107,-106,]),'DIVIDE':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,106,-62,-48,-58,-35,-45,-46,-93,-94,-95,106,-48,-36,-37,-59,-60,-61,-63,-64,-65,106,106,106,106,106,106,106,106,106,106,-47,-38,-49,-39,-40,]),'MOD':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,107,-62,-48,-58,-35,-45,-46,-93,-94,-95,107,-48,-36,-37,-59,-60,-61,-63,-64,-65,107,107,107,107,107,107,107,107,107,107,-47,-38,-49,-39,-40,]),'PLUS':([18,20,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,182,183,184,187,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-79,-6,49,49,49,108,-62,-85,-86,-87,-48,49,-58,49,49,49,-35,-84,-88,-45,-46,-93,-94,-95,49,108,-48,49,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-36,-37,49,49,-59,49,-60,-61,49,-52,-53,-54,-55,-56,-57,-102,-101,-108,49,49,49,49,-96,49,49,-63,-64,-65,-66,-67,108,108,108,108,108,108,108,108,49,-47,-38,49,49,-97,-109,-49,-39,49,-40,49,49,49,-103,-105,49,-110,-111,49,49,-104,49,49,-107,-106,]),'MINUS':([18,20,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,182,183,184,187,188,189,190,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-79,-6,50,50,50,109,-62,-85,-86,-87,-48,50,-58,50,50,50,-35,-84,-88,-45,-46,-93,-94,-95,50,109,-48,50,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-36,-37,50,50,-59,50,-60,-61,50,-52,-53,-54,-55,-56,-57,-102,-101,-108,50,50,50,50,-96,50,50,-63,-64,-65,-66,-67,109,109,109,109,109,109,109,109,50,-47,-38,50,50,-97,-109,-49,-39,50,-40,50,50,50,-103,-105,50,-110,-111,50,50,-104,50,50,-107,-106,]),'SMALLER':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,110,-62,-48,-58,-35,-45,-46,-93,-94,-95,110,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,110,110,110,110,-47,-38,-49,-39,-40,]),'SMALLER_EQUAL':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,111,-62,-48,-58,-35,-45,-46,-93,-94,-95,111,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,111,111,111,111,-47,-38,-49,-39,-40,]),'BIGGER':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,112,-62,-48,-58,-35,-45,-46,-93,-94,-95,112,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,112,112,112,112,-47,-38,-49,-39,-40,]),'BIGGER_EQUAL':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,113,-62,-48,-58,-35,-45,-46,-93,-94,-95,113,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,113,113,113,113,-47,-38,-49,-39,-40,]),'EQUAL':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,114,-62,-48,-58,-35,-45,-46,-93,-94,-95,114,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,114,114,-47,-38,-49,-39,-40,]),'DIFFERENT':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,115,-62,-48,-58,-35,-45,-46,-93,-94,-95,115,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,115,115,-47,-38,-49,-39,-40,]),'AND':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,116,-62,-48,-58,-35,-45,-46,-93,-94,-95,116,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,116,-47,-38,-49,-39,-40,]),'OR':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-79,117,-62,-48,-58,-35,-45,-46,-93,-94,-95,117,-48,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,-49,-39,-40,]),'RBRACKET':([18,31,43,44,45,46,47,51,53,57,60,61,62,63,64,77,78,103,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,172,177,179,187,188,190,],[-79,-124,104,-77,-78,-76,-62,-48,-58,-35,-45,-46,-93,-94,-95,-50,-48,-43,-36,-37,-59,-60,-61,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,190,-51,-44,-49,-39,-40,]),'ASSIGN_TIMES':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-79,-48,-58,-35,-45,-46,-93,-94,-95,137,-36,-37,-59,-60,-61,-47,-38,-49,-39,-40,]),'ASSIGN_DIVIDE':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-79,-48,-58,-35,-45,-46,-93,-94,-95,138,-36,-37,-59,-60,-61,-47,-38,-49,-39,-40,]),'ASSIGN_MOD':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-79,-48,-58,-35,-45,-46,-93,-94,-95,139,-36,-37,-59,-60,-61,-47,-38,-49,-39,-40,]),'ASSIGN_PLUS':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-79,-48,-58,-35,-45,-46,-93,-94,-95,140,-36,-37,-59,-60,-61,-47,-38,-49,-39,-40,]),'ASSIGN_MINUS':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-79,-48,-58,-35,-45,-46,-93,-94,-95,141,-36,-37,-59,-60,-61,-47,-38,-49,-39,-40,]),'RBRACES':([18,20,47,51,53,57,60,61,62,63,64,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,120,121,124,126,127,133,134,142,143,144,149,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,175,176,177,183,184,187,188,190,191,192,200,201,204,205,209,213,214,],[-79,-6,-62,-48,-58,-35,-45,-46,-93,-94,-95,-30,-50,-48,142,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-36,-37,-59,-60,-61,175,-33,-102,-101,-108,-96,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-47,-38,-31,191,-51,-97,-109,-49,-39,-40,-32,-34,-103,-105,-110,-111,-104,-107,-106,]),'IF':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,93,93,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,93,93,-103,-105,-110,-111,93,-104,93,93,-107,-106,]),'WHILE':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,95,95,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,95,95,-103,-105,-110,-111,95,-104,95,95,-107,-106,]),'FOR':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,96,96,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,96,96,-103,-105,-110,-111,96,-104,96,96,-107,-106,]),'BREAK':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,97,97,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,97,97,-103,-105,-110,-111,97,-104,97,97,-107,-106,]),'RETURN':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,98,98,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,98,98,-103,-105,-110,-111,98,-104,98,98,-107,-106,]),'ASSERT':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,99,99,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,99,99,-103,-105,-110,-111,99,-104,99,99,-107,-106,]),'PRINT':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,100,100,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,100,100,-103,-105,-110,-111,100,-104,100,100,-107,-106,]),'READ':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,149,183,184,193,194,200,201,204,205,206,209,211,212,213,214,],[-6,101,101,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,-102,-101,-108,-96,-97,-109,101,101,-103,-105,-110,-111,101,-104,101,101,-107,-106,]),'UPPERSAND':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-6,58,58,58,-85,-86,-87,58,58,58,58,-84,-88,58,58,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-52,-53,-54,-55,-56,-57,-102,-101,-108,58,58,58,58,-96,58,58,58,58,58,-97,-109,58,58,58,58,-103,-105,58,-110,-111,58,58,-104,58,58,-107,-106,]),'NOT':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-6,59,59,59,-85,-86,-87,59,59,59,59,-84,-88,59,59,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-52,-53,-54,-55,-56,-57,-102,-101,-108,59,59,59,59,-96,59,59,59,59,59,-97,-109,59,59,59,59,-103,-105,59,-110,-111,59,59,-104,59,59,-107,-106,]),'INT_CONST':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-6,62,62,62,-85,-86,-87,62,62,62,62,-84,-88,62,62,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-52,-53,-54,-55,-56,-57,-102,-101,-108,62,62,62,62,-96,62,62,62,62,62,-97,-109,62,62,62,62,-103,-105,62,-110,-111,62,62,-104,62,62,-107,-106,]),'FLOAT_CONST':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-6,63,63,63,-85,-86,-87,63,63,63,63,-84,-88,63,63,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-52,-53,-54,-55,-56,-57,-102,-101,-108,63,63,63,63,-96,63,63,63,63,63,-97,-109,63,63,63,63,-103,-105,63,-110,-111,63,63,-104,63,63,-107,-106,]),'STRING_CONST':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,167,176,182,183,184,189,193,194,195,200,201,203,204,205,206,207,209,211,212,213,214,],[-6,64,64,64,-85,-86,-87,64,64,64,64,-84,-88,64,64,-100,-98,-99,-112,-113,-114,-115,-116,-117,-118,-119,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-52,-53,-54,-55,-56,-57,-102,-101,-108,64,64,64,64,-96,64,64,64,64,64,-97,-109,64,64,64,64,-103,-105,64,-110,-111,64,64,-104,64,64,-107,-106,]),'ELSE':([84,85,86,87,88,89,90,91,142,144,149,183,184,200,201,204,205,209,213,214,],[-112,-113,-114,-115,-116,-117,-118,-119,-102,-108,-96,-97,-109,206,-105,-110,-111,-104,-107,-106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'declaration':([0,2,8,21,27,40,80,148,],[4,4,29,29,41,82,82,182,]),'function_definition':([0,2,],[5,5,]),'decl_body':([0,2,8,21,27,40,80,148,],[6,6,6,6,6,6,6,6,]),'type_specifier':([0,2,8,21,27,32,40,52,80,130,148,],[7,7,30,30,30,71,30,118,30,71,30,]),'declarator':([0,2,7,16,30,38,71,],[8,8,21,34,42,42,132,]),'direct_declarator':([0,2,7,14,16,30,38,71,],[13,13,13,33,13,13,13,13,]),'pointer':([0,2,7,16,17,30,38,71,],[14,14,14,14,35,14,14,14,]),'identifier':([0,2,7,14,16,30,31,32,37,38,40,52,54,55,56,71,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,131,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[15,15,15,15,15,15,60,70,60,15,60,60,60,60,60,15,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,174,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'init_declarator_list_opt':([7,30,],[22,22,]),'init_declarator_list':([7,30,],[23,23,]),'empty':([7,8,21,30,31,32,40,80,98,148,152,182,193,194,195,203,206,207,211,212,],[24,28,28,24,45,68,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'init_declarator':([7,30,38,],[25,25,79,]),'declaration_list_opt':([8,21,],[26,36,]),'declaration_list':([8,21,],[27,27,]),'compound_statement':([26,36,40,80,193,194,206,211,212,],[39,73,86,86,86,86,86,86,86,]),'constant_expression_opt':([31,],[43,]),'constant_expression':([31,],[44,]),'binary_expression':([31,37,40,52,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,176,182,189,193,194,195,203,206,207,211,212,],[46,77,77,77,77,77,77,77,154,155,156,157,158,159,160,161,162,163,164,165,166,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'cast_expression':([31,37,40,52,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[47,47,47,47,127,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,187,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,37,40,52,54,55,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[51,78,78,78,124,126,51,78,78,78,78,51,51,51,51,51,51,51,51,51,51,51,51,51,78,78,78,78,78,78,78,78,78,78,51,78,78,78,78,78,78,78,78,78,78,78,]),'postfix_expression':([31,37,40,52,54,55,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,37,40,52,54,55,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,37,40,52,54,55,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,37,40,52,54,55,56,76,80,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,147,148,152,153,167,176,182,189,193,194,195,203,206,207,211,212,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'identifier_list_opt':([32,],[65,]),'parameter_list':([32,],[66,]),'identifier_list':([32,],[67,]),'parameter_declaration':([32,130,],[69,173,]),'initializer':([37,76,176,],[74,134,192,]),'assignment_expression':([37,40,52,76,80,98,99,122,123,125,135,145,146,147,148,152,153,176,182,189,193,194,195,203,206,207,211,212,],[75,103,103,75,103,103,103,171,103,103,177,103,179,103,103,103,171,75,103,199,103,103,103,103,103,103,103,103,]),'block_item_list':([40,],[80,]),'block_item':([40,80,],[81,143,]),'statement':([40,80,193,194,206,211,212,],[83,83,200,201,209,213,214,]),'expression_statement':([40,80,193,194,206,211,212,],[84,84,84,84,84,84,84,]),'selection_statement':([40,80,193,194,206,211,212,],[85,85,85,85,85,85,85,]),'iteration_statement':([40,80,193,194,206,211,212,],[87,87,87,87,87,87,87,]),'jump_statement':([40,80,193,194,206,211,212,],[88,88,88,88,88,88,88,]),'assert_statement':([40,80,193,194,206,211,212,],[89,89,89,89,89,89,89,]),'print_statement':([40,80,193,194,206,211,212,],[90,90,90,90,90,90,90,]),'read_statement':([40,80,193,194,206,211,212,],[91,91,91,91,91,91,91,]),'expression_opt':([40,80,98,148,152,182,193,194,195,203,206,207,211,212,],[92,92,150,181,185,196,92,92,202,208,92,210,92,92,]),'expression':([40,52,80,98,99,123,125,145,147,148,152,182,193,194,195,203,206,207,211,212,],[94,119,94,94,151,172,119,178,180,94,94,94,94,94,94,94,94,94,94,94,]),'initializer_list':([76,],[133,]),'assignment_operator':([78,],[135,]),'argument_expression':([122,153,],[170,186,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',156),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',162),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',163),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_1','uc_parser.py',169),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_2','uc_parser.py',174),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','uc_parser.py',179),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',184),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',185),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',190),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',191),
  ('decl_body -> type_specifier init_declarator_list_opt','decl_body',2,'p_decl_body','uc_parser.py',196),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',208),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',209),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser.py',223),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_2','uc_parser.py',228),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',235),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','uc_parser.py',236),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',241),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',242),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',247),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',248),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',253),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',261),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',262),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',272),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',277),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',282),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',289),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',290),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','uc_parser.py',298),
  ('initializer -> LBRACES initializer_list RBRACES','initializer',3,'p_initializer_2','uc_parser.py',303),
  ('initializer -> LBRACES initializer_list COMMA RBRACES','initializer',4,'p_initializer_2','uc_parser.py',304),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',312),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',313),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',322),
  ('postfix_expression -> postfix_expression PLUS_PLUS','postfix_expression',2,'p_postfix_expression_2','uc_parser.py',327),
  ('postfix_expression -> postfix_expression MINUS_MINUS','postfix_expression',2,'p_postfix_expression_2','uc_parser.py',328),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','uc_parser.py',333),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',334),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_4','uc_parser.py',340),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',345),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',346),
  ('expression -> assignment_expression','expression',1,'p_expression_1','uc_parser.py',357),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','uc_parser.py',362),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','uc_parser.py',370),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','uc_parser.py',371),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','uc_parser.py',376),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',381),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',386),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',391),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',392),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','uc_parser.py',400),
  ('assignment_operator -> ASSIGN_TIMES','assignment_operator',1,'p_assignment_operator','uc_parser.py',401),
  ('assignment_operator -> ASSIGN_DIVIDE','assignment_operator',1,'p_assignment_operator','uc_parser.py',402),
  ('assignment_operator -> ASSIGN_MOD','assignment_operator',1,'p_assignment_operator','uc_parser.py',403),
  ('assignment_operator -> ASSIGN_PLUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',404),
  ('assignment_operator -> ASSIGN_MINUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',405),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',410),
  ('unary_expression -> PLUS_PLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',415),
  ('unary_expression -> MINUS_MINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',416),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',417),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',422),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',423),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',424),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',425),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',426),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',427),
  ('binary_expression -> binary_expression SMALLER binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',428),
  ('binary_expression -> binary_expression SMALLER_EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',429),
  ('binary_expression -> binary_expression BIGGER binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',430),
  ('binary_expression -> binary_expression BIGGER_EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',431),
  ('binary_expression -> binary_expression EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',432),
  ('binary_expression -> binary_expression DIFFERENT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',433),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',434),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',435),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',443),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',448),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',449),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',454),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',460),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',461),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',466),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',467),
  ('unary_operator -> UPPERSAND','unary_operator',1,'p_unary_operator','uc_parser.py',476),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',477),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',478),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',479),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',480),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',485),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',486),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',487),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',488),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',494),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','uc_parser.py',500),
  ('constant -> STRING_CONST','constant',1,'p_constant_3','uc_parser.py',506),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','uc_parser.py',512),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','uc_parser.py',517),
  ('block_item -> declaration','block_item',1,'p_block_item','uc_parser.py',522),
  ('block_item -> statement','block_item',1,'p_block_item','uc_parser.py',523),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','uc_parser.py',528),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','uc_parser.py',529),
  ('compound_statement -> LBRACES block_item_list RBRACES','compound_statement',3,'p_compound_statement','uc_parser.py',534),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','uc_parser.py',539),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','uc_parser.py',545),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','uc_parser.py',550),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','uc_parser.py',555),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_3','uc_parser.py',560),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',566),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',574),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',579),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',584),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',589),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',590),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',591),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',592),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',593),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',594),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',595),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',596),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',601),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',602),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_1','uc_parser.py',607),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_2','uc_parser.py',614),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',624),
]
