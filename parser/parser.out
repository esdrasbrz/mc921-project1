Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSERT
    BREAK
    CCOMMENT
    COMMA
    ELSE
    FOR
    IF
    LBRACES
    LBRACKET
    NUMBER
    PRINT
    QUESTION
    RBRACES
    RBRACKET
    READ
    RETURN
    SEMI
    UCCCOMMENT
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> postfix_expression
Rule 5     global_declaration -> type_specifier
Rule 6     global_declaration -> assignment_expression
Rule 7     global_declaration -> cast_expression
Rule 8     global_declaration -> unary_expression
Rule 9     global_declaration -> binary_expression
Rule 10    global_declaration -> constant_expression
Rule 11    postfix_expression -> primary_expression
Rule 12    postfix_expression -> postfix_expression PLUS_PLUS
Rule 13    postfix_expression -> postfix_expression MINUS_MINUS
Rule 14    primary_expression -> identifier
Rule 15    primary_expression -> constant
Rule 16    cast_expression -> postfix_expression
Rule 17    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 18    assignment_expression -> binary_expression
Rule 19    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 20    assignment_operator -> ASSIGN
Rule 21    assignment_operator -> ASSIGN_TIMES
Rule 22    assignment_operator -> ASSIGN_DIVIDE
Rule 23    assignment_operator -> ASSIGN_MOD
Rule 24    assignment_operator -> ASSIGN_PLUS
Rule 25    assignment_operator -> ASSIGN_MINUS
Rule 26    unary_expression -> postfix_expression
Rule 27    unary_expression -> PLUS_PLUS unary_expression
Rule 28    unary_expression -> MINUS_MINUS unary_expression
Rule 29    unary_expression -> unary_operator cast_expression
Rule 30    binary_expression -> cast_expression
Rule 31    binary_expression -> binary_expression TIMES binary_expression
Rule 32    binary_expression -> binary_expression DIVIDE binary_expression
Rule 33    binary_expression -> binary_expression MOD binary_expression
Rule 34    binary_expression -> binary_expression PLUS binary_expression
Rule 35    binary_expression -> binary_expression MINUS binary_expression
Rule 36    binary_expression -> binary_expression SMALLER binary_expression
Rule 37    binary_expression -> binary_expression SMALLER_EQUAL binary_expression
Rule 38    binary_expression -> binary_expression BIGGER binary_expression
Rule 39    binary_expression -> binary_expression BIGGER_EQUAL binary_expression
Rule 40    binary_expression -> binary_expression EQUAL binary_expression
Rule 41    binary_expression -> binary_expression DIFFERENT binary_expression
Rule 42    binary_expression -> binary_expression AND binary_expression
Rule 43    binary_expression -> binary_expression OR binary_expression
Rule 44    constant_expression -> binary_expression
Rule 45    identifier -> ID
Rule 46    unary_operator -> UPPERSAND
Rule 47    unary_operator -> TIMES
Rule 48    unary_operator -> PLUS
Rule 49    unary_operator -> MINUS
Rule 50    unary_operator -> NOT
Rule 51    type_specifier -> VOID
Rule 52    type_specifier -> CHAR
Rule 53    type_specifier -> INT
Rule 54    type_specifier -> FLOAT
Rule 55    constant -> INT_CONST
Rule 56    constant -> FLOAT_CONST
Rule 57    constant -> STRING_CONST

Terminals, with rules where they appear

AND                  : 42
ASSERT               : 
ASSIGN               : 20
ASSIGN_DIVIDE        : 22
ASSIGN_MINUS         : 25
ASSIGN_MOD           : 23
ASSIGN_PLUS          : 24
ASSIGN_TIMES         : 21
BIGGER               : 38
BIGGER_EQUAL         : 39
BREAK                : 
CCOMMENT             : 
CHAR                 : 52
COMMA                : 
DIFFERENT            : 41
DIVIDE               : 32
ELSE                 : 
EQUAL                : 40
FLOAT                : 54
FLOAT_CONST          : 56
FOR                  : 
ID                   : 45
IF                   : 
INT                  : 53
INT_CONST            : 55
LBRACES              : 
LBRACKET             : 
LPAREN               : 17
MINUS                : 35 49
MINUS_MINUS          : 13 28
MOD                  : 33
NOT                  : 50
NUMBER               : 
OR                   : 43
PLUS                 : 34 48
PLUS_PLUS            : 12 27
PRINT                : 
QUESTION             : 
RBRACES              : 
RBRACKET             : 
READ                 : 
RETURN               : 
RPAREN               : 17
SEMI                 : 
SMALLER              : 36
SMALLER_EQUAL        : 37
STRING_CONST         : 57
TIMES                : 31 47
UCCCOMMENT           : 
UPPERSAND            : 46
VOID                 : 51
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment_expression : 6 19
assignment_operator  : 19
binary_expression    : 9 18 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44
cast_expression      : 7 17 29 30
constant             : 15
constant_expression  : 10
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 14
postfix_expression   : 4 12 13 16 26
primary_expression   : 11
program              : 0
type_specifier       : 5 17
unary_expression     : 8 19 27 28
unary_operator       : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . postfix_expression
    (5) global_declaration -> . type_specifier
    (6) global_declaration -> . assignment_expression
    (7) global_declaration -> . cast_expression
    (8) global_declaration -> . unary_expression
    (9) global_declaration -> . binary_expression
    (10) global_declaration -> . constant_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (51) type_specifier -> . VOID
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . INT
    (54) type_specifier -> . FLOAT
    (18) assignment_expression -> . binary_expression
    (19) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (26) unary_expression -> . postfix_expression
    (27) unary_expression -> . PLUS_PLUS unary_expression
    (28) unary_expression -> . MINUS_MINUS unary_expression
    (29) unary_expression -> . unary_operator cast_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (44) constant_expression -> . binary_expression
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (46) unary_operator -> . UPPERSAND
    (47) unary_operator -> . TIMES
    (48) unary_operator -> . PLUS
    (49) unary_operator -> . MINUS
    (50) unary_operator -> . NOT
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    LPAREN          shift and go to state 18
    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 25
    TIMES           shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    NOT             shift and go to state 26
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    postfix_expression             shift and go to state 4
    type_specifier                 shift and go to state 5
    assignment_expression          shift and go to state 6
    cast_expression                shift and go to state 7
    unary_expression               shift and go to state 8
    binary_expression              shift and go to state 9
    constant_expression            shift and go to state 10
    primary_expression             shift and go to state 11
    unary_operator                 shift and go to state 19
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . postfix_expression
    (5) global_declaration -> . type_specifier
    (6) global_declaration -> . assignment_expression
    (7) global_declaration -> . cast_expression
    (8) global_declaration -> . unary_expression
    (9) global_declaration -> . binary_expression
    (10) global_declaration -> . constant_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (51) type_specifier -> . VOID
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . INT
    (54) type_specifier -> . FLOAT
    (18) assignment_expression -> . binary_expression
    (19) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (26) unary_expression -> . postfix_expression
    (27) unary_expression -> . PLUS_PLUS unary_expression
    (28) unary_expression -> . MINUS_MINUS unary_expression
    (29) unary_expression -> . unary_operator cast_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (44) constant_expression -> . binary_expression
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (46) unary_operator -> . UPPERSAND
    (47) unary_operator -> . TIMES
    (48) unary_operator -> . PLUS
    (49) unary_operator -> . MINUS
    (50) unary_operator -> . NOT
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    LPAREN          shift and go to state 18
    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 25
    TIMES           shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    NOT             shift and go to state 26
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    global_declaration             shift and go to state 31
    postfix_expression             shift and go to state 4
    type_specifier                 shift and go to state 5
    assignment_expression          shift and go to state 6
    cast_expression                shift and go to state 7
    unary_expression               shift and go to state 8
    binary_expression              shift and go to state 9
    constant_expression            shift and go to state 10
    primary_expression             shift and go to state 11
    unary_operator                 shift and go to state 19
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    PLUS_PLUS       reduce using rule 2 (global_declaration_list -> global_declaration .)
    MINUS_MINUS     reduce using rule 2 (global_declaration_list -> global_declaration .)
    UPPERSAND       reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    PLUS            reduce using rule 2 (global_declaration_list -> global_declaration .)
    MINUS           reduce using rule 2 (global_declaration_list -> global_declaration .)
    NOT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT_CONST       reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT_CONST     reduce using rule 2 (global_declaration_list -> global_declaration .)
    STRING_CONST    reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS
    (16) cast_expression -> postfix_expression .
    (26) unary_expression -> postfix_expression .

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for VOID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for UPPERSAND resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for $end resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for VOID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for UPPERSAND resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for $end resolved using rule 4 (global_declaration -> postfix_expression .)
    VOID            reduce using rule 4 (global_declaration -> postfix_expression .)
    CHAR            reduce using rule 4 (global_declaration -> postfix_expression .)
    INT             reduce using rule 4 (global_declaration -> postfix_expression .)
    FLOAT           reduce using rule 4 (global_declaration -> postfix_expression .)
    LPAREN          reduce using rule 4 (global_declaration -> postfix_expression .)
    UPPERSAND       reduce using rule 4 (global_declaration -> postfix_expression .)
    TIMES           reduce using rule 4 (global_declaration -> postfix_expression .)
    PLUS            reduce using rule 4 (global_declaration -> postfix_expression .)
    MINUS           reduce using rule 4 (global_declaration -> postfix_expression .)
    NOT             reduce using rule 4 (global_declaration -> postfix_expression .)
    ID              reduce using rule 4 (global_declaration -> postfix_expression .)
    INT_CONST       reduce using rule 4 (global_declaration -> postfix_expression .)
    FLOAT_CONST     reduce using rule 4 (global_declaration -> postfix_expression .)
    STRING_CONST    reduce using rule 4 (global_declaration -> postfix_expression .)
    $end            reduce using rule 4 (global_declaration -> postfix_expression .)
    PLUS_PLUS       shift and go to state 32
    MINUS_MINUS     shift and go to state 33
    DIVIDE          reduce using rule 16 (cast_expression -> postfix_expression .)
    MOD             reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER         reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER          reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 16 (cast_expression -> postfix_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> postfix_expression .)
    AND             reduce using rule 16 (cast_expression -> postfix_expression .)
    OR              reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN          reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 26 (unary_expression -> postfix_expression .)

  ! PLUS_PLUS       [ reduce using rule 4 (global_declaration -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 4 (global_declaration -> postfix_expression .) ]
  ! VOID            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! CHAR            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! INT             [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! FLOAT           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! UPPERSAND       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! TIMES           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! PLUS            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! NOT             [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ID              [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! INT_CONST       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! STRING_CONST    [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! $end            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! VOID            [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! CHAR            [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! INT             [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! FLOAT           [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! UPPERSAND       [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! TIMES           [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! PLUS            [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! MINUS           [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! NOT             [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! ID              [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! INT_CONST       [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! STRING_CONST    [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! $end            [ reduce using rule 26 (unary_expression -> postfix_expression .) ]


state 5

    (5) global_declaration -> type_specifier .

    VOID            reduce using rule 5 (global_declaration -> type_specifier .)
    CHAR            reduce using rule 5 (global_declaration -> type_specifier .)
    INT             reduce using rule 5 (global_declaration -> type_specifier .)
    FLOAT           reduce using rule 5 (global_declaration -> type_specifier .)
    LPAREN          reduce using rule 5 (global_declaration -> type_specifier .)
    PLUS_PLUS       reduce using rule 5 (global_declaration -> type_specifier .)
    MINUS_MINUS     reduce using rule 5 (global_declaration -> type_specifier .)
    UPPERSAND       reduce using rule 5 (global_declaration -> type_specifier .)
    TIMES           reduce using rule 5 (global_declaration -> type_specifier .)
    PLUS            reduce using rule 5 (global_declaration -> type_specifier .)
    MINUS           reduce using rule 5 (global_declaration -> type_specifier .)
    NOT             reduce using rule 5 (global_declaration -> type_specifier .)
    ID              reduce using rule 5 (global_declaration -> type_specifier .)
    INT_CONST       reduce using rule 5 (global_declaration -> type_specifier .)
    FLOAT_CONST     reduce using rule 5 (global_declaration -> type_specifier .)
    STRING_CONST    reduce using rule 5 (global_declaration -> type_specifier .)
    $end            reduce using rule 5 (global_declaration -> type_specifier .)


state 6

    (6) global_declaration -> assignment_expression .

    VOID            reduce using rule 6 (global_declaration -> assignment_expression .)
    CHAR            reduce using rule 6 (global_declaration -> assignment_expression .)
    INT             reduce using rule 6 (global_declaration -> assignment_expression .)
    FLOAT           reduce using rule 6 (global_declaration -> assignment_expression .)
    LPAREN          reduce using rule 6 (global_declaration -> assignment_expression .)
    PLUS_PLUS       reduce using rule 6 (global_declaration -> assignment_expression .)
    MINUS_MINUS     reduce using rule 6 (global_declaration -> assignment_expression .)
    UPPERSAND       reduce using rule 6 (global_declaration -> assignment_expression .)
    TIMES           reduce using rule 6 (global_declaration -> assignment_expression .)
    PLUS            reduce using rule 6 (global_declaration -> assignment_expression .)
    MINUS           reduce using rule 6 (global_declaration -> assignment_expression .)
    NOT             reduce using rule 6 (global_declaration -> assignment_expression .)
    ID              reduce using rule 6 (global_declaration -> assignment_expression .)
    INT_CONST       reduce using rule 6 (global_declaration -> assignment_expression .)
    FLOAT_CONST     reduce using rule 6 (global_declaration -> assignment_expression .)
    STRING_CONST    reduce using rule 6 (global_declaration -> assignment_expression .)
    $end            reduce using rule 6 (global_declaration -> assignment_expression .)


state 7

    (7) global_declaration -> cast_expression .
    (30) binary_expression -> cast_expression .

  ! reduce/reduce conflict for TIMES resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for VOID resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for INT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for UPPERSAND resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ID resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for $end resolved using rule 7 (global_declaration -> cast_expression .)
    VOID            reduce using rule 7 (global_declaration -> cast_expression .)
    CHAR            reduce using rule 7 (global_declaration -> cast_expression .)
    INT             reduce using rule 7 (global_declaration -> cast_expression .)
    FLOAT           reduce using rule 7 (global_declaration -> cast_expression .)
    LPAREN          reduce using rule 7 (global_declaration -> cast_expression .)
    PLUS_PLUS       reduce using rule 7 (global_declaration -> cast_expression .)
    MINUS_MINUS     reduce using rule 7 (global_declaration -> cast_expression .)
    UPPERSAND       reduce using rule 7 (global_declaration -> cast_expression .)
    TIMES           reduce using rule 7 (global_declaration -> cast_expression .)
    PLUS            reduce using rule 7 (global_declaration -> cast_expression .)
    MINUS           reduce using rule 7 (global_declaration -> cast_expression .)
    NOT             reduce using rule 7 (global_declaration -> cast_expression .)
    ID              reduce using rule 7 (global_declaration -> cast_expression .)
    INT_CONST       reduce using rule 7 (global_declaration -> cast_expression .)
    FLOAT_CONST     reduce using rule 7 (global_declaration -> cast_expression .)
    STRING_CONST    reduce using rule 7 (global_declaration -> cast_expression .)
    $end            reduce using rule 7 (global_declaration -> cast_expression .)
    DIVIDE          reduce using rule 30 (binary_expression -> cast_expression .)
    MOD             reduce using rule 30 (binary_expression -> cast_expression .)
    SMALLER         reduce using rule 30 (binary_expression -> cast_expression .)
    SMALLER_EQUAL   reduce using rule 30 (binary_expression -> cast_expression .)
    BIGGER          reduce using rule 30 (binary_expression -> cast_expression .)
    BIGGER_EQUAL    reduce using rule 30 (binary_expression -> cast_expression .)
    EQUAL           reduce using rule 30 (binary_expression -> cast_expression .)
    DIFFERENT       reduce using rule 30 (binary_expression -> cast_expression .)
    AND             reduce using rule 30 (binary_expression -> cast_expression .)
    OR              reduce using rule 30 (binary_expression -> cast_expression .)

  ! TIMES           [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! PLUS            [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! MINUS           [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! VOID            [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! CHAR            [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! INT             [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! FLOAT           [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! LPAREN          [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! UPPERSAND       [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! NOT             [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! ID              [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! INT_CONST       [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! STRING_CONST    [ reduce using rule 30 (binary_expression -> cast_expression .) ]
  ! $end            [ reduce using rule 30 (binary_expression -> cast_expression .) ]


state 8

    (8) global_declaration -> unary_expression .
    (19) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (20) assignment_operator -> . ASSIGN
    (21) assignment_operator -> . ASSIGN_TIMES
    (22) assignment_operator -> . ASSIGN_DIVIDE
    (23) assignment_operator -> . ASSIGN_MOD
    (24) assignment_operator -> . ASSIGN_PLUS
    (25) assignment_operator -> . ASSIGN_MINUS

    VOID            reduce using rule 8 (global_declaration -> unary_expression .)
    CHAR            reduce using rule 8 (global_declaration -> unary_expression .)
    INT             reduce using rule 8 (global_declaration -> unary_expression .)
    FLOAT           reduce using rule 8 (global_declaration -> unary_expression .)
    LPAREN          reduce using rule 8 (global_declaration -> unary_expression .)
    PLUS_PLUS       reduce using rule 8 (global_declaration -> unary_expression .)
    MINUS_MINUS     reduce using rule 8 (global_declaration -> unary_expression .)
    UPPERSAND       reduce using rule 8 (global_declaration -> unary_expression .)
    TIMES           reduce using rule 8 (global_declaration -> unary_expression .)
    PLUS            reduce using rule 8 (global_declaration -> unary_expression .)
    MINUS           reduce using rule 8 (global_declaration -> unary_expression .)
    NOT             reduce using rule 8 (global_declaration -> unary_expression .)
    ID              reduce using rule 8 (global_declaration -> unary_expression .)
    INT_CONST       reduce using rule 8 (global_declaration -> unary_expression .)
    FLOAT_CONST     reduce using rule 8 (global_declaration -> unary_expression .)
    STRING_CONST    reduce using rule 8 (global_declaration -> unary_expression .)
    $end            reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN          shift and go to state 35
    ASSIGN_TIMES    shift and go to state 36
    ASSIGN_DIVIDE   shift and go to state 37
    ASSIGN_MOD      shift and go to state 38
    ASSIGN_PLUS     shift and go to state 39
    ASSIGN_MINUS    shift and go to state 40

    assignment_operator            shift and go to state 34

state 9

    (9) global_declaration -> binary_expression .
    (18) assignment_expression -> binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression
    (44) constant_expression -> binary_expression .

  ! reduce/reduce conflict for VOID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for UPPERSAND resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 9 (global_declaration -> binary_expression .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for VOID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for UPPERSAND resolved using rule 9 (global_declaration -> binary_expression .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for NOT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 9 (global_declaration -> binary_expression .)
    VOID            reduce using rule 9 (global_declaration -> binary_expression .)
    CHAR            reduce using rule 9 (global_declaration -> binary_expression .)
    INT             reduce using rule 9 (global_declaration -> binary_expression .)
    FLOAT           reduce using rule 9 (global_declaration -> binary_expression .)
    LPAREN          reduce using rule 9 (global_declaration -> binary_expression .)
    PLUS_PLUS       reduce using rule 9 (global_declaration -> binary_expression .)
    MINUS_MINUS     reduce using rule 9 (global_declaration -> binary_expression .)
    UPPERSAND       reduce using rule 9 (global_declaration -> binary_expression .)
    NOT             reduce using rule 9 (global_declaration -> binary_expression .)
    ID              reduce using rule 9 (global_declaration -> binary_expression .)
    INT_CONST       reduce using rule 9 (global_declaration -> binary_expression .)
    FLOAT_CONST     reduce using rule 9 (global_declaration -> binary_expression .)
    STRING_CONST    reduce using rule 9 (global_declaration -> binary_expression .)
    $end            reduce using rule 9 (global_declaration -> binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49
    EQUAL           shift and go to state 50
    DIFFERENT       shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! TIMES           [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! PLUS            [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! MINUS           [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! VOID            [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! CHAR            [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! INT             [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! FLOAT           [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! LPAREN          [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! UPPERSAND       [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! TIMES           [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! PLUS            [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! NOT             [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! ID              [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! INT_CONST       [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! STRING_CONST    [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! $end            [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! VOID            [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! CHAR            [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! INT             [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! FLOAT           [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! LPAREN          [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! UPPERSAND       [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! TIMES           [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! PLUS            [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! NOT             [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! ID              [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! INT_CONST       [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! STRING_CONST    [ reduce using rule 44 (constant_expression -> binary_expression .) ]
  ! $end            [ reduce using rule 44 (constant_expression -> binary_expression .) ]


state 10

    (10) global_declaration -> constant_expression .

    VOID            reduce using rule 10 (global_declaration -> constant_expression .)
    CHAR            reduce using rule 10 (global_declaration -> constant_expression .)
    INT             reduce using rule 10 (global_declaration -> constant_expression .)
    FLOAT           reduce using rule 10 (global_declaration -> constant_expression .)
    LPAREN          reduce using rule 10 (global_declaration -> constant_expression .)
    PLUS_PLUS       reduce using rule 10 (global_declaration -> constant_expression .)
    MINUS_MINUS     reduce using rule 10 (global_declaration -> constant_expression .)
    UPPERSAND       reduce using rule 10 (global_declaration -> constant_expression .)
    TIMES           reduce using rule 10 (global_declaration -> constant_expression .)
    PLUS            reduce using rule 10 (global_declaration -> constant_expression .)
    MINUS           reduce using rule 10 (global_declaration -> constant_expression .)
    NOT             reduce using rule 10 (global_declaration -> constant_expression .)
    ID              reduce using rule 10 (global_declaration -> constant_expression .)
    INT_CONST       reduce using rule 10 (global_declaration -> constant_expression .)
    FLOAT_CONST     reduce using rule 10 (global_declaration -> constant_expression .)
    STRING_CONST    reduce using rule 10 (global_declaration -> constant_expression .)
    $end            reduce using rule 10 (global_declaration -> constant_expression .)


state 11

    (11) postfix_expression -> primary_expression .

    PLUS_PLUS       reduce using rule 11 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 11 (postfix_expression -> primary_expression .)
    VOID            reduce using rule 11 (postfix_expression -> primary_expression .)
    CHAR            reduce using rule 11 (postfix_expression -> primary_expression .)
    INT             reduce using rule 11 (postfix_expression -> primary_expression .)
    FLOAT           reduce using rule 11 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 11 (postfix_expression -> primary_expression .)
    UPPERSAND       reduce using rule 11 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 11 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 11 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 11 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 11 (postfix_expression -> primary_expression .)
    ID              reduce using rule 11 (postfix_expression -> primary_expression .)
    INT_CONST       reduce using rule 11 (postfix_expression -> primary_expression .)
    FLOAT_CONST     reduce using rule 11 (postfix_expression -> primary_expression .)
    STRING_CONST    reduce using rule 11 (postfix_expression -> primary_expression .)
    $end            reduce using rule 11 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 11 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 11 (postfix_expression -> primary_expression .)
    SMALLER         reduce using rule 11 (postfix_expression -> primary_expression .)
    SMALLER_EQUAL   reduce using rule 11 (postfix_expression -> primary_expression .)
    BIGGER          reduce using rule 11 (postfix_expression -> primary_expression .)
    BIGGER_EQUAL    reduce using rule 11 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 11 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 11 (postfix_expression -> primary_expression .)
    AND             reduce using rule 11 (postfix_expression -> primary_expression .)
    OR              reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_TIMES    reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_DIVIDE   reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_MOD      reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_PLUS     reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_MINUS    reduce using rule 11 (postfix_expression -> primary_expression .)


state 12

    (27) unary_expression -> PLUS_PLUS . unary_expression
    (26) unary_expression -> . postfix_expression
    (27) unary_expression -> . PLUS_PLUS unary_expression
    (28) unary_expression -> . MINUS_MINUS unary_expression
    (29) unary_expression -> . unary_operator cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (46) unary_operator -> . UPPERSAND
    (47) unary_operator -> . TIMES
    (48) unary_operator -> . PLUS
    (49) unary_operator -> . MINUS
    (50) unary_operator -> . NOT
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 25
    TIMES           shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    NOT             shift and go to state 26
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    unary_expression               shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 19
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 13

    (28) unary_expression -> MINUS_MINUS . unary_expression
    (26) unary_expression -> . postfix_expression
    (27) unary_expression -> . PLUS_PLUS unary_expression
    (28) unary_expression -> . MINUS_MINUS unary_expression
    (29) unary_expression -> . unary_operator cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (46) unary_operator -> . UPPERSAND
    (47) unary_operator -> . TIMES
    (48) unary_operator -> . PLUS
    (49) unary_operator -> . MINUS
    (50) unary_operator -> . NOT
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 25
    TIMES           shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    NOT             shift and go to state 26
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    unary_expression               shift and go to state 56
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 19
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 14

    (51) type_specifier -> VOID .

    VOID            reduce using rule 51 (type_specifier -> VOID .)
    CHAR            reduce using rule 51 (type_specifier -> VOID .)
    INT             reduce using rule 51 (type_specifier -> VOID .)
    FLOAT           reduce using rule 51 (type_specifier -> VOID .)
    LPAREN          reduce using rule 51 (type_specifier -> VOID .)
    PLUS_PLUS       reduce using rule 51 (type_specifier -> VOID .)
    MINUS_MINUS     reduce using rule 51 (type_specifier -> VOID .)
    UPPERSAND       reduce using rule 51 (type_specifier -> VOID .)
    TIMES           reduce using rule 51 (type_specifier -> VOID .)
    PLUS            reduce using rule 51 (type_specifier -> VOID .)
    MINUS           reduce using rule 51 (type_specifier -> VOID .)
    NOT             reduce using rule 51 (type_specifier -> VOID .)
    ID              reduce using rule 51 (type_specifier -> VOID .)
    INT_CONST       reduce using rule 51 (type_specifier -> VOID .)
    FLOAT_CONST     reduce using rule 51 (type_specifier -> VOID .)
    STRING_CONST    reduce using rule 51 (type_specifier -> VOID .)
    $end            reduce using rule 51 (type_specifier -> VOID .)
    RPAREN          reduce using rule 51 (type_specifier -> VOID .)


state 15

    (52) type_specifier -> CHAR .

    VOID            reduce using rule 52 (type_specifier -> CHAR .)
    CHAR            reduce using rule 52 (type_specifier -> CHAR .)
    INT             reduce using rule 52 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 52 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 52 (type_specifier -> CHAR .)
    PLUS_PLUS       reduce using rule 52 (type_specifier -> CHAR .)
    MINUS_MINUS     reduce using rule 52 (type_specifier -> CHAR .)
    UPPERSAND       reduce using rule 52 (type_specifier -> CHAR .)
    TIMES           reduce using rule 52 (type_specifier -> CHAR .)
    PLUS            reduce using rule 52 (type_specifier -> CHAR .)
    MINUS           reduce using rule 52 (type_specifier -> CHAR .)
    NOT             reduce using rule 52 (type_specifier -> CHAR .)
    ID              reduce using rule 52 (type_specifier -> CHAR .)
    INT_CONST       reduce using rule 52 (type_specifier -> CHAR .)
    FLOAT_CONST     reduce using rule 52 (type_specifier -> CHAR .)
    STRING_CONST    reduce using rule 52 (type_specifier -> CHAR .)
    $end            reduce using rule 52 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 52 (type_specifier -> CHAR .)


state 16

    (53) type_specifier -> INT .

    VOID            reduce using rule 53 (type_specifier -> INT .)
    CHAR            reduce using rule 53 (type_specifier -> INT .)
    INT             reduce using rule 53 (type_specifier -> INT .)
    FLOAT           reduce using rule 53 (type_specifier -> INT .)
    LPAREN          reduce using rule 53 (type_specifier -> INT .)
    PLUS_PLUS       reduce using rule 53 (type_specifier -> INT .)
    MINUS_MINUS     reduce using rule 53 (type_specifier -> INT .)
    UPPERSAND       reduce using rule 53 (type_specifier -> INT .)
    TIMES           reduce using rule 53 (type_specifier -> INT .)
    PLUS            reduce using rule 53 (type_specifier -> INT .)
    MINUS           reduce using rule 53 (type_specifier -> INT .)
    NOT             reduce using rule 53 (type_specifier -> INT .)
    ID              reduce using rule 53 (type_specifier -> INT .)
    INT_CONST       reduce using rule 53 (type_specifier -> INT .)
    FLOAT_CONST     reduce using rule 53 (type_specifier -> INT .)
    STRING_CONST    reduce using rule 53 (type_specifier -> INT .)
    $end            reduce using rule 53 (type_specifier -> INT .)
    RPAREN          reduce using rule 53 (type_specifier -> INT .)


state 17

    (54) type_specifier -> FLOAT .

    VOID            reduce using rule 54 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 54 (type_specifier -> FLOAT .)
    INT             reduce using rule 54 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 54 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 54 (type_specifier -> FLOAT .)
    PLUS_PLUS       reduce using rule 54 (type_specifier -> FLOAT .)
    MINUS_MINUS     reduce using rule 54 (type_specifier -> FLOAT .)
    UPPERSAND       reduce using rule 54 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 54 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 54 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 54 (type_specifier -> FLOAT .)
    NOT             reduce using rule 54 (type_specifier -> FLOAT .)
    ID              reduce using rule 54 (type_specifier -> FLOAT .)
    INT_CONST       reduce using rule 54 (type_specifier -> FLOAT .)
    FLOAT_CONST     reduce using rule 54 (type_specifier -> FLOAT .)
    STRING_CONST    reduce using rule 54 (type_specifier -> FLOAT .)
    $end            reduce using rule 54 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 54 (type_specifier -> FLOAT .)


state 18

    (17) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (51) type_specifier -> . VOID
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . INT
    (54) type_specifier -> . FLOAT

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    type_specifier                 shift and go to state 57

state 19

    (29) unary_expression -> unary_operator . cast_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    cast_expression                shift and go to state 58
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 20

    (47) unary_operator -> TIMES .

    LPAREN          reduce using rule 47 (unary_operator -> TIMES .)
    ID              reduce using rule 47 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 47 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 47 (unary_operator -> TIMES .)
    STRING_CONST    reduce using rule 47 (unary_operator -> TIMES .)


state 21

    (48) unary_operator -> PLUS .

    LPAREN          reduce using rule 48 (unary_operator -> PLUS .)
    ID              reduce using rule 48 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 48 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 48 (unary_operator -> PLUS .)
    STRING_CONST    reduce using rule 48 (unary_operator -> PLUS .)


state 22

    (49) unary_operator -> MINUS .

    LPAREN          reduce using rule 49 (unary_operator -> MINUS .)
    ID              reduce using rule 49 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 49 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 49 (unary_operator -> MINUS .)
    STRING_CONST    reduce using rule 49 (unary_operator -> MINUS .)


state 23

    (14) primary_expression -> identifier .

    PLUS_PLUS       reduce using rule 14 (primary_expression -> identifier .)
    MINUS_MINUS     reduce using rule 14 (primary_expression -> identifier .)
    VOID            reduce using rule 14 (primary_expression -> identifier .)
    CHAR            reduce using rule 14 (primary_expression -> identifier .)
    INT             reduce using rule 14 (primary_expression -> identifier .)
    FLOAT           reduce using rule 14 (primary_expression -> identifier .)
    LPAREN          reduce using rule 14 (primary_expression -> identifier .)
    UPPERSAND       reduce using rule 14 (primary_expression -> identifier .)
    TIMES           reduce using rule 14 (primary_expression -> identifier .)
    PLUS            reduce using rule 14 (primary_expression -> identifier .)
    MINUS           reduce using rule 14 (primary_expression -> identifier .)
    NOT             reduce using rule 14 (primary_expression -> identifier .)
    ID              reduce using rule 14 (primary_expression -> identifier .)
    INT_CONST       reduce using rule 14 (primary_expression -> identifier .)
    FLOAT_CONST     reduce using rule 14 (primary_expression -> identifier .)
    STRING_CONST    reduce using rule 14 (primary_expression -> identifier .)
    $end            reduce using rule 14 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 14 (primary_expression -> identifier .)
    MOD             reduce using rule 14 (primary_expression -> identifier .)
    SMALLER         reduce using rule 14 (primary_expression -> identifier .)
    SMALLER_EQUAL   reduce using rule 14 (primary_expression -> identifier .)
    BIGGER          reduce using rule 14 (primary_expression -> identifier .)
    BIGGER_EQUAL    reduce using rule 14 (primary_expression -> identifier .)
    EQUAL           reduce using rule 14 (primary_expression -> identifier .)
    DIFFERENT       reduce using rule 14 (primary_expression -> identifier .)
    AND             reduce using rule 14 (primary_expression -> identifier .)
    OR              reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN          reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_TIMES    reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_DIVIDE   reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_MOD      reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_PLUS     reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_MINUS    reduce using rule 14 (primary_expression -> identifier .)


state 24

    (15) primary_expression -> constant .

    PLUS_PLUS       reduce using rule 15 (primary_expression -> constant .)
    MINUS_MINUS     reduce using rule 15 (primary_expression -> constant .)
    VOID            reduce using rule 15 (primary_expression -> constant .)
    CHAR            reduce using rule 15 (primary_expression -> constant .)
    INT             reduce using rule 15 (primary_expression -> constant .)
    FLOAT           reduce using rule 15 (primary_expression -> constant .)
    LPAREN          reduce using rule 15 (primary_expression -> constant .)
    UPPERSAND       reduce using rule 15 (primary_expression -> constant .)
    TIMES           reduce using rule 15 (primary_expression -> constant .)
    PLUS            reduce using rule 15 (primary_expression -> constant .)
    MINUS           reduce using rule 15 (primary_expression -> constant .)
    NOT             reduce using rule 15 (primary_expression -> constant .)
    ID              reduce using rule 15 (primary_expression -> constant .)
    INT_CONST       reduce using rule 15 (primary_expression -> constant .)
    FLOAT_CONST     reduce using rule 15 (primary_expression -> constant .)
    STRING_CONST    reduce using rule 15 (primary_expression -> constant .)
    $end            reduce using rule 15 (primary_expression -> constant .)
    DIVIDE          reduce using rule 15 (primary_expression -> constant .)
    MOD             reduce using rule 15 (primary_expression -> constant .)
    SMALLER         reduce using rule 15 (primary_expression -> constant .)
    SMALLER_EQUAL   reduce using rule 15 (primary_expression -> constant .)
    BIGGER          reduce using rule 15 (primary_expression -> constant .)
    BIGGER_EQUAL    reduce using rule 15 (primary_expression -> constant .)
    EQUAL           reduce using rule 15 (primary_expression -> constant .)
    DIFFERENT       reduce using rule 15 (primary_expression -> constant .)
    AND             reduce using rule 15 (primary_expression -> constant .)
    OR              reduce using rule 15 (primary_expression -> constant .)
    ASSIGN          reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_TIMES    reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_DIVIDE   reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_MOD      reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_PLUS     reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_MINUS    reduce using rule 15 (primary_expression -> constant .)


state 25

    (46) unary_operator -> UPPERSAND .

    LPAREN          reduce using rule 46 (unary_operator -> UPPERSAND .)
    ID              reduce using rule 46 (unary_operator -> UPPERSAND .)
    INT_CONST       reduce using rule 46 (unary_operator -> UPPERSAND .)
    FLOAT_CONST     reduce using rule 46 (unary_operator -> UPPERSAND .)
    STRING_CONST    reduce using rule 46 (unary_operator -> UPPERSAND .)


state 26

    (50) unary_operator -> NOT .

    LPAREN          reduce using rule 50 (unary_operator -> NOT .)
    ID              reduce using rule 50 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 50 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 50 (unary_operator -> NOT .)
    STRING_CONST    reduce using rule 50 (unary_operator -> NOT .)


state 27

    (45) identifier -> ID .

    PLUS_PLUS       reduce using rule 45 (identifier -> ID .)
    MINUS_MINUS     reduce using rule 45 (identifier -> ID .)
    VOID            reduce using rule 45 (identifier -> ID .)
    CHAR            reduce using rule 45 (identifier -> ID .)
    INT             reduce using rule 45 (identifier -> ID .)
    FLOAT           reduce using rule 45 (identifier -> ID .)
    LPAREN          reduce using rule 45 (identifier -> ID .)
    UPPERSAND       reduce using rule 45 (identifier -> ID .)
    TIMES           reduce using rule 45 (identifier -> ID .)
    PLUS            reduce using rule 45 (identifier -> ID .)
    MINUS           reduce using rule 45 (identifier -> ID .)
    NOT             reduce using rule 45 (identifier -> ID .)
    ID              reduce using rule 45 (identifier -> ID .)
    INT_CONST       reduce using rule 45 (identifier -> ID .)
    FLOAT_CONST     reduce using rule 45 (identifier -> ID .)
    STRING_CONST    reduce using rule 45 (identifier -> ID .)
    $end            reduce using rule 45 (identifier -> ID .)
    DIVIDE          reduce using rule 45 (identifier -> ID .)
    MOD             reduce using rule 45 (identifier -> ID .)
    SMALLER         reduce using rule 45 (identifier -> ID .)
    SMALLER_EQUAL   reduce using rule 45 (identifier -> ID .)
    BIGGER          reduce using rule 45 (identifier -> ID .)
    BIGGER_EQUAL    reduce using rule 45 (identifier -> ID .)
    EQUAL           reduce using rule 45 (identifier -> ID .)
    DIFFERENT       reduce using rule 45 (identifier -> ID .)
    AND             reduce using rule 45 (identifier -> ID .)
    OR              reduce using rule 45 (identifier -> ID .)
    ASSIGN          reduce using rule 45 (identifier -> ID .)
    ASSIGN_TIMES    reduce using rule 45 (identifier -> ID .)
    ASSIGN_DIVIDE   reduce using rule 45 (identifier -> ID .)
    ASSIGN_MOD      reduce using rule 45 (identifier -> ID .)
    ASSIGN_PLUS     reduce using rule 45 (identifier -> ID .)
    ASSIGN_MINUS    reduce using rule 45 (identifier -> ID .)


state 28

    (55) constant -> INT_CONST .

    PLUS_PLUS       reduce using rule 55 (constant -> INT_CONST .)
    MINUS_MINUS     reduce using rule 55 (constant -> INT_CONST .)
    VOID            reduce using rule 55 (constant -> INT_CONST .)
    CHAR            reduce using rule 55 (constant -> INT_CONST .)
    INT             reduce using rule 55 (constant -> INT_CONST .)
    FLOAT           reduce using rule 55 (constant -> INT_CONST .)
    LPAREN          reduce using rule 55 (constant -> INT_CONST .)
    UPPERSAND       reduce using rule 55 (constant -> INT_CONST .)
    TIMES           reduce using rule 55 (constant -> INT_CONST .)
    PLUS            reduce using rule 55 (constant -> INT_CONST .)
    MINUS           reduce using rule 55 (constant -> INT_CONST .)
    NOT             reduce using rule 55 (constant -> INT_CONST .)
    ID              reduce using rule 55 (constant -> INT_CONST .)
    INT_CONST       reduce using rule 55 (constant -> INT_CONST .)
    FLOAT_CONST     reduce using rule 55 (constant -> INT_CONST .)
    STRING_CONST    reduce using rule 55 (constant -> INT_CONST .)
    $end            reduce using rule 55 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 55 (constant -> INT_CONST .)
    MOD             reduce using rule 55 (constant -> INT_CONST .)
    SMALLER         reduce using rule 55 (constant -> INT_CONST .)
    SMALLER_EQUAL   reduce using rule 55 (constant -> INT_CONST .)
    BIGGER          reduce using rule 55 (constant -> INT_CONST .)
    BIGGER_EQUAL    reduce using rule 55 (constant -> INT_CONST .)
    EQUAL           reduce using rule 55 (constant -> INT_CONST .)
    DIFFERENT       reduce using rule 55 (constant -> INT_CONST .)
    AND             reduce using rule 55 (constant -> INT_CONST .)
    OR              reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN          reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN_TIMES    reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN_MOD      reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN_PLUS     reduce using rule 55 (constant -> INT_CONST .)
    ASSIGN_MINUS    reduce using rule 55 (constant -> INT_CONST .)


state 29

    (56) constant -> FLOAT_CONST .

    PLUS_PLUS       reduce using rule 56 (constant -> FLOAT_CONST .)
    MINUS_MINUS     reduce using rule 56 (constant -> FLOAT_CONST .)
    VOID            reduce using rule 56 (constant -> FLOAT_CONST .)
    CHAR            reduce using rule 56 (constant -> FLOAT_CONST .)
    INT             reduce using rule 56 (constant -> FLOAT_CONST .)
    FLOAT           reduce using rule 56 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 56 (constant -> FLOAT_CONST .)
    UPPERSAND       reduce using rule 56 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 56 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 56 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 56 (constant -> FLOAT_CONST .)
    NOT             reduce using rule 56 (constant -> FLOAT_CONST .)
    ID              reduce using rule 56 (constant -> FLOAT_CONST .)
    INT_CONST       reduce using rule 56 (constant -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 56 (constant -> FLOAT_CONST .)
    STRING_CONST    reduce using rule 56 (constant -> FLOAT_CONST .)
    $end            reduce using rule 56 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 56 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 56 (constant -> FLOAT_CONST .)
    SMALLER         reduce using rule 56 (constant -> FLOAT_CONST .)
    SMALLER_EQUAL   reduce using rule 56 (constant -> FLOAT_CONST .)
    BIGGER          reduce using rule 56 (constant -> FLOAT_CONST .)
    BIGGER_EQUAL    reduce using rule 56 (constant -> FLOAT_CONST .)
    EQUAL           reduce using rule 56 (constant -> FLOAT_CONST .)
    DIFFERENT       reduce using rule 56 (constant -> FLOAT_CONST .)
    AND             reduce using rule 56 (constant -> FLOAT_CONST .)
    OR              reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN          reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN_TIMES    reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN_MOD      reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN_PLUS     reduce using rule 56 (constant -> FLOAT_CONST .)
    ASSIGN_MINUS    reduce using rule 56 (constant -> FLOAT_CONST .)


state 30

    (57) constant -> STRING_CONST .

    PLUS_PLUS       reduce using rule 57 (constant -> STRING_CONST .)
    MINUS_MINUS     reduce using rule 57 (constant -> STRING_CONST .)
    VOID            reduce using rule 57 (constant -> STRING_CONST .)
    CHAR            reduce using rule 57 (constant -> STRING_CONST .)
    INT             reduce using rule 57 (constant -> STRING_CONST .)
    FLOAT           reduce using rule 57 (constant -> STRING_CONST .)
    LPAREN          reduce using rule 57 (constant -> STRING_CONST .)
    UPPERSAND       reduce using rule 57 (constant -> STRING_CONST .)
    TIMES           reduce using rule 57 (constant -> STRING_CONST .)
    PLUS            reduce using rule 57 (constant -> STRING_CONST .)
    MINUS           reduce using rule 57 (constant -> STRING_CONST .)
    NOT             reduce using rule 57 (constant -> STRING_CONST .)
    ID              reduce using rule 57 (constant -> STRING_CONST .)
    INT_CONST       reduce using rule 57 (constant -> STRING_CONST .)
    FLOAT_CONST     reduce using rule 57 (constant -> STRING_CONST .)
    STRING_CONST    reduce using rule 57 (constant -> STRING_CONST .)
    $end            reduce using rule 57 (constant -> STRING_CONST .)
    DIVIDE          reduce using rule 57 (constant -> STRING_CONST .)
    MOD             reduce using rule 57 (constant -> STRING_CONST .)
    SMALLER         reduce using rule 57 (constant -> STRING_CONST .)
    SMALLER_EQUAL   reduce using rule 57 (constant -> STRING_CONST .)
    BIGGER          reduce using rule 57 (constant -> STRING_CONST .)
    BIGGER_EQUAL    reduce using rule 57 (constant -> STRING_CONST .)
    EQUAL           reduce using rule 57 (constant -> STRING_CONST .)
    DIFFERENT       reduce using rule 57 (constant -> STRING_CONST .)
    AND             reduce using rule 57 (constant -> STRING_CONST .)
    OR              reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN          reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN_TIMES    reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN_DIVIDE   reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN_MOD      reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN_PLUS     reduce using rule 57 (constant -> STRING_CONST .)
    ASSIGN_MINUS    reduce using rule 57 (constant -> STRING_CONST .)


state 31

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    PLUS_PLUS       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    MINUS_MINUS     reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    UPPERSAND       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    PLUS            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    MINUS           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    NOT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT_CONST       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT_CONST     reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    STRING_CONST    reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 32

    (12) postfix_expression -> postfix_expression PLUS_PLUS .

    PLUS_PLUS       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    VOID            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CHAR            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    INT             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FLOAT           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LPAREN          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    UPPERSAND       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    TIMES           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ID              reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    INT_CONST       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FLOAT_CONST     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STRING_CONST    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    $end            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER         reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER_EQUAL   reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER_EQUAL    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIFFERENT       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_TIMES    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_DIVIDE   reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_MOD      reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_PLUS     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_MINUS    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 33

    (13) postfix_expression -> postfix_expression MINUS_MINUS .

    PLUS_PLUS       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    VOID            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CHAR            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    INT             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FLOAT           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LPAREN          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    UPPERSAND       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    TIMES           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ID              reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    INT_CONST       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FLOAT_CONST     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STRING_CONST    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    $end            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MOD             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER         reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER_EQUAL   reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER_EQUAL    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIFFERENT       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_TIMES    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_DIVIDE   reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_MOD      reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_PLUS     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_MINUS    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 34

    (19) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (18) assignment_expression -> . binary_expression
    (19) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (26) unary_expression -> . postfix_expression
    (27) unary_expression -> . PLUS_PLUS unary_expression
    (28) unary_expression -> . MINUS_MINUS unary_expression
    (29) unary_expression -> . unary_operator cast_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (46) unary_operator -> . UPPERSAND
    (47) unary_operator -> . TIMES
    (48) unary_operator -> . PLUS
    (49) unary_operator -> . MINUS
    (50) unary_operator -> . NOT
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    LPAREN          shift and go to state 18
    UPPERSAND       shift and go to state 25
    TIMES           shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    NOT             shift and go to state 26
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    unary_expression               shift and go to state 60
    assignment_expression          shift and go to state 61
    binary_expression              shift and go to state 62
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 64
    unary_operator                 shift and go to state 19
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 35

    (20) assignment_operator -> ASSIGN .

    PLUS_PLUS       reduce using rule 20 (assignment_operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 20 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> ASSIGN .)
    UPPERSAND       reduce using rule 20 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 20 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 20 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> ASSIGN .)


state 36

    (21) assignment_operator -> ASSIGN_TIMES .

    PLUS_PLUS       reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    MINUS_MINUS     reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    LPAREN          reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    UPPERSAND       reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    TIMES           reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    PLUS            reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    MINUS           reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    NOT             reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    ID              reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    INT_CONST       reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> ASSIGN_TIMES .)


state 37

    (22) assignment_operator -> ASSIGN_DIVIDE .

    PLUS_PLUS       reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS_MINUS     reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    LPAREN          reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    UPPERSAND       reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    TIMES           reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    PLUS            reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS           reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    NOT             reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    ID              reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    INT_CONST       reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    FLOAT_CONST     reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)
    STRING_CONST    reduce using rule 22 (assignment_operator -> ASSIGN_DIVIDE .)


state 38

    (23) assignment_operator -> ASSIGN_MOD .

    PLUS_PLUS       reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    MINUS_MINUS     reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    LPAREN          reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    UPPERSAND       reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    TIMES           reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    PLUS            reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    MINUS           reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    NOT             reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    ID              reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    INT_CONST       reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    FLOAT_CONST     reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)
    STRING_CONST    reduce using rule 23 (assignment_operator -> ASSIGN_MOD .)


state 39

    (24) assignment_operator -> ASSIGN_PLUS .

    PLUS_PLUS       reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    MINUS_MINUS     reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    LPAREN          reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    UPPERSAND       reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    TIMES           reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    PLUS            reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    MINUS           reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    NOT             reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    ID              reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    INT_CONST       reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    FLOAT_CONST     reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)
    STRING_CONST    reduce using rule 24 (assignment_operator -> ASSIGN_PLUS .)


state 40

    (25) assignment_operator -> ASSIGN_MINUS .

    PLUS_PLUS       reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    MINUS_MINUS     reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    LPAREN          reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    UPPERSAND       reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    TIMES           reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    PLUS            reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    MINUS           reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    NOT             reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    ID              reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    INT_CONST       reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    FLOAT_CONST     reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)
    STRING_CONST    reduce using rule 25 (assignment_operator -> ASSIGN_MINUS .)


state 41

    (31) binary_expression -> binary_expression TIMES . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 65
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 42

    (32) binary_expression -> binary_expression DIVIDE . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 66
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 43

    (33) binary_expression -> binary_expression MOD . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 67
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 44

    (34) binary_expression -> binary_expression PLUS . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 68
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 45

    (35) binary_expression -> binary_expression MINUS . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 69
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 46

    (36) binary_expression -> binary_expression SMALLER . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 70
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 47

    (37) binary_expression -> binary_expression SMALLER_EQUAL . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 71
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 48

    (38) binary_expression -> binary_expression BIGGER . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 72
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 49

    (39) binary_expression -> binary_expression BIGGER_EQUAL . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 73
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 50

    (40) binary_expression -> binary_expression EQUAL . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 74
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 51

    (41) binary_expression -> binary_expression DIFFERENT . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 75
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 52

    (42) binary_expression -> binary_expression AND . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 76
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 53

    (43) binary_expression -> binary_expression OR . binary_expression
    (30) binary_expression -> . cast_expression
    (31) binary_expression -> . binary_expression TIMES binary_expression
    (32) binary_expression -> . binary_expression DIVIDE binary_expression
    (33) binary_expression -> . binary_expression MOD binary_expression
    (34) binary_expression -> . binary_expression PLUS binary_expression
    (35) binary_expression -> . binary_expression MINUS binary_expression
    (36) binary_expression -> . binary_expression SMALLER binary_expression
    (37) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (38) binary_expression -> . binary_expression BIGGER binary_expression
    (39) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (40) binary_expression -> . binary_expression EQUAL binary_expression
    (41) binary_expression -> . binary_expression DIFFERENT binary_expression
    (42) binary_expression -> . binary_expression AND binary_expression
    (43) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    binary_expression              shift and go to state 77
    cast_expression                shift and go to state 63
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 54

    (27) unary_expression -> PLUS_PLUS unary_expression .

    ASSIGN          reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_MOD      reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    VOID            reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    CHAR            reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    INT             reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    FLOAT           reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    LPAREN          reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS_PLUS       reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS_MINUS     reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    UPPERSAND       reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    TIMES           reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS            reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS           reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    NOT             reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    ID              reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    INT_CONST       reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    FLOAT_CONST     reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    STRING_CONST    reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)
    $end            reduce using rule 27 (unary_expression -> PLUS_PLUS unary_expression .)


state 55

    (26) unary_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    ASSIGN          reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 26 (unary_expression -> postfix_expression .)
    VOID            reduce using rule 26 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 26 (unary_expression -> postfix_expression .)
    INT             reduce using rule 26 (unary_expression -> postfix_expression .)
    FLOAT           reduce using rule 26 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 26 (unary_expression -> postfix_expression .)
    UPPERSAND       reduce using rule 26 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 26 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 26 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 26 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 26 (unary_expression -> postfix_expression .)
    ID              reduce using rule 26 (unary_expression -> postfix_expression .)
    INT_CONST       reduce using rule 26 (unary_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 26 (unary_expression -> postfix_expression .)
    STRING_CONST    reduce using rule 26 (unary_expression -> postfix_expression .)
    $end            reduce using rule 26 (unary_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 32
    MINUS_MINUS     shift and go to state 33

  ! PLUS_PLUS       [ reduce using rule 26 (unary_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 26 (unary_expression -> postfix_expression .) ]


state 56

    (28) unary_expression -> MINUS_MINUS unary_expression .

    ASSIGN          reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_MOD      reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    VOID            reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    CHAR            reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    INT             reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    FLOAT           reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    LPAREN          reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS_PLUS       reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS_MINUS     reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    UPPERSAND       reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    TIMES           reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS            reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS           reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    NOT             reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    ID              reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    INT_CONST       reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    FLOAT_CONST     reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    STRING_CONST    reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)
    $end            reduce using rule 28 (unary_expression -> MINUS_MINUS unary_expression .)


state 57

    (17) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 78


state 58

    (29) unary_expression -> unary_operator cast_expression .

    ASSIGN          reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_TIMES    reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MOD      reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_PLUS     reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MINUS    reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    VOID            reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    CHAR            reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    INT             reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    FLOAT           reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    PLUS_PLUS       reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    MINUS_MINUS     reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    UPPERSAND       reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    INT_CONST       reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    FLOAT_CONST     reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    STRING_CONST    reduce using rule 29 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 29 (unary_expression -> unary_operator cast_expression .)


state 59

    (16) cast_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    ASSIGN          reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 16 (cast_expression -> postfix_expression .)
    VOID            reduce using rule 16 (cast_expression -> postfix_expression .)
    CHAR            reduce using rule 16 (cast_expression -> postfix_expression .)
    INT             reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT           reduce using rule 16 (cast_expression -> postfix_expression .)
    LPAREN          reduce using rule 16 (cast_expression -> postfix_expression .)
    UPPERSAND       reduce using rule 16 (cast_expression -> postfix_expression .)
    TIMES           reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS            reduce using rule 16 (cast_expression -> postfix_expression .)
    MINUS           reduce using rule 16 (cast_expression -> postfix_expression .)
    NOT             reduce using rule 16 (cast_expression -> postfix_expression .)
    ID              reduce using rule 16 (cast_expression -> postfix_expression .)
    INT_CONST       reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 16 (cast_expression -> postfix_expression .)
    STRING_CONST    reduce using rule 16 (cast_expression -> postfix_expression .)
    $end            reduce using rule 16 (cast_expression -> postfix_expression .)
    DIVIDE          reduce using rule 16 (cast_expression -> postfix_expression .)
    MOD             reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER         reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER          reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 16 (cast_expression -> postfix_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> postfix_expression .)
    AND             reduce using rule 16 (cast_expression -> postfix_expression .)
    OR              reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 32
    MINUS_MINUS     shift and go to state 33

  ! PLUS_PLUS       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]


state 60

    (19) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (20) assignment_operator -> . ASSIGN
    (21) assignment_operator -> . ASSIGN_TIMES
    (22) assignment_operator -> . ASSIGN_DIVIDE
    (23) assignment_operator -> . ASSIGN_MOD
    (24) assignment_operator -> . ASSIGN_PLUS
    (25) assignment_operator -> . ASSIGN_MINUS

    ASSIGN          shift and go to state 35
    ASSIGN_TIMES    shift and go to state 36
    ASSIGN_DIVIDE   shift and go to state 37
    ASSIGN_MOD      shift and go to state 38
    ASSIGN_PLUS     shift and go to state 39
    ASSIGN_MINUS    shift and go to state 40

    assignment_operator            shift and go to state 34

state 61

    (19) assignment_expression -> unary_expression assignment_operator assignment_expression .

    VOID            reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CHAR            reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT             reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT           reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LPAREN          reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PLUS_PLUS       reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    MINUS_MINUS     reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    UPPERSAND       reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    TIMES           reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PLUS            reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    MINUS           reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    NOT             reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ID              reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT_CONST       reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT_CONST     reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STRING_CONST    reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    $end            reduce using rule 19 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 62

    (18) assignment_expression -> binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    VOID            reduce using rule 18 (assignment_expression -> binary_expression .)
    CHAR            reduce using rule 18 (assignment_expression -> binary_expression .)
    INT             reduce using rule 18 (assignment_expression -> binary_expression .)
    FLOAT           reduce using rule 18 (assignment_expression -> binary_expression .)
    LPAREN          reduce using rule 18 (assignment_expression -> binary_expression .)
    PLUS_PLUS       reduce using rule 18 (assignment_expression -> binary_expression .)
    MINUS_MINUS     reduce using rule 18 (assignment_expression -> binary_expression .)
    UPPERSAND       reduce using rule 18 (assignment_expression -> binary_expression .)
    NOT             reduce using rule 18 (assignment_expression -> binary_expression .)
    ID              reduce using rule 18 (assignment_expression -> binary_expression .)
    INT_CONST       reduce using rule 18 (assignment_expression -> binary_expression .)
    FLOAT_CONST     reduce using rule 18 (assignment_expression -> binary_expression .)
    STRING_CONST    reduce using rule 18 (assignment_expression -> binary_expression .)
    $end            reduce using rule 18 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49
    EQUAL           shift and go to state 50
    DIFFERENT       shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! TIMES           [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! PLUS            [ reduce using rule 18 (assignment_expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 18 (assignment_expression -> binary_expression .) ]


state 63

    (30) binary_expression -> cast_expression .

    TIMES           reduce using rule 30 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 30 (binary_expression -> cast_expression .)
    MOD             reduce using rule 30 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 30 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 30 (binary_expression -> cast_expression .)
    SMALLER         reduce using rule 30 (binary_expression -> cast_expression .)
    SMALLER_EQUAL   reduce using rule 30 (binary_expression -> cast_expression .)
    BIGGER          reduce using rule 30 (binary_expression -> cast_expression .)
    BIGGER_EQUAL    reduce using rule 30 (binary_expression -> cast_expression .)
    EQUAL           reduce using rule 30 (binary_expression -> cast_expression .)
    DIFFERENT       reduce using rule 30 (binary_expression -> cast_expression .)
    AND             reduce using rule 30 (binary_expression -> cast_expression .)
    OR              reduce using rule 30 (binary_expression -> cast_expression .)
    VOID            reduce using rule 30 (binary_expression -> cast_expression .)
    CHAR            reduce using rule 30 (binary_expression -> cast_expression .)
    INT             reduce using rule 30 (binary_expression -> cast_expression .)
    FLOAT           reduce using rule 30 (binary_expression -> cast_expression .)
    LPAREN          reduce using rule 30 (binary_expression -> cast_expression .)
    PLUS_PLUS       reduce using rule 30 (binary_expression -> cast_expression .)
    MINUS_MINUS     reduce using rule 30 (binary_expression -> cast_expression .)
    UPPERSAND       reduce using rule 30 (binary_expression -> cast_expression .)
    NOT             reduce using rule 30 (binary_expression -> cast_expression .)
    ID              reduce using rule 30 (binary_expression -> cast_expression .)
    INT_CONST       reduce using rule 30 (binary_expression -> cast_expression .)
    FLOAT_CONST     reduce using rule 30 (binary_expression -> cast_expression .)
    STRING_CONST    reduce using rule 30 (binary_expression -> cast_expression .)
    $end            reduce using rule 30 (binary_expression -> cast_expression .)


state 64

    (26) unary_expression -> postfix_expression .
    (16) cast_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    ASSIGN          reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 26 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 26 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIVIDE          reduce using rule 16 (cast_expression -> postfix_expression .)
    MOD             reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS            reduce using rule 16 (cast_expression -> postfix_expression .)
    MINUS           reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER         reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER          reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 16 (cast_expression -> postfix_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> postfix_expression .)
    AND             reduce using rule 16 (cast_expression -> postfix_expression .)
    OR              reduce using rule 16 (cast_expression -> postfix_expression .)
    VOID            reduce using rule 16 (cast_expression -> postfix_expression .)
    CHAR            reduce using rule 16 (cast_expression -> postfix_expression .)
    INT             reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT           reduce using rule 16 (cast_expression -> postfix_expression .)
    LPAREN          reduce using rule 16 (cast_expression -> postfix_expression .)
    UPPERSAND       reduce using rule 16 (cast_expression -> postfix_expression .)
    NOT             reduce using rule 16 (cast_expression -> postfix_expression .)
    ID              reduce using rule 16 (cast_expression -> postfix_expression .)
    INT_CONST       reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 16 (cast_expression -> postfix_expression .)
    STRING_CONST    reduce using rule 16 (cast_expression -> postfix_expression .)
    $end            reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 32
    MINUS_MINUS     shift and go to state 33

  ! PLUS_PLUS       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]


state 65

    (31) binary_expression -> binary_expression TIMES binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER         reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER_EQUAL   reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER          reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER_EQUAL    reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUAL           reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFFERENT       reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    VOID            reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    CHAR            reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    INT             reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    FLOAT           reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    LPAREN          reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS_PLUS       reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS_MINUS     reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    UPPERSAND       reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    NOT             reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    ID              reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    INT_CONST       reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    FLOAT_CONST     reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    STRING_CONST    reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)
    $end            reduce using rule 31 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 66

    (32) binary_expression -> binary_expression DIVIDE binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER         reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER_EQUAL   reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER_EQUAL    reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUAL           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFFERENT       reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    VOID            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    CHAR            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INT             reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FLOAT           reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LPAREN          reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS_PLUS       reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS_MINUS     reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    UPPERSAND       reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NOT             reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ID              reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INT_CONST       reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FLOAT_CONST     reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    STRING_CONST    reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)
    $end            reduce using rule 32 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 67

    (33) binary_expression -> binary_expression MOD binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER         reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER_EQUAL   reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER          reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER_EQUAL    reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    EQUAL           reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    DIFFERENT       reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    VOID            reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    CHAR            reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    INT             reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    FLOAT           reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    LPAREN          reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS_PLUS       reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS_MINUS     reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    UPPERSAND       reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    NOT             reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    ID              reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    INT_CONST       reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    FLOAT_CONST     reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    STRING_CONST    reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)
    $end            reduce using rule 33 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 68

    (34) binary_expression -> binary_expression PLUS binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER         reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER          reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUAL           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFFERENT       reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    VOID            reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    CHAR            reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    INT             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    FLOAT           reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    LPAREN          reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS_PLUS       reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS_MINUS     reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    UPPERSAND       reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    NOT             reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    ID              reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    INT_CONST       reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    FLOAT_CONST     reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    STRING_CONST    reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    $end            reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43

  ! TIMES           [ reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 34 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 69

    (35) binary_expression -> binary_expression MINUS binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER         reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER          reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUAL           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFFERENT       reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    VOID            reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    CHAR            reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    INT             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    FLOAT           reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    LPAREN          reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS_PLUS       reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS_MINUS     reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    UPPERSAND       reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    NOT             reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    ID              reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    INT_CONST       reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    FLOAT_CONST     reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    STRING_CONST    reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    $end            reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43

  ! TIMES           [ reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 35 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 70

    (36) binary_expression -> binary_expression SMALLER binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    SMALLER_EQUAL   reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER          reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER_EQUAL    reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    EQUAL           reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    DIFFERENT       reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    AND             reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    OR              reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    VOID            reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    CHAR            reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    INT             reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    FLOAT           reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    LPAREN          reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    PLUS_PLUS       reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    MINUS_MINUS     reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    UPPERSAND       reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    NOT             reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    ID              reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    INT_CONST       reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    FLOAT_CONST     reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    STRING_CONST    reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    $end            reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45

  ! TIMES           [ reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MOD             [ reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! PLUS            [ reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MINUS           [ reduce using rule 36 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 71

    (37) binary_expression -> binary_expression SMALLER_EQUAL binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER          reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    EQUAL           reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    AND             reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    OR              reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    VOID            reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    CHAR            reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    INT             reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    FLOAT           reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    LPAREN          reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    UPPERSAND       reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    NOT             reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ID              reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    INT_CONST       reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    STRING_CONST    reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    $end            reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45

  ! TIMES           [ reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 37 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 72

    (38) binary_expression -> binary_expression BIGGER binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    SMALLER_EQUAL   reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER          reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER_EQUAL    reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    EQUAL           reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    DIFFERENT       reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    AND             reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    OR              reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    VOID            reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    CHAR            reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    INT             reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    FLOAT           reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    LPAREN          reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    PLUS_PLUS       reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    MINUS_MINUS     reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    UPPERSAND       reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    NOT             reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    ID              reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    INT_CONST       reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    FLOAT_CONST     reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    STRING_CONST    reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    $end            reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45

  ! TIMES           [ reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MOD             [ reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! PLUS            [ reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MINUS           [ reduce using rule 38 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 73

    (39) binary_expression -> binary_expression BIGGER_EQUAL binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER          reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    EQUAL           reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    AND             reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    OR              reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    VOID            reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    CHAR            reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    INT             reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    FLOAT           reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    LPAREN          reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    UPPERSAND       reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    NOT             reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ID              reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    INT_CONST       reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    STRING_CONST    reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    $end            reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45

  ! TIMES           [ reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 39 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 46 ]
  ! SMALLER_EQUAL   [ shift and go to state 47 ]
  ! BIGGER          [ shift and go to state 48 ]
  ! BIGGER_EQUAL    [ shift and go to state 49 ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 74

    (40) binary_expression -> binary_expression EQUAL binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    DIFFERENT       reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    AND             reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    OR              reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    VOID            reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    CHAR            reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    INT             reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    FLOAT           reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    LPAREN          reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    UPPERSAND       reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    NOT             reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    ID              reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    INT_CONST       reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    STRING_CONST    reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    $end            reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49

  ! TIMES           [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER         [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER          [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 40 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 75

    (41) binary_expression -> binary_expression DIFFERENT binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    DIFFERENT       reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    AND             reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    OR              reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    VOID            reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    CHAR            reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    INT             reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    FLOAT           reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    LPAREN          reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    PLUS_PLUS       reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    MINUS_MINUS     reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    UPPERSAND       reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    NOT             reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ID              reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    INT_CONST       reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    FLOAT_CONST     reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    STRING_CONST    reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    $end            reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49

  ! TIMES           [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MOD             [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! PLUS            [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MINUS           [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER         [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER          [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 41 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! EQUAL           [ shift and go to state 50 ]
  ! DIFFERENT       [ shift and go to state 51 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 76

    (42) binary_expression -> binary_expression AND binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    VOID            reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    CHAR            reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    INT             reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    FLOAT           reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    LPAREN          reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    PLUS_PLUS       reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    MINUS_MINUS     reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    UPPERSAND       reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    NOT             reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    ID              reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    INT_CONST       reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    FLOAT_CONST     reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    STRING_CONST    reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    $end            reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49
    EQUAL           shift and go to state 50
    DIFFERENT       shift and go to state 51

  ! TIMES           [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER         [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER          [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUAL           [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 42 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]


state 77

    (43) binary_expression -> binary_expression OR binary_expression .
    (31) binary_expression -> binary_expression . TIMES binary_expression
    (32) binary_expression -> binary_expression . DIVIDE binary_expression
    (33) binary_expression -> binary_expression . MOD binary_expression
    (34) binary_expression -> binary_expression . PLUS binary_expression
    (35) binary_expression -> binary_expression . MINUS binary_expression
    (36) binary_expression -> binary_expression . SMALLER binary_expression
    (37) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (38) binary_expression -> binary_expression . BIGGER binary_expression
    (39) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (40) binary_expression -> binary_expression . EQUAL binary_expression
    (41) binary_expression -> binary_expression . DIFFERENT binary_expression
    (42) binary_expression -> binary_expression . AND binary_expression
    (43) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    VOID            reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    CHAR            reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    INT             reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    FLOAT           reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    LPAREN          reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    PLUS_PLUS       reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    MINUS_MINUS     reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    UPPERSAND       reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    NOT             reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    ID              reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    INT_CONST       reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    FLOAT_CONST     reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    STRING_CONST    reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    $end            reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    MOD             shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    SMALLER         shift and go to state 46
    SMALLER_EQUAL   shift and go to state 47
    BIGGER          shift and go to state 48
    BIGGER_EQUAL    shift and go to state 49
    EQUAL           shift and go to state 50
    DIFFERENT       shift and go to state 51
    AND             shift and go to state 52

  ! TIMES           [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER         [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER          [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUAL           [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 43 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 53 ]


state 78

    (17) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (45) identifier -> . ID
    (55) constant -> . INT_CONST
    (56) constant -> . FLOAT_CONST
    (57) constant -> . STRING_CONST

    LPAREN          shift and go to state 18
    ID              shift and go to state 27
    INT_CONST       shift and go to state 28
    FLOAT_CONST     shift and go to state 29
    STRING_CONST    shift and go to state 30

    cast_expression                shift and go to state 79
    postfix_expression             shift and go to state 59
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 23
    constant                       shift and go to state 24

state 79

    (17) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    VOID            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    CHAR            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INT             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FLOAT           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS_PLUS       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS_MINUS     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    UPPERSAND       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INT_CONST       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FLOAT_CONST     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    STRING_CONST    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    $end            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER         reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER_EQUAL   reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER_EQUAL    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUAL           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFFERENT       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_TIMES    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MOD      reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_PLUS     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MINUS    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 64 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_declaration -> postfix_expression)
WARNING: rejected rule (cast_expression -> postfix_expression) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_declaration -> postfix_expression)
WARNING: rejected rule (unary_expression -> postfix_expression) in state 4
WARNING: reduce/reduce conflict in state 7 resolved using rule (global_declaration -> cast_expression)
WARNING: rejected rule (binary_expression -> cast_expression) in state 7
WARNING: reduce/reduce conflict in state 9 resolved using rule (global_declaration -> binary_expression)
WARNING: rejected rule (assignment_expression -> binary_expression) in state 9
WARNING: reduce/reduce conflict in state 9 resolved using rule (global_declaration -> binary_expression)
WARNING: rejected rule (constant_expression -> binary_expression) in state 9
WARNING: Rule (constant_expression -> binary_expression) is never reduced
