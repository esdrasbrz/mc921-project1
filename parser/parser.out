Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSERT
    BREAK
    CCOMMENT
    COMMA
    ELSE
    FOR
    IF
    LBRACES
    LBRACKET
    NUMBER
    PRINT
    QUESTION
    RBRACES
    RBRACKET
    READ
    RETURN
    SEMI
    UCCCOMMENT
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> postfix_expression
Rule 5     global_declaration -> type_specifier
Rule 6     global_declaration -> assignment_operator
Rule 7     global_declaration -> cast_expression
Rule 8     global_declaration -> unary_expression
Rule 9     global_declaration -> binary_expression
Rule 10    global_declaration -> constant_expression
Rule 11    postfix_expression -> primary_expression
Rule 12    postfix_expression -> postfix_expression PLUS_PLUS
Rule 13    postfix_expression -> postfix_expression MINUS_MINUS
Rule 14    primary_expression -> identifier
Rule 15    primary_expression -> constant
Rule 16    cast_expression -> postfix_expression
Rule 17    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 18    unary_expression -> postfix_expression
Rule 19    unary_expression -> PLUS_PLUS unary_expression
Rule 20    unary_expression -> MINUS_MINUS unary_expression
Rule 21    unary_expression -> unary_operator cast_expression
Rule 22    binary_expression -> cast_expression
Rule 23    binary_expression -> binary_expression TIMES binary_expression
Rule 24    binary_expression -> binary_expression DIVIDE binary_expression
Rule 25    binary_expression -> binary_expression MOD binary_expression
Rule 26    binary_expression -> binary_expression PLUS binary_expression
Rule 27    binary_expression -> binary_expression MINUS binary_expression
Rule 28    binary_expression -> binary_expression SMALLER binary_expression
Rule 29    binary_expression -> binary_expression SMALLER_EQUAL binary_expression
Rule 30    binary_expression -> binary_expression BIGGER binary_expression
Rule 31    binary_expression -> binary_expression BIGGER_EQUAL binary_expression
Rule 32    binary_expression -> binary_expression EQUAL binary_expression
Rule 33    binary_expression -> binary_expression DIFFERENT binary_expression
Rule 34    binary_expression -> binary_expression AND binary_expression
Rule 35    binary_expression -> binary_expression OR binary_expression
Rule 36    constant_expression -> binary_expression
Rule 37    identifier -> ID
Rule 38    unary_operator -> UPPERSAND
Rule 39    unary_operator -> TIMES
Rule 40    unary_operator -> PLUS
Rule 41    unary_operator -> MINUS
Rule 42    unary_operator -> NOT
Rule 43    type_specifier -> VOID
Rule 44    type_specifier -> CHAR
Rule 45    type_specifier -> INT
Rule 46    type_specifier -> FLOAT
Rule 47    assignment_operator -> ASSIGN
Rule 48    assignment_operator -> ASSIGN_TIMES
Rule 49    assignment_operator -> ASSIGN_DIVIDE
Rule 50    assignment_operator -> ASSIGN_REMAINDER
Rule 51    assignment_operator -> ASSIGN_PLUS
Rule 52    assignment_operator -> ASSIGN_MINUS
Rule 53    constant -> INT_CONST
Rule 54    constant -> FLOAT_CONST
Rule 55    constant -> STRING_CONST

Terminals, with rules where they appear

AND                  : 34
ASSERT               : 
ASSIGN               : 47
ASSIGN_DIVIDE        : 49
ASSIGN_MINUS         : 52
ASSIGN_PLUS          : 51
ASSIGN_REMAINDER     : 50
ASSIGN_TIMES         : 48
BIGGER               : 30
BIGGER_EQUAL         : 31
BREAK                : 
CCOMMENT             : 
CHAR                 : 44
COMMA                : 
DIFFERENT            : 33
DIVIDE               : 24
ELSE                 : 
EQUAL                : 32
FLOAT                : 46
FLOAT_CONST          : 54
FOR                  : 
ID                   : 37
IF                   : 
INT                  : 45
INT_CONST            : 53
LBRACES              : 
LBRACKET             : 
LPAREN               : 17
MINUS                : 27 41
MINUS_MINUS          : 13 20
MOD                  : 25
NOT                  : 42
NUMBER               : 
OR                   : 35
PLUS                 : 26 40
PLUS_PLUS            : 12 19
PRINT                : 
QUESTION             : 
RBRACES              : 
RBRACKET             : 
READ                 : 
RETURN               : 
RPAREN               : 17
SEMI                 : 
SMALLER              : 28
SMALLER_EQUAL        : 29
STRING_CONST         : 55
TIMES                : 23 39
UCCCOMMENT           : 
UPPERSAND            : 38
VOID                 : 43
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment_operator  : 6
binary_expression    : 9 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36
cast_expression      : 7 17 21 22
constant             : 15
constant_expression  : 10
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 14
postfix_expression   : 4 12 13 16 18
primary_expression   : 11
program              : 0
type_specifier       : 5 17
unary_expression     : 8 19 20
unary_operator       : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . postfix_expression
    (5) global_declaration -> . type_specifier
    (6) global_declaration -> . assignment_operator
    (7) global_declaration -> . cast_expression
    (8) global_declaration -> . unary_expression
    (9) global_declaration -> . binary_expression
    (10) global_declaration -> . constant_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) type_specifier -> . VOID
    (44) type_specifier -> . CHAR
    (45) type_specifier -> . INT
    (46) type_specifier -> . FLOAT
    (47) assignment_operator -> . ASSIGN
    (48) assignment_operator -> . ASSIGN_TIMES
    (49) assignment_operator -> . ASSIGN_DIVIDE
    (50) assignment_operator -> . ASSIGN_REMAINDER
    (51) assignment_operator -> . ASSIGN_PLUS
    (52) assignment_operator -> . ASSIGN_MINUS
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . PLUS_PLUS unary_expression
    (20) unary_expression -> . MINUS_MINUS unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) constant_expression -> . binary_expression
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (38) unary_operator -> . UPPERSAND
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    ASSIGN          shift and go to state 18
    ASSIGN_TIMES    shift and go to state 19
    ASSIGN_DIVIDE   shift and go to state 20
    ASSIGN_REMAINDER shift and go to state 21
    ASSIGN_PLUS     shift and go to state 22
    ASSIGN_MINUS    shift and go to state 23
    LPAREN          shift and go to state 24
    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 31
    TIMES           shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 32
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    postfix_expression             shift and go to state 4
    type_specifier                 shift and go to state 5
    assignment_operator            shift and go to state 6
    cast_expression                shift and go to state 7
    unary_expression               shift and go to state 8
    binary_expression              shift and go to state 9
    constant_expression            shift and go to state 10
    primary_expression             shift and go to state 11
    unary_operator                 shift and go to state 25
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . postfix_expression
    (5) global_declaration -> . type_specifier
    (6) global_declaration -> . assignment_operator
    (7) global_declaration -> . cast_expression
    (8) global_declaration -> . unary_expression
    (9) global_declaration -> . binary_expression
    (10) global_declaration -> . constant_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) type_specifier -> . VOID
    (44) type_specifier -> . CHAR
    (45) type_specifier -> . INT
    (46) type_specifier -> . FLOAT
    (47) assignment_operator -> . ASSIGN
    (48) assignment_operator -> . ASSIGN_TIMES
    (49) assignment_operator -> . ASSIGN_DIVIDE
    (50) assignment_operator -> . ASSIGN_REMAINDER
    (51) assignment_operator -> . ASSIGN_PLUS
    (52) assignment_operator -> . ASSIGN_MINUS
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . PLUS_PLUS unary_expression
    (20) unary_expression -> . MINUS_MINUS unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (36) constant_expression -> . binary_expression
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (38) unary_operator -> . UPPERSAND
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    ASSIGN          shift and go to state 18
    ASSIGN_TIMES    shift and go to state 19
    ASSIGN_DIVIDE   shift and go to state 20
    ASSIGN_REMAINDER shift and go to state 21
    ASSIGN_PLUS     shift and go to state 22
    ASSIGN_MINUS    shift and go to state 23
    LPAREN          shift and go to state 24
    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 31
    TIMES           shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 32
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    global_declaration             shift and go to state 37
    postfix_expression             shift and go to state 4
    type_specifier                 shift and go to state 5
    assignment_operator            shift and go to state 6
    cast_expression                shift and go to state 7
    unary_expression               shift and go to state 8
    binary_expression              shift and go to state 9
    constant_expression            shift and go to state 10
    primary_expression             shift and go to state 11
    unary_operator                 shift and go to state 25
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN_TIMES    reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN_DIVIDE   reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN_REMAINDER reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN_PLUS     reduce using rule 2 (global_declaration_list -> global_declaration .)
    ASSIGN_MINUS    reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    PLUS_PLUS       reduce using rule 2 (global_declaration_list -> global_declaration .)
    MINUS_MINUS     reduce using rule 2 (global_declaration_list -> global_declaration .)
    UPPERSAND       reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    PLUS            reduce using rule 2 (global_declaration_list -> global_declaration .)
    MINUS           reduce using rule 2 (global_declaration_list -> global_declaration .)
    NOT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT_CONST       reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT_CONST     reduce using rule 2 (global_declaration_list -> global_declaration .)
    STRING_CONST    reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS
    (16) cast_expression -> postfix_expression .
    (18) unary_expression -> postfix_expression .

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for VOID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_DIVIDE resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_REMAINDER resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for UPPERSAND resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for $end resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for VOID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_DIVIDE resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_REMAINDER resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ASSIGN_MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (global_declaration -> postfix_expression .)
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! reduce/reduce conflict for UPPERSAND resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for ID resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 4 (global_declaration -> postfix_expression .)
  ! reduce/reduce conflict for $end resolved using rule 4 (global_declaration -> postfix_expression .)
    VOID            reduce using rule 4 (global_declaration -> postfix_expression .)
    CHAR            reduce using rule 4 (global_declaration -> postfix_expression .)
    INT             reduce using rule 4 (global_declaration -> postfix_expression .)
    FLOAT           reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN          reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN_REMAINDER reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 4 (global_declaration -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 4 (global_declaration -> postfix_expression .)
    LPAREN          reduce using rule 4 (global_declaration -> postfix_expression .)
    UPPERSAND       reduce using rule 4 (global_declaration -> postfix_expression .)
    TIMES           reduce using rule 4 (global_declaration -> postfix_expression .)
    PLUS            reduce using rule 4 (global_declaration -> postfix_expression .)
    MINUS           reduce using rule 4 (global_declaration -> postfix_expression .)
    NOT             reduce using rule 4 (global_declaration -> postfix_expression .)
    ID              reduce using rule 4 (global_declaration -> postfix_expression .)
    INT_CONST       reduce using rule 4 (global_declaration -> postfix_expression .)
    FLOAT_CONST     reduce using rule 4 (global_declaration -> postfix_expression .)
    STRING_CONST    reduce using rule 4 (global_declaration -> postfix_expression .)
    $end            reduce using rule 4 (global_declaration -> postfix_expression .)
    PLUS_PLUS       shift and go to state 38
    MINUS_MINUS     shift and go to state 39
    DIVIDE          reduce using rule 16 (cast_expression -> postfix_expression .)
    MOD             reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER         reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER          reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 16 (cast_expression -> postfix_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> postfix_expression .)
    AND             reduce using rule 16 (cast_expression -> postfix_expression .)
    OR              reduce using rule 16 (cast_expression -> postfix_expression .)

  ! PLUS_PLUS       [ reduce using rule 4 (global_declaration -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 4 (global_declaration -> postfix_expression .) ]
  ! VOID            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! CHAR            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! INT             [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! FLOAT           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN          [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN_TIMES    [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN_DIVIDE   [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN_REMAINDER [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN_PLUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ASSIGN_MINUS    [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! UPPERSAND       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! TIMES           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! PLUS            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS           [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! NOT             [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! ID              [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! INT_CONST       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! STRING_CONST    [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! $end            [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! VOID            [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! CHAR            [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! INT             [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! FLOAT           [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN          [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN_TIMES    [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN_DIVIDE   [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN_REMAINDER [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN_PLUS     [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ASSIGN_MINUS    [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! UPPERSAND       [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! TIMES           [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! PLUS            [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! MINUS           [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! NOT             [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! ID              [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! INT_CONST       [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! STRING_CONST    [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! $end            [ reduce using rule 18 (unary_expression -> postfix_expression .) ]


state 5

    (5) global_declaration -> type_specifier .

    VOID            reduce using rule 5 (global_declaration -> type_specifier .)
    CHAR            reduce using rule 5 (global_declaration -> type_specifier .)
    INT             reduce using rule 5 (global_declaration -> type_specifier .)
    FLOAT           reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN          reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN_TIMES    reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN_DIVIDE   reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN_REMAINDER reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN_PLUS     reduce using rule 5 (global_declaration -> type_specifier .)
    ASSIGN_MINUS    reduce using rule 5 (global_declaration -> type_specifier .)
    LPAREN          reduce using rule 5 (global_declaration -> type_specifier .)
    PLUS_PLUS       reduce using rule 5 (global_declaration -> type_specifier .)
    MINUS_MINUS     reduce using rule 5 (global_declaration -> type_specifier .)
    UPPERSAND       reduce using rule 5 (global_declaration -> type_specifier .)
    TIMES           reduce using rule 5 (global_declaration -> type_specifier .)
    PLUS            reduce using rule 5 (global_declaration -> type_specifier .)
    MINUS           reduce using rule 5 (global_declaration -> type_specifier .)
    NOT             reduce using rule 5 (global_declaration -> type_specifier .)
    ID              reduce using rule 5 (global_declaration -> type_specifier .)
    INT_CONST       reduce using rule 5 (global_declaration -> type_specifier .)
    FLOAT_CONST     reduce using rule 5 (global_declaration -> type_specifier .)
    STRING_CONST    reduce using rule 5 (global_declaration -> type_specifier .)
    $end            reduce using rule 5 (global_declaration -> type_specifier .)


state 6

    (6) global_declaration -> assignment_operator .

    VOID            reduce using rule 6 (global_declaration -> assignment_operator .)
    CHAR            reduce using rule 6 (global_declaration -> assignment_operator .)
    INT             reduce using rule 6 (global_declaration -> assignment_operator .)
    FLOAT           reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN          reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN_TIMES    reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN_DIVIDE   reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN_REMAINDER reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN_PLUS     reduce using rule 6 (global_declaration -> assignment_operator .)
    ASSIGN_MINUS    reduce using rule 6 (global_declaration -> assignment_operator .)
    LPAREN          reduce using rule 6 (global_declaration -> assignment_operator .)
    PLUS_PLUS       reduce using rule 6 (global_declaration -> assignment_operator .)
    MINUS_MINUS     reduce using rule 6 (global_declaration -> assignment_operator .)
    UPPERSAND       reduce using rule 6 (global_declaration -> assignment_operator .)
    TIMES           reduce using rule 6 (global_declaration -> assignment_operator .)
    PLUS            reduce using rule 6 (global_declaration -> assignment_operator .)
    MINUS           reduce using rule 6 (global_declaration -> assignment_operator .)
    NOT             reduce using rule 6 (global_declaration -> assignment_operator .)
    ID              reduce using rule 6 (global_declaration -> assignment_operator .)
    INT_CONST       reduce using rule 6 (global_declaration -> assignment_operator .)
    FLOAT_CONST     reduce using rule 6 (global_declaration -> assignment_operator .)
    STRING_CONST    reduce using rule 6 (global_declaration -> assignment_operator .)
    $end            reduce using rule 6 (global_declaration -> assignment_operator .)


state 7

    (7) global_declaration -> cast_expression .
    (22) binary_expression -> cast_expression .

  ! reduce/reduce conflict for TIMES resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for VOID resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for INT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN_TIMES resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN_DIVIDE resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN_REMAINDER resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN_PLUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ASSIGN_MINUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for UPPERSAND resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for ID resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 7 (global_declaration -> cast_expression .)
  ! reduce/reduce conflict for $end resolved using rule 7 (global_declaration -> cast_expression .)
    VOID            reduce using rule 7 (global_declaration -> cast_expression .)
    CHAR            reduce using rule 7 (global_declaration -> cast_expression .)
    INT             reduce using rule 7 (global_declaration -> cast_expression .)
    FLOAT           reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN          reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN_TIMES    reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN_REMAINDER reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN_PLUS     reduce using rule 7 (global_declaration -> cast_expression .)
    ASSIGN_MINUS    reduce using rule 7 (global_declaration -> cast_expression .)
    LPAREN          reduce using rule 7 (global_declaration -> cast_expression .)
    PLUS_PLUS       reduce using rule 7 (global_declaration -> cast_expression .)
    MINUS_MINUS     reduce using rule 7 (global_declaration -> cast_expression .)
    UPPERSAND       reduce using rule 7 (global_declaration -> cast_expression .)
    TIMES           reduce using rule 7 (global_declaration -> cast_expression .)
    PLUS            reduce using rule 7 (global_declaration -> cast_expression .)
    MINUS           reduce using rule 7 (global_declaration -> cast_expression .)
    NOT             reduce using rule 7 (global_declaration -> cast_expression .)
    ID              reduce using rule 7 (global_declaration -> cast_expression .)
    INT_CONST       reduce using rule 7 (global_declaration -> cast_expression .)
    FLOAT_CONST     reduce using rule 7 (global_declaration -> cast_expression .)
    STRING_CONST    reduce using rule 7 (global_declaration -> cast_expression .)
    $end            reduce using rule 7 (global_declaration -> cast_expression .)
    DIVIDE          reduce using rule 22 (binary_expression -> cast_expression .)
    MOD             reduce using rule 22 (binary_expression -> cast_expression .)
    SMALLER         reduce using rule 22 (binary_expression -> cast_expression .)
    SMALLER_EQUAL   reduce using rule 22 (binary_expression -> cast_expression .)
    BIGGER          reduce using rule 22 (binary_expression -> cast_expression .)
    BIGGER_EQUAL    reduce using rule 22 (binary_expression -> cast_expression .)
    EQUAL           reduce using rule 22 (binary_expression -> cast_expression .)
    DIFFERENT       reduce using rule 22 (binary_expression -> cast_expression .)
    AND             reduce using rule 22 (binary_expression -> cast_expression .)
    OR              reduce using rule 22 (binary_expression -> cast_expression .)

  ! TIMES           [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! PLUS            [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! MINUS           [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! VOID            [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! CHAR            [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! INT             [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! FLOAT           [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN          [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN_TIMES    [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN_DIVIDE   [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN_REMAINDER [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN_PLUS     [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ASSIGN_MINUS    [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! LPAREN          [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! UPPERSAND       [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! NOT             [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! ID              [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! INT_CONST       [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! STRING_CONST    [ reduce using rule 22 (binary_expression -> cast_expression .) ]
  ! $end            [ reduce using rule 22 (binary_expression -> cast_expression .) ]


state 8

    (8) global_declaration -> unary_expression .

    VOID            reduce using rule 8 (global_declaration -> unary_expression .)
    CHAR            reduce using rule 8 (global_declaration -> unary_expression .)
    INT             reduce using rule 8 (global_declaration -> unary_expression .)
    FLOAT           reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN          reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN_TIMES    reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN_REMAINDER reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN_PLUS     reduce using rule 8 (global_declaration -> unary_expression .)
    ASSIGN_MINUS    reduce using rule 8 (global_declaration -> unary_expression .)
    LPAREN          reduce using rule 8 (global_declaration -> unary_expression .)
    PLUS_PLUS       reduce using rule 8 (global_declaration -> unary_expression .)
    MINUS_MINUS     reduce using rule 8 (global_declaration -> unary_expression .)
    UPPERSAND       reduce using rule 8 (global_declaration -> unary_expression .)
    TIMES           reduce using rule 8 (global_declaration -> unary_expression .)
    PLUS            reduce using rule 8 (global_declaration -> unary_expression .)
    MINUS           reduce using rule 8 (global_declaration -> unary_expression .)
    NOT             reduce using rule 8 (global_declaration -> unary_expression .)
    ID              reduce using rule 8 (global_declaration -> unary_expression .)
    INT_CONST       reduce using rule 8 (global_declaration -> unary_expression .)
    FLOAT_CONST     reduce using rule 8 (global_declaration -> unary_expression .)
    STRING_CONST    reduce using rule 8 (global_declaration -> unary_expression .)
    $end            reduce using rule 8 (global_declaration -> unary_expression .)


state 9

    (9) global_declaration -> binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression
    (36) constant_expression -> binary_expression .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for VOID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN_TIMES resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN_DIVIDE resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN_REMAINDER resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN_PLUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ASSIGN_MINUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for UPPERSAND resolved using rule 9 (global_declaration -> binary_expression .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for NOT resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for STRING_CONST resolved using rule 9 (global_declaration -> binary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 9 (global_declaration -> binary_expression .)
    VOID            reduce using rule 9 (global_declaration -> binary_expression .)
    CHAR            reduce using rule 9 (global_declaration -> binary_expression .)
    INT             reduce using rule 9 (global_declaration -> binary_expression .)
    FLOAT           reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN          reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN_TIMES    reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN_REMAINDER reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN_PLUS     reduce using rule 9 (global_declaration -> binary_expression .)
    ASSIGN_MINUS    reduce using rule 9 (global_declaration -> binary_expression .)
    LPAREN          reduce using rule 9 (global_declaration -> binary_expression .)
    PLUS_PLUS       reduce using rule 9 (global_declaration -> binary_expression .)
    MINUS_MINUS     reduce using rule 9 (global_declaration -> binary_expression .)
    UPPERSAND       reduce using rule 9 (global_declaration -> binary_expression .)
    NOT             reduce using rule 9 (global_declaration -> binary_expression .)
    ID              reduce using rule 9 (global_declaration -> binary_expression .)
    INT_CONST       reduce using rule 9 (global_declaration -> binary_expression .)
    FLOAT_CONST     reduce using rule 9 (global_declaration -> binary_expression .)
    STRING_CONST    reduce using rule 9 (global_declaration -> binary_expression .)
    $end            reduce using rule 9 (global_declaration -> binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    SMALLER         shift and go to state 45
    SMALLER_EQUAL   shift and go to state 46
    BIGGER          shift and go to state 47
    BIGGER_EQUAL    shift and go to state 48
    EQUAL           shift and go to state 49
    DIFFERENT       shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52

  ! TIMES           [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! PLUS            [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! MINUS           [ reduce using rule 9 (global_declaration -> binary_expression .) ]
  ! VOID            [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! CHAR            [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! INT             [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! FLOAT           [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN          [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN_TIMES    [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN_DIVIDE   [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN_REMAINDER [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN_PLUS     [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ASSIGN_MINUS    [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! LPAREN          [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! UPPERSAND       [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! TIMES           [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! PLUS            [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! MINUS           [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! NOT             [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! ID              [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! INT_CONST       [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! FLOAT_CONST     [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! STRING_CONST    [ reduce using rule 36 (constant_expression -> binary_expression .) ]
  ! $end            [ reduce using rule 36 (constant_expression -> binary_expression .) ]


state 10

    (10) global_declaration -> constant_expression .

    VOID            reduce using rule 10 (global_declaration -> constant_expression .)
    CHAR            reduce using rule 10 (global_declaration -> constant_expression .)
    INT             reduce using rule 10 (global_declaration -> constant_expression .)
    FLOAT           reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN          reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN_TIMES    reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN_DIVIDE   reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN_REMAINDER reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN_PLUS     reduce using rule 10 (global_declaration -> constant_expression .)
    ASSIGN_MINUS    reduce using rule 10 (global_declaration -> constant_expression .)
    LPAREN          reduce using rule 10 (global_declaration -> constant_expression .)
    PLUS_PLUS       reduce using rule 10 (global_declaration -> constant_expression .)
    MINUS_MINUS     reduce using rule 10 (global_declaration -> constant_expression .)
    UPPERSAND       reduce using rule 10 (global_declaration -> constant_expression .)
    TIMES           reduce using rule 10 (global_declaration -> constant_expression .)
    PLUS            reduce using rule 10 (global_declaration -> constant_expression .)
    MINUS           reduce using rule 10 (global_declaration -> constant_expression .)
    NOT             reduce using rule 10 (global_declaration -> constant_expression .)
    ID              reduce using rule 10 (global_declaration -> constant_expression .)
    INT_CONST       reduce using rule 10 (global_declaration -> constant_expression .)
    FLOAT_CONST     reduce using rule 10 (global_declaration -> constant_expression .)
    STRING_CONST    reduce using rule 10 (global_declaration -> constant_expression .)
    $end            reduce using rule 10 (global_declaration -> constant_expression .)


state 11

    (11) postfix_expression -> primary_expression .

    PLUS_PLUS       reduce using rule 11 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 11 (postfix_expression -> primary_expression .)
    VOID            reduce using rule 11 (postfix_expression -> primary_expression .)
    CHAR            reduce using rule 11 (postfix_expression -> primary_expression .)
    INT             reduce using rule 11 (postfix_expression -> primary_expression .)
    FLOAT           reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_TIMES    reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_DIVIDE   reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_REMAINDER reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_PLUS     reduce using rule 11 (postfix_expression -> primary_expression .)
    ASSIGN_MINUS    reduce using rule 11 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 11 (postfix_expression -> primary_expression .)
    UPPERSAND       reduce using rule 11 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 11 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 11 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 11 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 11 (postfix_expression -> primary_expression .)
    ID              reduce using rule 11 (postfix_expression -> primary_expression .)
    INT_CONST       reduce using rule 11 (postfix_expression -> primary_expression .)
    FLOAT_CONST     reduce using rule 11 (postfix_expression -> primary_expression .)
    STRING_CONST    reduce using rule 11 (postfix_expression -> primary_expression .)
    $end            reduce using rule 11 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 11 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 11 (postfix_expression -> primary_expression .)
    SMALLER         reduce using rule 11 (postfix_expression -> primary_expression .)
    SMALLER_EQUAL   reduce using rule 11 (postfix_expression -> primary_expression .)
    BIGGER          reduce using rule 11 (postfix_expression -> primary_expression .)
    BIGGER_EQUAL    reduce using rule 11 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 11 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 11 (postfix_expression -> primary_expression .)
    AND             reduce using rule 11 (postfix_expression -> primary_expression .)
    OR              reduce using rule 11 (postfix_expression -> primary_expression .)


state 12

    (19) unary_expression -> PLUS_PLUS . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . PLUS_PLUS unary_expression
    (20) unary_expression -> . MINUS_MINUS unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) unary_operator -> . UPPERSAND
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 31
    TIMES           shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 32
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    unary_expression               shift and go to state 53
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 13

    (20) unary_expression -> MINUS_MINUS . unary_expression
    (18) unary_expression -> . postfix_expression
    (19) unary_expression -> . PLUS_PLUS unary_expression
    (20) unary_expression -> . MINUS_MINUS unary_expression
    (21) unary_expression -> . unary_operator cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (38) unary_operator -> . UPPERSAND
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    PLUS_PLUS       shift and go to state 12
    MINUS_MINUS     shift and go to state 13
    UPPERSAND       shift and go to state 31
    TIMES           shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 32
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    unary_expression               shift and go to state 55
    postfix_expression             shift and go to state 54
    unary_operator                 shift and go to state 25
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 14

    (43) type_specifier -> VOID .

    VOID            reduce using rule 43 (type_specifier -> VOID .)
    CHAR            reduce using rule 43 (type_specifier -> VOID .)
    INT             reduce using rule 43 (type_specifier -> VOID .)
    FLOAT           reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN          reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN_TIMES    reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN_DIVIDE   reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN_REMAINDER reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN_PLUS     reduce using rule 43 (type_specifier -> VOID .)
    ASSIGN_MINUS    reduce using rule 43 (type_specifier -> VOID .)
    LPAREN          reduce using rule 43 (type_specifier -> VOID .)
    PLUS_PLUS       reduce using rule 43 (type_specifier -> VOID .)
    MINUS_MINUS     reduce using rule 43 (type_specifier -> VOID .)
    UPPERSAND       reduce using rule 43 (type_specifier -> VOID .)
    TIMES           reduce using rule 43 (type_specifier -> VOID .)
    PLUS            reduce using rule 43 (type_specifier -> VOID .)
    MINUS           reduce using rule 43 (type_specifier -> VOID .)
    NOT             reduce using rule 43 (type_specifier -> VOID .)
    ID              reduce using rule 43 (type_specifier -> VOID .)
    INT_CONST       reduce using rule 43 (type_specifier -> VOID .)
    FLOAT_CONST     reduce using rule 43 (type_specifier -> VOID .)
    STRING_CONST    reduce using rule 43 (type_specifier -> VOID .)
    $end            reduce using rule 43 (type_specifier -> VOID .)
    RPAREN          reduce using rule 43 (type_specifier -> VOID .)


state 15

    (44) type_specifier -> CHAR .

    VOID            reduce using rule 44 (type_specifier -> CHAR .)
    CHAR            reduce using rule 44 (type_specifier -> CHAR .)
    INT             reduce using rule 44 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN          reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN_TIMES    reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN_DIVIDE   reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN_REMAINDER reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN_PLUS     reduce using rule 44 (type_specifier -> CHAR .)
    ASSIGN_MINUS    reduce using rule 44 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 44 (type_specifier -> CHAR .)
    PLUS_PLUS       reduce using rule 44 (type_specifier -> CHAR .)
    MINUS_MINUS     reduce using rule 44 (type_specifier -> CHAR .)
    UPPERSAND       reduce using rule 44 (type_specifier -> CHAR .)
    TIMES           reduce using rule 44 (type_specifier -> CHAR .)
    PLUS            reduce using rule 44 (type_specifier -> CHAR .)
    MINUS           reduce using rule 44 (type_specifier -> CHAR .)
    NOT             reduce using rule 44 (type_specifier -> CHAR .)
    ID              reduce using rule 44 (type_specifier -> CHAR .)
    INT_CONST       reduce using rule 44 (type_specifier -> CHAR .)
    FLOAT_CONST     reduce using rule 44 (type_specifier -> CHAR .)
    STRING_CONST    reduce using rule 44 (type_specifier -> CHAR .)
    $end            reduce using rule 44 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 44 (type_specifier -> CHAR .)


state 16

    (45) type_specifier -> INT .

    VOID            reduce using rule 45 (type_specifier -> INT .)
    CHAR            reduce using rule 45 (type_specifier -> INT .)
    INT             reduce using rule 45 (type_specifier -> INT .)
    FLOAT           reduce using rule 45 (type_specifier -> INT .)
    ASSIGN          reduce using rule 45 (type_specifier -> INT .)
    ASSIGN_TIMES    reduce using rule 45 (type_specifier -> INT .)
    ASSIGN_DIVIDE   reduce using rule 45 (type_specifier -> INT .)
    ASSIGN_REMAINDER reduce using rule 45 (type_specifier -> INT .)
    ASSIGN_PLUS     reduce using rule 45 (type_specifier -> INT .)
    ASSIGN_MINUS    reduce using rule 45 (type_specifier -> INT .)
    LPAREN          reduce using rule 45 (type_specifier -> INT .)
    PLUS_PLUS       reduce using rule 45 (type_specifier -> INT .)
    MINUS_MINUS     reduce using rule 45 (type_specifier -> INT .)
    UPPERSAND       reduce using rule 45 (type_specifier -> INT .)
    TIMES           reduce using rule 45 (type_specifier -> INT .)
    PLUS            reduce using rule 45 (type_specifier -> INT .)
    MINUS           reduce using rule 45 (type_specifier -> INT .)
    NOT             reduce using rule 45 (type_specifier -> INT .)
    ID              reduce using rule 45 (type_specifier -> INT .)
    INT_CONST       reduce using rule 45 (type_specifier -> INT .)
    FLOAT_CONST     reduce using rule 45 (type_specifier -> INT .)
    STRING_CONST    reduce using rule 45 (type_specifier -> INT .)
    $end            reduce using rule 45 (type_specifier -> INT .)
    RPAREN          reduce using rule 45 (type_specifier -> INT .)


state 17

    (46) type_specifier -> FLOAT .

    VOID            reduce using rule 46 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 46 (type_specifier -> FLOAT .)
    INT             reduce using rule 46 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN          reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN_TIMES    reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN_DIVIDE   reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN_REMAINDER reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN_PLUS     reduce using rule 46 (type_specifier -> FLOAT .)
    ASSIGN_MINUS    reduce using rule 46 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 46 (type_specifier -> FLOAT .)
    PLUS_PLUS       reduce using rule 46 (type_specifier -> FLOAT .)
    MINUS_MINUS     reduce using rule 46 (type_specifier -> FLOAT .)
    UPPERSAND       reduce using rule 46 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 46 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 46 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 46 (type_specifier -> FLOAT .)
    NOT             reduce using rule 46 (type_specifier -> FLOAT .)
    ID              reduce using rule 46 (type_specifier -> FLOAT .)
    INT_CONST       reduce using rule 46 (type_specifier -> FLOAT .)
    FLOAT_CONST     reduce using rule 46 (type_specifier -> FLOAT .)
    STRING_CONST    reduce using rule 46 (type_specifier -> FLOAT .)
    $end            reduce using rule 46 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 46 (type_specifier -> FLOAT .)


state 18

    (47) assignment_operator -> ASSIGN .

    VOID            reduce using rule 47 (assignment_operator -> ASSIGN .)
    CHAR            reduce using rule 47 (assignment_operator -> ASSIGN .)
    INT             reduce using rule 47 (assignment_operator -> ASSIGN .)
    FLOAT           reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN          reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN_TIMES    reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN_DIVIDE   reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN_REMAINDER reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN_PLUS     reduce using rule 47 (assignment_operator -> ASSIGN .)
    ASSIGN_MINUS    reduce using rule 47 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 47 (assignment_operator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 47 (assignment_operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 47 (assignment_operator -> ASSIGN .)
    UPPERSAND       reduce using rule 47 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 47 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 47 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 47 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 47 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 47 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 47 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 47 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 47 (assignment_operator -> ASSIGN .)
    $end            reduce using rule 47 (assignment_operator -> ASSIGN .)


state 19

    (48) assignment_operator -> ASSIGN_TIMES .

    VOID            reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    CHAR            reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    INT             reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    FLOAT           reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN          reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN_TIMES    reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN_DIVIDE   reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN_REMAINDER reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN_PLUS     reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ASSIGN_MINUS    reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    LPAREN          reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    PLUS_PLUS       reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    MINUS_MINUS     reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    UPPERSAND       reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    TIMES           reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    PLUS            reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    MINUS           reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    NOT             reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    ID              reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    INT_CONST       reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    FLOAT_CONST     reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    STRING_CONST    reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)
    $end            reduce using rule 48 (assignment_operator -> ASSIGN_TIMES .)


state 20

    (49) assignment_operator -> ASSIGN_DIVIDE .

    VOID            reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    CHAR            reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    INT             reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    FLOAT           reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN          reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN_TIMES    reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN_DIVIDE   reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN_REMAINDER reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN_PLUS     reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ASSIGN_MINUS    reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    LPAREN          reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    PLUS_PLUS       reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS_MINUS     reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    UPPERSAND       reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    TIMES           reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    PLUS            reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS           reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    NOT             reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    ID              reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    INT_CONST       reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    FLOAT_CONST     reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    STRING_CONST    reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)
    $end            reduce using rule 49 (assignment_operator -> ASSIGN_DIVIDE .)


state 21

    (50) assignment_operator -> ASSIGN_REMAINDER .

    VOID            reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    CHAR            reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    INT             reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    FLOAT           reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN          reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN_TIMES    reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN_DIVIDE   reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN_REMAINDER reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN_PLUS     reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ASSIGN_MINUS    reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    LPAREN          reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    PLUS_PLUS       reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    MINUS_MINUS     reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    UPPERSAND       reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    TIMES           reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    PLUS            reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    MINUS           reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    NOT             reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    ID              reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    INT_CONST       reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    FLOAT_CONST     reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    STRING_CONST    reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)
    $end            reduce using rule 50 (assignment_operator -> ASSIGN_REMAINDER .)


state 22

    (51) assignment_operator -> ASSIGN_PLUS .

    VOID            reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    CHAR            reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    INT             reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    FLOAT           reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN          reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN_TIMES    reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN_DIVIDE   reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN_REMAINDER reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN_PLUS     reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ASSIGN_MINUS    reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    LPAREN          reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    PLUS_PLUS       reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    MINUS_MINUS     reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    UPPERSAND       reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    TIMES           reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    PLUS            reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    MINUS           reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    NOT             reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    ID              reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    INT_CONST       reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    FLOAT_CONST     reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    STRING_CONST    reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)
    $end            reduce using rule 51 (assignment_operator -> ASSIGN_PLUS .)


state 23

    (52) assignment_operator -> ASSIGN_MINUS .

    VOID            reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    CHAR            reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    INT             reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    FLOAT           reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN          reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN_TIMES    reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN_DIVIDE   reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN_REMAINDER reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN_PLUS     reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ASSIGN_MINUS    reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    LPAREN          reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    PLUS_PLUS       reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    MINUS_MINUS     reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    UPPERSAND       reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    TIMES           reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    PLUS            reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    MINUS           reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    NOT             reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    ID              reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    INT_CONST       reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    FLOAT_CONST     reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    STRING_CONST    reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)
    $end            reduce using rule 52 (assignment_operator -> ASSIGN_MINUS .)


state 24

    (17) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (43) type_specifier -> . VOID
    (44) type_specifier -> . CHAR
    (45) type_specifier -> . INT
    (46) type_specifier -> . FLOAT

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    type_specifier                 shift and go to state 56

state 25

    (21) unary_expression -> unary_operator . cast_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    cast_expression                shift and go to state 57
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 26

    (39) unary_operator -> TIMES .

    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    ID              reduce using rule 39 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 39 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 39 (unary_operator -> TIMES .)
    STRING_CONST    reduce using rule 39 (unary_operator -> TIMES .)


state 27

    (40) unary_operator -> PLUS .

    LPAREN          reduce using rule 40 (unary_operator -> PLUS .)
    ID              reduce using rule 40 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 40 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 40 (unary_operator -> PLUS .)
    STRING_CONST    reduce using rule 40 (unary_operator -> PLUS .)


state 28

    (41) unary_operator -> MINUS .

    LPAREN          reduce using rule 41 (unary_operator -> MINUS .)
    ID              reduce using rule 41 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 41 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 41 (unary_operator -> MINUS .)
    STRING_CONST    reduce using rule 41 (unary_operator -> MINUS .)


state 29

    (14) primary_expression -> identifier .

    PLUS_PLUS       reduce using rule 14 (primary_expression -> identifier .)
    MINUS_MINUS     reduce using rule 14 (primary_expression -> identifier .)
    VOID            reduce using rule 14 (primary_expression -> identifier .)
    CHAR            reduce using rule 14 (primary_expression -> identifier .)
    INT             reduce using rule 14 (primary_expression -> identifier .)
    FLOAT           reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN          reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_TIMES    reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_DIVIDE   reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_REMAINDER reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_PLUS     reduce using rule 14 (primary_expression -> identifier .)
    ASSIGN_MINUS    reduce using rule 14 (primary_expression -> identifier .)
    LPAREN          reduce using rule 14 (primary_expression -> identifier .)
    UPPERSAND       reduce using rule 14 (primary_expression -> identifier .)
    TIMES           reduce using rule 14 (primary_expression -> identifier .)
    PLUS            reduce using rule 14 (primary_expression -> identifier .)
    MINUS           reduce using rule 14 (primary_expression -> identifier .)
    NOT             reduce using rule 14 (primary_expression -> identifier .)
    ID              reduce using rule 14 (primary_expression -> identifier .)
    INT_CONST       reduce using rule 14 (primary_expression -> identifier .)
    FLOAT_CONST     reduce using rule 14 (primary_expression -> identifier .)
    STRING_CONST    reduce using rule 14 (primary_expression -> identifier .)
    $end            reduce using rule 14 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 14 (primary_expression -> identifier .)
    MOD             reduce using rule 14 (primary_expression -> identifier .)
    SMALLER         reduce using rule 14 (primary_expression -> identifier .)
    SMALLER_EQUAL   reduce using rule 14 (primary_expression -> identifier .)
    BIGGER          reduce using rule 14 (primary_expression -> identifier .)
    BIGGER_EQUAL    reduce using rule 14 (primary_expression -> identifier .)
    EQUAL           reduce using rule 14 (primary_expression -> identifier .)
    DIFFERENT       reduce using rule 14 (primary_expression -> identifier .)
    AND             reduce using rule 14 (primary_expression -> identifier .)
    OR              reduce using rule 14 (primary_expression -> identifier .)


state 30

    (15) primary_expression -> constant .

    PLUS_PLUS       reduce using rule 15 (primary_expression -> constant .)
    MINUS_MINUS     reduce using rule 15 (primary_expression -> constant .)
    VOID            reduce using rule 15 (primary_expression -> constant .)
    CHAR            reduce using rule 15 (primary_expression -> constant .)
    INT             reduce using rule 15 (primary_expression -> constant .)
    FLOAT           reduce using rule 15 (primary_expression -> constant .)
    ASSIGN          reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_TIMES    reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_DIVIDE   reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_REMAINDER reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_PLUS     reduce using rule 15 (primary_expression -> constant .)
    ASSIGN_MINUS    reduce using rule 15 (primary_expression -> constant .)
    LPAREN          reduce using rule 15 (primary_expression -> constant .)
    UPPERSAND       reduce using rule 15 (primary_expression -> constant .)
    TIMES           reduce using rule 15 (primary_expression -> constant .)
    PLUS            reduce using rule 15 (primary_expression -> constant .)
    MINUS           reduce using rule 15 (primary_expression -> constant .)
    NOT             reduce using rule 15 (primary_expression -> constant .)
    ID              reduce using rule 15 (primary_expression -> constant .)
    INT_CONST       reduce using rule 15 (primary_expression -> constant .)
    FLOAT_CONST     reduce using rule 15 (primary_expression -> constant .)
    STRING_CONST    reduce using rule 15 (primary_expression -> constant .)
    $end            reduce using rule 15 (primary_expression -> constant .)
    DIVIDE          reduce using rule 15 (primary_expression -> constant .)
    MOD             reduce using rule 15 (primary_expression -> constant .)
    SMALLER         reduce using rule 15 (primary_expression -> constant .)
    SMALLER_EQUAL   reduce using rule 15 (primary_expression -> constant .)
    BIGGER          reduce using rule 15 (primary_expression -> constant .)
    BIGGER_EQUAL    reduce using rule 15 (primary_expression -> constant .)
    EQUAL           reduce using rule 15 (primary_expression -> constant .)
    DIFFERENT       reduce using rule 15 (primary_expression -> constant .)
    AND             reduce using rule 15 (primary_expression -> constant .)
    OR              reduce using rule 15 (primary_expression -> constant .)


state 31

    (38) unary_operator -> UPPERSAND .

    LPAREN          reduce using rule 38 (unary_operator -> UPPERSAND .)
    ID              reduce using rule 38 (unary_operator -> UPPERSAND .)
    INT_CONST       reduce using rule 38 (unary_operator -> UPPERSAND .)
    FLOAT_CONST     reduce using rule 38 (unary_operator -> UPPERSAND .)
    STRING_CONST    reduce using rule 38 (unary_operator -> UPPERSAND .)


state 32

    (42) unary_operator -> NOT .

    LPAREN          reduce using rule 42 (unary_operator -> NOT .)
    ID              reduce using rule 42 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 42 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 42 (unary_operator -> NOT .)
    STRING_CONST    reduce using rule 42 (unary_operator -> NOT .)


state 33

    (37) identifier -> ID .

    PLUS_PLUS       reduce using rule 37 (identifier -> ID .)
    MINUS_MINUS     reduce using rule 37 (identifier -> ID .)
    VOID            reduce using rule 37 (identifier -> ID .)
    CHAR            reduce using rule 37 (identifier -> ID .)
    INT             reduce using rule 37 (identifier -> ID .)
    FLOAT           reduce using rule 37 (identifier -> ID .)
    ASSIGN          reduce using rule 37 (identifier -> ID .)
    ASSIGN_TIMES    reduce using rule 37 (identifier -> ID .)
    ASSIGN_DIVIDE   reduce using rule 37 (identifier -> ID .)
    ASSIGN_REMAINDER reduce using rule 37 (identifier -> ID .)
    ASSIGN_PLUS     reduce using rule 37 (identifier -> ID .)
    ASSIGN_MINUS    reduce using rule 37 (identifier -> ID .)
    LPAREN          reduce using rule 37 (identifier -> ID .)
    UPPERSAND       reduce using rule 37 (identifier -> ID .)
    TIMES           reduce using rule 37 (identifier -> ID .)
    PLUS            reduce using rule 37 (identifier -> ID .)
    MINUS           reduce using rule 37 (identifier -> ID .)
    NOT             reduce using rule 37 (identifier -> ID .)
    ID              reduce using rule 37 (identifier -> ID .)
    INT_CONST       reduce using rule 37 (identifier -> ID .)
    FLOAT_CONST     reduce using rule 37 (identifier -> ID .)
    STRING_CONST    reduce using rule 37 (identifier -> ID .)
    $end            reduce using rule 37 (identifier -> ID .)
    DIVIDE          reduce using rule 37 (identifier -> ID .)
    MOD             reduce using rule 37 (identifier -> ID .)
    SMALLER         reduce using rule 37 (identifier -> ID .)
    SMALLER_EQUAL   reduce using rule 37 (identifier -> ID .)
    BIGGER          reduce using rule 37 (identifier -> ID .)
    BIGGER_EQUAL    reduce using rule 37 (identifier -> ID .)
    EQUAL           reduce using rule 37 (identifier -> ID .)
    DIFFERENT       reduce using rule 37 (identifier -> ID .)
    AND             reduce using rule 37 (identifier -> ID .)
    OR              reduce using rule 37 (identifier -> ID .)


state 34

    (53) constant -> INT_CONST .

    PLUS_PLUS       reduce using rule 53 (constant -> INT_CONST .)
    MINUS_MINUS     reduce using rule 53 (constant -> INT_CONST .)
    VOID            reduce using rule 53 (constant -> INT_CONST .)
    CHAR            reduce using rule 53 (constant -> INT_CONST .)
    INT             reduce using rule 53 (constant -> INT_CONST .)
    FLOAT           reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN          reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN_TIMES    reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN_REMAINDER reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN_PLUS     reduce using rule 53 (constant -> INT_CONST .)
    ASSIGN_MINUS    reduce using rule 53 (constant -> INT_CONST .)
    LPAREN          reduce using rule 53 (constant -> INT_CONST .)
    UPPERSAND       reduce using rule 53 (constant -> INT_CONST .)
    TIMES           reduce using rule 53 (constant -> INT_CONST .)
    PLUS            reduce using rule 53 (constant -> INT_CONST .)
    MINUS           reduce using rule 53 (constant -> INT_CONST .)
    NOT             reduce using rule 53 (constant -> INT_CONST .)
    ID              reduce using rule 53 (constant -> INT_CONST .)
    INT_CONST       reduce using rule 53 (constant -> INT_CONST .)
    FLOAT_CONST     reduce using rule 53 (constant -> INT_CONST .)
    STRING_CONST    reduce using rule 53 (constant -> INT_CONST .)
    $end            reduce using rule 53 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 53 (constant -> INT_CONST .)
    MOD             reduce using rule 53 (constant -> INT_CONST .)
    SMALLER         reduce using rule 53 (constant -> INT_CONST .)
    SMALLER_EQUAL   reduce using rule 53 (constant -> INT_CONST .)
    BIGGER          reduce using rule 53 (constant -> INT_CONST .)
    BIGGER_EQUAL    reduce using rule 53 (constant -> INT_CONST .)
    EQUAL           reduce using rule 53 (constant -> INT_CONST .)
    DIFFERENT       reduce using rule 53 (constant -> INT_CONST .)
    AND             reduce using rule 53 (constant -> INT_CONST .)
    OR              reduce using rule 53 (constant -> INT_CONST .)


state 35

    (54) constant -> FLOAT_CONST .

    PLUS_PLUS       reduce using rule 54 (constant -> FLOAT_CONST .)
    MINUS_MINUS     reduce using rule 54 (constant -> FLOAT_CONST .)
    VOID            reduce using rule 54 (constant -> FLOAT_CONST .)
    CHAR            reduce using rule 54 (constant -> FLOAT_CONST .)
    INT             reduce using rule 54 (constant -> FLOAT_CONST .)
    FLOAT           reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN          reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN_TIMES    reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN_REMAINDER reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN_PLUS     reduce using rule 54 (constant -> FLOAT_CONST .)
    ASSIGN_MINUS    reduce using rule 54 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 54 (constant -> FLOAT_CONST .)
    UPPERSAND       reduce using rule 54 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 54 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 54 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 54 (constant -> FLOAT_CONST .)
    NOT             reduce using rule 54 (constant -> FLOAT_CONST .)
    ID              reduce using rule 54 (constant -> FLOAT_CONST .)
    INT_CONST       reduce using rule 54 (constant -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 54 (constant -> FLOAT_CONST .)
    STRING_CONST    reduce using rule 54 (constant -> FLOAT_CONST .)
    $end            reduce using rule 54 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 54 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 54 (constant -> FLOAT_CONST .)
    SMALLER         reduce using rule 54 (constant -> FLOAT_CONST .)
    SMALLER_EQUAL   reduce using rule 54 (constant -> FLOAT_CONST .)
    BIGGER          reduce using rule 54 (constant -> FLOAT_CONST .)
    BIGGER_EQUAL    reduce using rule 54 (constant -> FLOAT_CONST .)
    EQUAL           reduce using rule 54 (constant -> FLOAT_CONST .)
    DIFFERENT       reduce using rule 54 (constant -> FLOAT_CONST .)
    AND             reduce using rule 54 (constant -> FLOAT_CONST .)
    OR              reduce using rule 54 (constant -> FLOAT_CONST .)


state 36

    (55) constant -> STRING_CONST .

    PLUS_PLUS       reduce using rule 55 (constant -> STRING_CONST .)
    MINUS_MINUS     reduce using rule 55 (constant -> STRING_CONST .)
    VOID            reduce using rule 55 (constant -> STRING_CONST .)
    CHAR            reduce using rule 55 (constant -> STRING_CONST .)
    INT             reduce using rule 55 (constant -> STRING_CONST .)
    FLOAT           reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN          reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN_TIMES    reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN_DIVIDE   reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN_REMAINDER reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN_PLUS     reduce using rule 55 (constant -> STRING_CONST .)
    ASSIGN_MINUS    reduce using rule 55 (constant -> STRING_CONST .)
    LPAREN          reduce using rule 55 (constant -> STRING_CONST .)
    UPPERSAND       reduce using rule 55 (constant -> STRING_CONST .)
    TIMES           reduce using rule 55 (constant -> STRING_CONST .)
    PLUS            reduce using rule 55 (constant -> STRING_CONST .)
    MINUS           reduce using rule 55 (constant -> STRING_CONST .)
    NOT             reduce using rule 55 (constant -> STRING_CONST .)
    ID              reduce using rule 55 (constant -> STRING_CONST .)
    INT_CONST       reduce using rule 55 (constant -> STRING_CONST .)
    FLOAT_CONST     reduce using rule 55 (constant -> STRING_CONST .)
    STRING_CONST    reduce using rule 55 (constant -> STRING_CONST .)
    $end            reduce using rule 55 (constant -> STRING_CONST .)
    DIVIDE          reduce using rule 55 (constant -> STRING_CONST .)
    MOD             reduce using rule 55 (constant -> STRING_CONST .)
    SMALLER         reduce using rule 55 (constant -> STRING_CONST .)
    SMALLER_EQUAL   reduce using rule 55 (constant -> STRING_CONST .)
    BIGGER          reduce using rule 55 (constant -> STRING_CONST .)
    BIGGER_EQUAL    reduce using rule 55 (constant -> STRING_CONST .)
    EQUAL           reduce using rule 55 (constant -> STRING_CONST .)
    DIFFERENT       reduce using rule 55 (constant -> STRING_CONST .)
    AND             reduce using rule 55 (constant -> STRING_CONST .)
    OR              reduce using rule 55 (constant -> STRING_CONST .)


state 37

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN_TIMES    reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN_DIVIDE   reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN_REMAINDER reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN_PLUS     reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ASSIGN_MINUS    reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    PLUS_PLUS       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    MINUS_MINUS     reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    UPPERSAND       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    PLUS            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    MINUS           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    NOT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT_CONST       reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT_CONST     reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    STRING_CONST    reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 38

    (12) postfix_expression -> postfix_expression PLUS_PLUS .

    PLUS_PLUS       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    VOID            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CHAR            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    INT             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FLOAT           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_TIMES    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_DIVIDE   reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_REMAINDER reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_PLUS     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN_MINUS    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LPAREN          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    UPPERSAND       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    TIMES           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ID              reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    INT_CONST       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FLOAT_CONST     reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STRING_CONST    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    $end            reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER         reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SMALLER_EQUAL   reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER          reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BIGGER_EQUAL    reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIFFERENT       reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 39

    (13) postfix_expression -> postfix_expression MINUS_MINUS .

    PLUS_PLUS       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    VOID            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CHAR            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    INT             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FLOAT           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_TIMES    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_DIVIDE   reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_REMAINDER reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_PLUS     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN_MINUS    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LPAREN          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    UPPERSAND       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    TIMES           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ID              reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    INT_CONST       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FLOAT_CONST     reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STRING_CONST    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    $end            reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MOD             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER         reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SMALLER_EQUAL   reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER          reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BIGGER_EQUAL    reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIFFERENT       reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND             reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 13 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 40

    (23) binary_expression -> binary_expression TIMES . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 59
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 41

    (24) binary_expression -> binary_expression DIVIDE . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 61
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 42

    (25) binary_expression -> binary_expression MOD . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 62
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 43

    (26) binary_expression -> binary_expression PLUS . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 63
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 44

    (27) binary_expression -> binary_expression MINUS . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 64
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 45

    (28) binary_expression -> binary_expression SMALLER . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 65
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 46

    (29) binary_expression -> binary_expression SMALLER_EQUAL . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 66
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 47

    (30) binary_expression -> binary_expression BIGGER . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 67
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 48

    (31) binary_expression -> binary_expression BIGGER_EQUAL . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 68
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 49

    (32) binary_expression -> binary_expression EQUAL . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 69
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 50

    (33) binary_expression -> binary_expression DIFFERENT . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 70
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 51

    (34) binary_expression -> binary_expression AND . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 71
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 52

    (35) binary_expression -> binary_expression OR . binary_expression
    (22) binary_expression -> . cast_expression
    (23) binary_expression -> . binary_expression TIMES binary_expression
    (24) binary_expression -> . binary_expression DIVIDE binary_expression
    (25) binary_expression -> . binary_expression MOD binary_expression
    (26) binary_expression -> . binary_expression PLUS binary_expression
    (27) binary_expression -> . binary_expression MINUS binary_expression
    (28) binary_expression -> . binary_expression SMALLER binary_expression
    (29) binary_expression -> . binary_expression SMALLER_EQUAL binary_expression
    (30) binary_expression -> . binary_expression BIGGER binary_expression
    (31) binary_expression -> . binary_expression BIGGER_EQUAL binary_expression
    (32) binary_expression -> . binary_expression EQUAL binary_expression
    (33) binary_expression -> . binary_expression DIFFERENT binary_expression
    (34) binary_expression -> . binary_expression AND binary_expression
    (35) binary_expression -> . binary_expression OR binary_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    binary_expression              shift and go to state 72
    cast_expression                shift and go to state 60
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 53

    (19) unary_expression -> PLUS_PLUS unary_expression .

    VOID            reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    CHAR            reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    INT             reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    FLOAT           reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN          reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_REMAINDER reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    LPAREN          reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS_PLUS       reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS_MINUS     reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    UPPERSAND       reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    TIMES           reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS            reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS           reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    NOT             reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    ID              reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    INT_CONST       reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    FLOAT_CONST     reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    STRING_CONST    reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)
    $end            reduce using rule 19 (unary_expression -> PLUS_PLUS unary_expression .)


state 54

    (18) unary_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    VOID            reduce using rule 18 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 18 (unary_expression -> postfix_expression .)
    INT             reduce using rule 18 (unary_expression -> postfix_expression .)
    FLOAT           reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_REMAINDER reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 18 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 18 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 18 (unary_expression -> postfix_expression .)
    UPPERSAND       reduce using rule 18 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 18 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 18 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 18 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 18 (unary_expression -> postfix_expression .)
    ID              reduce using rule 18 (unary_expression -> postfix_expression .)
    INT_CONST       reduce using rule 18 (unary_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 18 (unary_expression -> postfix_expression .)
    STRING_CONST    reduce using rule 18 (unary_expression -> postfix_expression .)
    $end            reduce using rule 18 (unary_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 38
    MINUS_MINUS     shift and go to state 39

  ! PLUS_PLUS       [ reduce using rule 18 (unary_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 18 (unary_expression -> postfix_expression .) ]


state 55

    (20) unary_expression -> MINUS_MINUS unary_expression .

    VOID            reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    CHAR            reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    INT             reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    FLOAT           reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN          reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_REMAINDER reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    LPAREN          reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS_PLUS       reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS_MINUS     reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    UPPERSAND       reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    TIMES           reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS            reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS           reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    NOT             reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    ID              reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    INT_CONST       reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    FLOAT_CONST     reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    STRING_CONST    reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)
    $end            reduce using rule 20 (unary_expression -> MINUS_MINUS unary_expression .)


state 56

    (17) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 73


state 57

    (21) unary_expression -> unary_operator cast_expression .

    VOID            reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    CHAR            reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    INT             reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    FLOAT           reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_TIMES    reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_REMAINDER reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_PLUS     reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MINUS    reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    PLUS_PLUS       reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    MINUS_MINUS     reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    UPPERSAND       reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    INT_CONST       reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    FLOAT_CONST     reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    STRING_CONST    reduce using rule 21 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 21 (unary_expression -> unary_operator cast_expression .)


state 58

    (16) cast_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . PLUS_PLUS
    (13) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    VOID            reduce using rule 16 (cast_expression -> postfix_expression .)
    CHAR            reduce using rule 16 (cast_expression -> postfix_expression .)
    INT             reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT           reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN          reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_REMAINDER reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 16 (cast_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 16 (cast_expression -> postfix_expression .)
    LPAREN          reduce using rule 16 (cast_expression -> postfix_expression .)
    UPPERSAND       reduce using rule 16 (cast_expression -> postfix_expression .)
    TIMES           reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS            reduce using rule 16 (cast_expression -> postfix_expression .)
    MINUS           reduce using rule 16 (cast_expression -> postfix_expression .)
    NOT             reduce using rule 16 (cast_expression -> postfix_expression .)
    ID              reduce using rule 16 (cast_expression -> postfix_expression .)
    INT_CONST       reduce using rule 16 (cast_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 16 (cast_expression -> postfix_expression .)
    STRING_CONST    reduce using rule 16 (cast_expression -> postfix_expression .)
    $end            reduce using rule 16 (cast_expression -> postfix_expression .)
    DIVIDE          reduce using rule 16 (cast_expression -> postfix_expression .)
    MOD             reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER         reduce using rule 16 (cast_expression -> postfix_expression .)
    SMALLER_EQUAL   reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER          reduce using rule 16 (cast_expression -> postfix_expression .)
    BIGGER_EQUAL    reduce using rule 16 (cast_expression -> postfix_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> postfix_expression .)
    AND             reduce using rule 16 (cast_expression -> postfix_expression .)
    OR              reduce using rule 16 (cast_expression -> postfix_expression .)
    PLUS_PLUS       shift and go to state 38
    MINUS_MINUS     shift and go to state 39

  ! PLUS_PLUS       [ reduce using rule 16 (cast_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (cast_expression -> postfix_expression .) ]


state 59

    (23) binary_expression -> binary_expression TIMES binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER         reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    SMALLER_EQUAL   reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER          reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    BIGGER_EQUAL    reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUAL           reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFFERENT       reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    VOID            reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    CHAR            reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    INT             reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    FLOAT           reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN          reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN_TIMES    reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN_REMAINDER reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN_PLUS     reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSIGN_MINUS    reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    LPAREN          reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS_PLUS       reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS_MINUS     reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    UPPERSAND       reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    NOT             reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    ID              reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    INT_CONST       reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    FLOAT_CONST     reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    STRING_CONST    reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)
    $end            reduce using rule 23 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 60

    (22) binary_expression -> cast_expression .

    TIMES           reduce using rule 22 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 22 (binary_expression -> cast_expression .)
    MOD             reduce using rule 22 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 22 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 22 (binary_expression -> cast_expression .)
    SMALLER         reduce using rule 22 (binary_expression -> cast_expression .)
    SMALLER_EQUAL   reduce using rule 22 (binary_expression -> cast_expression .)
    BIGGER          reduce using rule 22 (binary_expression -> cast_expression .)
    BIGGER_EQUAL    reduce using rule 22 (binary_expression -> cast_expression .)
    EQUAL           reduce using rule 22 (binary_expression -> cast_expression .)
    DIFFERENT       reduce using rule 22 (binary_expression -> cast_expression .)
    AND             reduce using rule 22 (binary_expression -> cast_expression .)
    OR              reduce using rule 22 (binary_expression -> cast_expression .)
    VOID            reduce using rule 22 (binary_expression -> cast_expression .)
    CHAR            reduce using rule 22 (binary_expression -> cast_expression .)
    INT             reduce using rule 22 (binary_expression -> cast_expression .)
    FLOAT           reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN          reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN_TIMES    reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN_REMAINDER reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN_PLUS     reduce using rule 22 (binary_expression -> cast_expression .)
    ASSIGN_MINUS    reduce using rule 22 (binary_expression -> cast_expression .)
    LPAREN          reduce using rule 22 (binary_expression -> cast_expression .)
    PLUS_PLUS       reduce using rule 22 (binary_expression -> cast_expression .)
    MINUS_MINUS     reduce using rule 22 (binary_expression -> cast_expression .)
    UPPERSAND       reduce using rule 22 (binary_expression -> cast_expression .)
    NOT             reduce using rule 22 (binary_expression -> cast_expression .)
    ID              reduce using rule 22 (binary_expression -> cast_expression .)
    INT_CONST       reduce using rule 22 (binary_expression -> cast_expression .)
    FLOAT_CONST     reduce using rule 22 (binary_expression -> cast_expression .)
    STRING_CONST    reduce using rule 22 (binary_expression -> cast_expression .)
    $end            reduce using rule 22 (binary_expression -> cast_expression .)


state 61

    (24) binary_expression -> binary_expression DIVIDE binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER         reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SMALLER_EQUAL   reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER          reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BIGGER_EQUAL    reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUAL           reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFFERENT       reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    VOID            reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    CHAR            reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INT             reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FLOAT           reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN          reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN_TIMES    reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN_REMAINDER reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN_PLUS     reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSIGN_MINUS    reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LPAREN          reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS_PLUS       reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS_MINUS     reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    UPPERSAND       reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NOT             reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ID              reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INT_CONST       reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FLOAT_CONST     reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    STRING_CONST    reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)
    $end            reduce using rule 24 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 62

    (25) binary_expression -> binary_expression MOD binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER         reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    SMALLER_EQUAL   reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER          reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    BIGGER_EQUAL    reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    EQUAL           reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    DIFFERENT       reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    VOID            reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    CHAR            reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    INT             reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    FLOAT           reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN          reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN_TIMES    reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN_REMAINDER reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN_PLUS     reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ASSIGN_MINUS    reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    LPAREN          reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS_PLUS       reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS_MINUS     reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    UPPERSAND       reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    NOT             reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    ID              reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    INT_CONST       reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    FLOAT_CONST     reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    STRING_CONST    reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)
    $end            reduce using rule 25 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 63

    (26) binary_expression -> binary_expression PLUS binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER         reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER          reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUAL           reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFFERENT       reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    VOID            reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    CHAR            reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    INT             reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    FLOAT           reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN          reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN_TIMES    reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN_REMAINDER reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN_PLUS     reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSIGN_MINUS    reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    LPAREN          reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS_PLUS       reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS_MINUS     reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    UPPERSAND       reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    NOT             reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    ID              reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    INT_CONST       reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    FLOAT_CONST     reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    STRING_CONST    reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    $end            reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

  ! TIMES           [ reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 26 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 64

    (27) binary_expression -> binary_expression MINUS binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER         reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    SMALLER_EQUAL   reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER          reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    BIGGER_EQUAL    reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUAL           reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFFERENT       reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    VOID            reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    CHAR            reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    INT             reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    FLOAT           reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN          reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN_TIMES    reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN_REMAINDER reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN_PLUS     reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSIGN_MINUS    reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    LPAREN          reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS_PLUS       reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS_MINUS     reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    UPPERSAND       reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    NOT             reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    ID              reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    INT_CONST       reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    FLOAT_CONST     reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    STRING_CONST    reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    $end            reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

  ! TIMES           [ reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 27 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 65

    (28) binary_expression -> binary_expression SMALLER binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    SMALLER_EQUAL   reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER          reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    BIGGER_EQUAL    reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    EQUAL           reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    DIFFERENT       reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    AND             reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    OR              reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    VOID            reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    CHAR            reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    INT             reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    FLOAT           reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN          reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN_TIMES    reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN_REMAINDER reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN_PLUS     reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ASSIGN_MINUS    reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    LPAREN          reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    PLUS_PLUS       reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    MINUS_MINUS     reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    UPPERSAND       reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    NOT             reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    ID              reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    INT_CONST       reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    FLOAT_CONST     reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    STRING_CONST    reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    $end            reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! TIMES           [ reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MOD             [ reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! PLUS            [ reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! MINUS           [ reduce using rule 28 (binary_expression -> binary_expression SMALLER binary_expression .) ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 66

    (29) binary_expression -> binary_expression SMALLER_EQUAL binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER          reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    EQUAL           reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    AND             reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    OR              reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    VOID            reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    CHAR            reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    INT             reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    FLOAT           reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN          reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN_TIMES    reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN_REMAINDER reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN_PLUS     reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ASSIGN_MINUS    reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    LPAREN          reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    UPPERSAND       reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    NOT             reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    ID              reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    INT_CONST       reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    STRING_CONST    reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    $end            reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! TIMES           [ reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 29 (binary_expression -> binary_expression SMALLER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 67

    (30) binary_expression -> binary_expression BIGGER binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    SMALLER_EQUAL   reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER          reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    BIGGER_EQUAL    reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    EQUAL           reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    DIFFERENT       reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    AND             reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    OR              reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    VOID            reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    CHAR            reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    INT             reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    FLOAT           reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN          reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN_TIMES    reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN_REMAINDER reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN_PLUS     reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ASSIGN_MINUS    reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    LPAREN          reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    PLUS_PLUS       reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    MINUS_MINUS     reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    UPPERSAND       reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    NOT             reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    ID              reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    INT_CONST       reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    FLOAT_CONST     reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    STRING_CONST    reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    $end            reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! TIMES           [ reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! DIVIDE          [ reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MOD             [ reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! PLUS            [ reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! MINUS           [ reduce using rule 30 (binary_expression -> binary_expression BIGGER binary_expression .) ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 68

    (31) binary_expression -> binary_expression BIGGER_EQUAL binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    SMALLER         reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    SMALLER_EQUAL   reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER          reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    BIGGER_EQUAL    reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    EQUAL           reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    DIFFERENT       reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    AND             reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    OR              reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    VOID            reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    CHAR            reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    INT             reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    FLOAT           reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN          reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN_TIMES    reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN_REMAINDER reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN_PLUS     reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ASSIGN_MINUS    reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    LPAREN          reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    UPPERSAND       reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    NOT             reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    ID              reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    INT_CONST       reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    STRING_CONST    reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    $end            reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! TIMES           [ reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 31 (binary_expression -> binary_expression BIGGER_EQUAL binary_expression .) ]
  ! SMALLER         [ shift and go to state 45 ]
  ! SMALLER_EQUAL   [ shift and go to state 46 ]
  ! BIGGER          [ shift and go to state 47 ]
  ! BIGGER_EQUAL    [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 69

    (32) binary_expression -> binary_expression EQUAL binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    DIFFERENT       reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    AND             reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    OR              reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    VOID            reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    CHAR            reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    INT             reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    FLOAT           reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN          reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN_TIMES    reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN_REMAINDER reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN_PLUS     reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ASSIGN_MINUS    reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    LPAREN          reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    PLUS_PLUS       reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    MINUS_MINUS     reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    UPPERSAND       reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    NOT             reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    ID              reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    INT_CONST       reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    FLOAT_CONST     reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    STRING_CONST    reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    $end            reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    SMALLER         shift and go to state 45
    SMALLER_EQUAL   shift and go to state 46
    BIGGER          shift and go to state 47
    BIGGER_EQUAL    shift and go to state 48

  ! TIMES           [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! DIVIDE          [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MOD             [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! PLUS            [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! MINUS           [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER         [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER          [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 32 (binary_expression -> binary_expression EQUAL binary_expression .) ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 70

    (33) binary_expression -> binary_expression DIFFERENT binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    EQUAL           reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    DIFFERENT       reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    AND             reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    OR              reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    VOID            reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    CHAR            reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    INT             reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    FLOAT           reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN          reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN_TIMES    reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN_REMAINDER reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN_PLUS     reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ASSIGN_MINUS    reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    LPAREN          reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    PLUS_PLUS       reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    MINUS_MINUS     reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    UPPERSAND       reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    NOT             reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    ID              reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    INT_CONST       reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    FLOAT_CONST     reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    STRING_CONST    reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    $end            reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    SMALLER         shift and go to state 45
    SMALLER_EQUAL   shift and go to state 46
    BIGGER          shift and go to state 47
    BIGGER_EQUAL    shift and go to state 48

  ! TIMES           [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MOD             [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! PLUS            [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! MINUS           [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER         [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER          [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 33 (binary_expression -> binary_expression DIFFERENT binary_expression .) ]
  ! EQUAL           [ shift and go to state 49 ]
  ! DIFFERENT       [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 71

    (34) binary_expression -> binary_expression AND binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    VOID            reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    CHAR            reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    INT             reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    FLOAT           reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN          reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN_TIMES    reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN_REMAINDER reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN_PLUS     reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ASSIGN_MINUS    reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    LPAREN          reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    PLUS_PLUS       reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    MINUS_MINUS     reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    UPPERSAND       reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    NOT             reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    ID              reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    INT_CONST       reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    FLOAT_CONST     reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    STRING_CONST    reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    $end            reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    SMALLER         shift and go to state 45
    SMALLER_EQUAL   shift and go to state 46
    BIGGER          shift and go to state 47
    BIGGER_EQUAL    shift and go to state 48
    EQUAL           shift and go to state 49
    DIFFERENT       shift and go to state 50

  ! TIMES           [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER         [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER          [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUAL           [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 34 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 72

    (35) binary_expression -> binary_expression OR binary_expression .
    (23) binary_expression -> binary_expression . TIMES binary_expression
    (24) binary_expression -> binary_expression . DIVIDE binary_expression
    (25) binary_expression -> binary_expression . MOD binary_expression
    (26) binary_expression -> binary_expression . PLUS binary_expression
    (27) binary_expression -> binary_expression . MINUS binary_expression
    (28) binary_expression -> binary_expression . SMALLER binary_expression
    (29) binary_expression -> binary_expression . SMALLER_EQUAL binary_expression
    (30) binary_expression -> binary_expression . BIGGER binary_expression
    (31) binary_expression -> binary_expression . BIGGER_EQUAL binary_expression
    (32) binary_expression -> binary_expression . EQUAL binary_expression
    (33) binary_expression -> binary_expression . DIFFERENT binary_expression
    (34) binary_expression -> binary_expression . AND binary_expression
    (35) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    VOID            reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    CHAR            reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    INT             reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    FLOAT           reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN          reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN_TIMES    reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN_DIVIDE   reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN_REMAINDER reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN_PLUS     reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ASSIGN_MINUS    reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    LPAREN          reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    PLUS_PLUS       reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    MINUS_MINUS     reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    UPPERSAND       reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    NOT             reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    ID              reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    INT_CONST       reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    FLOAT_CONST     reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    STRING_CONST    reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    $end            reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    SMALLER         shift and go to state 45
    SMALLER_EQUAL   shift and go to state 46
    BIGGER          shift and go to state 47
    BIGGER_EQUAL    shift and go to state 48
    EQUAL           shift and go to state 49
    DIFFERENT       shift and go to state 50
    AND             shift and go to state 51

  ! TIMES           [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER         [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! SMALLER_EQUAL   [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER          [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! BIGGER_EQUAL    [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUAL           [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFFERENT       [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 35 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 52 ]


state 73

    (17) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (16) cast_expression -> . postfix_expression
    (17) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression PLUS_PLUS
    (13) postfix_expression -> . postfix_expression MINUS_MINUS
    (14) primary_expression -> . identifier
    (15) primary_expression -> . constant
    (37) identifier -> . ID
    (53) constant -> . INT_CONST
    (54) constant -> . FLOAT_CONST
    (55) constant -> . STRING_CONST

    LPAREN          shift and go to state 24
    ID              shift and go to state 33
    INT_CONST       shift and go to state 34
    FLOAT_CONST     shift and go to state 35
    STRING_CONST    shift and go to state 36

    cast_expression                shift and go to state 74
    postfix_expression             shift and go to state 58
    primary_expression             shift and go to state 11
    identifier                     shift and go to state 29
    constant                       shift and go to state 30

state 74

    (17) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    VOID            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    CHAR            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INT             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FLOAT           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_TIMES    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_REMAINDER reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_PLUS     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MINUS    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS_PLUS       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS_MINUS     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    UPPERSAND       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INT_CONST       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FLOAT_CONST     reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    STRING_CONST    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    $end            reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER         reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SMALLER_EQUAL   reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER          reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BIGGER_EQUAL    reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUAL           reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFFERENT       reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 17 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 58 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_declaration -> postfix_expression)
WARNING: rejected rule (cast_expression -> postfix_expression) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_declaration -> postfix_expression)
WARNING: rejected rule (unary_expression -> postfix_expression) in state 4
WARNING: reduce/reduce conflict in state 7 resolved using rule (global_declaration -> cast_expression)
WARNING: rejected rule (binary_expression -> cast_expression) in state 7
WARNING: reduce/reduce conflict in state 9 resolved using rule (global_declaration -> binary_expression)
WARNING: rejected rule (constant_expression -> binary_expression) in state 9
WARNING: Rule (constant_expression -> binary_expression) is never reduced
