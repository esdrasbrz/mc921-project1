
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALDIFFERENTleftBIGGERBIGGER_EQUALSMALLERSMALLER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODAND ASSERT ASSIGN ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_PLUS ASSIGN_TIMES BIGGER BIGGER_EQUAL BREAK CCOMMENT CHAR COMMA DIFFERENT DIVIDE ELSE EQUAL FLOAT FLOAT_CONST FOR ID IF INT INT_CONST LBRACES LBRACKET LPAREN MINUS MINUS_MINUS MOD NOT NUMBER OR PLUS PLUS_PLUS PRINT QUESTION RBRACES RBRACKET READ RETURN RPAREN SEMI SMALLER SMALLER_EQUAL STRING_CONST TIMES UCCCOMMENT UPPERSAND VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration : postfix_expression\n                               | type_specifier\n                               | assignment_expression\n                               | cast_expression\n                               | unary_expression\n                               | binary_expression\n                               | constant_expression\n         postfix_expression : primary_expression\n         postfix_expression : postfix_expression PLUS_PLUS\n                            | postfix_expression MINUS_MINUS\n         primary_expression : identifier\n                               | constant\n         cast_expression : postfix_expression\n         cast_expression : LPAREN type_specifier RPAREN cast_expression\n         assignment_expression   : binary_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : ASSIGN\n                                | ASSIGN_TIMES\n                                | ASSIGN_DIVIDE\n                                | ASSIGN_MOD\n                                | ASSIGN_PLUS\n                                | ASSIGN_MINUS\n         unary_expression : postfix_expression\n         unary_expression    : PLUS_PLUS unary_expression\n                                | MINUS_MINUS unary_expression\n                                | unary_operator cast_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression SMALLER binary_expression\n                                | binary_expression SMALLER_EQUAL binary_expression\n                                | binary_expression BIGGER binary_expression\n                                | binary_expression BIGGER_EQUAL binary_expression\n                                | binary_expression EQUAL binary_expression\n                                | binary_expression DIFFERENT binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         constant_expression : binary_expression\n         identifier : ID\n         unary_operator : UPPERSAND\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         constant : INT_CONST\n         constant : FLOAT_CONST\n         constant : STRING_CONST\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,23,24,27,28,29,30,31,32,33,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,14,-14,-15,-45,-55,-56,-57,-3,-12,-13,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,23,24,27,28,29,30,31,32,33,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,15,-14,-15,-45,-55,-56,-57,-3,-12,-13,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,23,24,27,28,29,30,31,32,33,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,16,-14,-15,-45,-55,-56,-57,-3,-12,-13,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,23,24,27,28,29,30,31,32,33,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,17,-14,-15,-45,-55,-56,-57,-3,-12,-13,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,18,-47,-48,-49,-14,-15,-46,-50,-45,-55,-56,-57,-3,-12,-13,18,-20,-21,-22,-23,-24,-25,18,18,18,18,18,18,18,18,18,18,18,18,18,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,18,-17,]),'PLUS_PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[12,12,-2,32,-5,-6,-7,-8,-9,-10,-11,12,12,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,12,-20,-21,-22,-23,-24,-25,-27,32,-28,-29,32,-19,-18,-30,32,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'MINUS_MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[13,13,-2,33,-5,-6,-7,-8,-9,-10,-11,13,13,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,13,-20,-21,-22,-23,-24,-25,-27,33,-28,-29,33,-19,-18,-30,33,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'UPPERSAND':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[25,25,-2,-4,-5,-6,-7,-8,-9,-10,-11,25,25,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,25,-20,-21,-22,-23,-24,-25,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'TIMES':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[20,20,-2,-4,-5,-6,-7,-8,41,-10,-11,20,20,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,20,-20,-21,-22,-23,-24,-25,-27,-26,-28,-29,-16,-19,41,-30,-16,-31,-32,-33,41,41,41,41,41,41,41,41,41,41,-17,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[21,21,-2,-4,-5,-6,-7,-8,44,-10,-11,21,21,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,21,-20,-21,-22,-23,-24,-25,-27,-26,-28,-29,-16,-19,44,-30,-16,-31,-32,-33,-34,-35,44,44,44,44,44,44,44,44,-17,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[22,22,-2,-4,-5,-6,-7,-8,45,-10,-11,22,22,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,22,-20,-21,-22,-23,-24,-25,-27,-26,-28,-29,-16,-19,45,-30,-16,-31,-32,-33,-34,-35,45,45,45,45,45,45,45,45,-17,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[26,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,26,26,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,26,-20,-21,-22,-23,-24,-25,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[27,27,-2,-4,-5,-6,-7,-8,-9,-10,-11,27,27,-51,-52,-53,-54,27,-47,-48,-49,-14,-15,-46,-50,-45,-55,-56,-57,-3,-12,-13,27,-20,-21,-22,-23,-24,-25,27,27,27,27,27,27,27,27,27,27,27,27,27,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,27,-17,]),'INT_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[28,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,28,28,-51,-52,-53,-54,28,-47,-48,-49,-14,-15,-46,-50,-45,-55,-56,-57,-3,-12,-13,28,-20,-21,-22,-23,-24,-25,28,28,28,28,28,28,28,28,28,28,28,28,28,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,28,-17,]),'FLOAT_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[29,29,-2,-4,-5,-6,-7,-8,-9,-10,-11,29,29,-51,-52,-53,-54,29,-47,-48,-49,-14,-15,-46,-50,-45,-55,-56,-57,-3,-12,-13,29,-20,-21,-22,-23,-24,-25,29,29,29,29,29,29,29,29,29,29,29,29,29,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,29,-17,]),'STRING_CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[30,30,-2,-4,-5,-6,-7,-8,-9,-10,-11,30,30,-51,-52,-53,-54,30,-47,-48,-49,-14,-15,-46,-50,-45,-55,-56,-57,-3,-12,-13,30,-20,-21,-22,-23,-24,-25,30,30,30,30,30,30,30,30,30,30,30,30,30,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,30,-17,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,23,24,27,28,29,30,31,32,33,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-51,-52,-53,-54,-14,-15,-45,-55,-56,-57,-3,-12,-13,-27,-26,-28,-29,-16,-19,-18,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'DIVIDE':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,42,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,42,-30,-16,-31,-32,-33,42,42,42,42,42,42,42,42,42,42,-17,]),'MOD':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,43,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,43,-30,-16,-31,-32,-33,43,43,43,43,43,43,43,43,43,43,-17,]),'SMALLER':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,46,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,46,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,46,46,46,46,-17,]),'SMALLER_EQUAL':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,47,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,47,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,47,47,47,47,-17,]),'BIGGER':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,48,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,48,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,48,48,48,48,-17,]),'BIGGER_EQUAL':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,49,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,49,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,49,49,49,49,-17,]),'EQUAL':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,50,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,50,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,50,50,-17,]),'DIFFERENT':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,51,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,51,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,51,51,-17,]),'AND':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,52,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,52,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,52,-17,]),'OR':([4,7,9,11,23,24,27,28,29,30,32,33,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[-16,-30,53,-11,-14,-15,-45,-55,-56,-57,-12,-13,-16,53,-30,-16,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-17,]),'ASSIGN':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,35,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,35,-26,-17,]),'ASSIGN_TIMES':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,36,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,36,-26,-17,]),'ASSIGN_DIVIDE':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,37,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,37,-26,-17,]),'ASSIGN_MOD':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,38,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,38,-26,-17,]),'ASSIGN_PLUS':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,39,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,39,-26,-17,]),'ASSIGN_MINUS':([4,8,11,23,24,27,28,29,30,32,33,54,55,56,58,59,60,64,79,],[-26,40,-11,-14,-15,-45,-55,-56,-57,-12,-13,-27,-26,-28,-29,-16,40,-26,-17,]),'RPAREN':([14,15,16,17,57,],[-51,-52,-53,-54,78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,31,]),'postfix_expression':([0,2,12,13,19,34,41,42,43,44,45,46,47,48,49,50,51,52,53,78,],[4,4,55,55,59,64,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'type_specifier':([0,2,18,],[5,5,57,]),'assignment_expression':([0,2,34,],[6,6,61,]),'cast_expression':([0,2,19,34,41,42,43,44,45,46,47,48,49,50,51,52,53,78,],[7,7,58,63,63,63,63,63,63,63,63,63,63,63,63,63,63,79,]),'unary_expression':([0,2,12,13,34,],[8,8,54,56,60,]),'binary_expression':([0,2,34,41,42,43,44,45,46,47,48,49,50,51,52,53,],[9,9,62,65,66,67,68,69,70,71,72,73,74,75,76,77,]),'constant_expression':([0,2,],[10,10,]),'primary_expression':([0,2,12,13,19,34,41,42,43,44,45,46,47,48,49,50,51,52,53,78,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'unary_operator':([0,2,12,13,34,],[19,19,19,19,19,]),'identifier':([0,2,12,13,19,34,41,42,43,44,45,46,47,48,49,50,51,52,53,78,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'constant':([0,2,12,13,19,34,41,42,43,44,45,46,47,48,49,50,51,52,53,78,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'assignment_operator':([8,60,],[34,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',50),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',56),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',57),
  ('global_declaration -> postfix_expression','global_declaration',1,'p_global_declaration','uc_parser.py',63),
  ('global_declaration -> type_specifier','global_declaration',1,'p_global_declaration','uc_parser.py',64),
  ('global_declaration -> assignment_expression','global_declaration',1,'p_global_declaration','uc_parser.py',65),
  ('global_declaration -> cast_expression','global_declaration',1,'p_global_declaration','uc_parser.py',66),
  ('global_declaration -> unary_expression','global_declaration',1,'p_global_declaration','uc_parser.py',67),
  ('global_declaration -> binary_expression','global_declaration',1,'p_global_declaration','uc_parser.py',68),
  ('global_declaration -> constant_expression','global_declaration',1,'p_global_declaration','uc_parser.py',69),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',74),
  ('postfix_expression -> postfix_expression PLUS_PLUS','postfix_expression',2,'p_postfix_expression_2','uc_parser.py',79),
  ('postfix_expression -> postfix_expression MINUS_MINUS','postfix_expression',2,'p_postfix_expression_2','uc_parser.py',80),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',85),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',86),
  ('cast_expression -> postfix_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',91),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',96),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',101),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',102),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','uc_parser.py',110),
  ('assignment_operator -> ASSIGN_TIMES','assignment_operator',1,'p_assignment_operator','uc_parser.py',111),
  ('assignment_operator -> ASSIGN_DIVIDE','assignment_operator',1,'p_assignment_operator','uc_parser.py',112),
  ('assignment_operator -> ASSIGN_MOD','assignment_operator',1,'p_assignment_operator','uc_parser.py',113),
  ('assignment_operator -> ASSIGN_PLUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',114),
  ('assignment_operator -> ASSIGN_MINUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',115),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',120),
  ('unary_expression -> PLUS_PLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',125),
  ('unary_expression -> MINUS_MINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',126),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',127),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',132),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',133),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',134),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',135),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',136),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',137),
  ('binary_expression -> binary_expression SMALLER binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',138),
  ('binary_expression -> binary_expression SMALLER_EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',139),
  ('binary_expression -> binary_expression BIGGER binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',140),
  ('binary_expression -> binary_expression BIGGER_EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',141),
  ('binary_expression -> binary_expression EQUAL binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',142),
  ('binary_expression -> binary_expression DIFFERENT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',143),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',144),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',145),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',153),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',158),
  ('unary_operator -> UPPERSAND','unary_operator',1,'p_unary_operator','uc_parser.py',164),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',165),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',166),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',167),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',168),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',173),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',174),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',175),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',176),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',182),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','uc_parser.py',188),
  ('constant -> STRING_CONST','constant',1,'p_constant_3','uc_parser.py',194),
]
